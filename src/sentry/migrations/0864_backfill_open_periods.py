# Generated by Django 5.1.7 on 2025-04-04 23:34
import logging
from datetime import datetime
from enum import Enum

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBarApprox

logger = logging.getLogger(__name__)


# copied constants and enums
class ActivityType(Enum):
    SET_RESOLVED = 1
    SET_UNRESOLVED = 2
    SET_REGRESSION = 6


class GroupStatus:
    UNRESOLVED = 0
    RESOLVED = 1


# end copy

BATCH_SIZE = 100


def get_open_periods_for_group(apps, group, query_end, GroupOpenPeriod):
    Activity = apps.get_model("sentry", "Activity")

    # Filter to REGRESSION and RESOLVED activties to find the bounds of each open period.
    # The only UNRESOLVED activity we would care about is the first UNRESOLVED activity for the group creation,
    # but we don't create an entry for that.
    activities = Activity.objects.filter(
        group=group,
        type__in=[ActivityType.SET_REGRESSION.value, ActivityType.SET_RESOLVED.value],
        datetime__lte=query_end,
    ).order_by("-datetime")

    open_periods = []
    start: datetime | None = None
    end: datetime | None = None

    # Handle currently open period
    if group.status == GroupStatus.UNRESOLVED and len(activities) > 0:
        open_periods.append(
            GroupOpenPeriod(
                group=group,
                project=group.project,
                date_started=activities[0].datetime,
                date_ended=None,
                resolution_activity=None,
                user_id=None,
            )
        )
        activities = activities[1:]

    for activity in activities:
        if activity.type == ActivityType.SET_RESOLVED.value:
            end = activity.datetime
        elif activity.type == ActivityType.SET_REGRESSION.value:
            start = activity.datetime
            if end is not None:
                open_periods.append(
                    GroupOpenPeriod(
                        group=group,
                        project=group.project,
                        date_started=start,
                        date_ended=end,
                        resolution_activity=activity,
                        user_id=activity.user_id,
                    )
                )
                end = None

    # Add the very first open period, which has no UNRESOLVED activity for the group creation
    open_periods.append(
        GroupOpenPeriod(
            group=group,
            project=group.project,
            date_started=group.first_seen,
            date_ended=end if end else None,
            resolution_activity=None,
            user_id=None,
        )
    )
    return open_periods


def backfill_group_open_periods(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    Group = apps.get_model("sentry", "Group")
    GroupOpenPeriod = apps.get_model("sentry", "GroupOpenPeriod")

    batch = []

    for group_id, first_seen in RangeQuerySetWrapperWithProgressBarApprox(
        Group.objects.all().values_list("id", "first_seen"),
        result_value_getter=lambda item: item[0],
    ):
        # Skip groups that already have open periods starting from the first seen date.
        # These groups were either already backfilled or were created after the open period
        # logic was added.
        first_open_period = (
            GroupOpenPeriod.objects.filter(group_id=group_id).order_by("date_started").first()
        )
        if first_open_period and first_open_period.date_started == first_seen:
            continue

        # Backfill until the first open period that already exists.
        query_end = first_open_period.date_started if first_open_period else None
        open_periods = get_open_periods_for_group(apps, group_id, query_end, GroupOpenPeriod)

        batch.extend(open_periods)

        if len(batch) >= BATCH_SIZE:
            logger.info(
                "Processing batch for group open period backfill",
                extra={"group_id": group_id},
            )
            GroupOpenPeriod.objects.bulk_create(batch)
            batch = []

    if batch:
        GroupOpenPeriod.objects.bulk_create(batch)


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("sentry", "0863_update_organization_member_invite_model"),
    ]

    operations = [
        migrations.RunPython(
            backfill_group_open_periods,
            migrations.RunPython.noop,
            hints={"tables": ["sentry_groupopenperiod"]},
        ),
    ]
