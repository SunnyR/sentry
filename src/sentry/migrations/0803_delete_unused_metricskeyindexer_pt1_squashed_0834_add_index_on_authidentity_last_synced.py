# Generated by Django 5.1.5 on 2025-02-25 22:25

import bitfield.models
import datetime
import django.db.models.deletion
import django.db.models.functions.comparison
import django.utils.timezone
import sentry.db.models.fields.array
import sentry.db.models.fields.bounded
import sentry.db.models.fields.foreignkey
import sentry.db.models.fields.jsonfield
import sentry.db.models.fields.uuid
import sentry.new_migrations.monkey.fields
import sentry.new_migrations.monkey.models
import sentry.sentry_apps.models.sentry_app
from django.db import migrations, models

from sentry.new_migrations.migrations import CheckedMigration


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = False

    replaces = [
        ("sentry", "0803_delete_unused_metricskeyindexer_pt1"),
        ("sentry", "0804_delete_metrics_key_indexer_pt2"),
        ("sentry", "0805_add_alert_and_member_invite_scopes_to_sentry_apps"),
        ("sentry", "0806_remove_monitor_attachment_id_pt1"),
        ("sentry", "0807_remove_monitor_attachment_id_pt2"),
        ("sentry", "0808_change_grouphash_metadata_seer_matched_grouphash_deletion_config"),
        ("sentry", "0809_delete_auth_provider_default_teams"),
        ("sentry", "0810_add_project_has_flag"),
        ("sentry", "0811_fully_delete_auth_provider_default_teams"),
        ("sentry", "0812_rm_activation_incident"),
        ("sentry", "0813_rm_alertruleactivation_models"),
        ("sentry", "0814_drop_alertactivations"),
        ("sentry", "0815_add_action_cols_to_threads_model"),
        ("sentry", "0816_add_timestamp_to_group_tombstone"),
        ("sentry", "0817_update_notificationmessage_constraints_for_action_group_open_period"),
        ("sentry", "0818_enforce_check_in_environment_not_null"),
        ("sentry", "0819_alert_rule_snuba_query_non_null"),
        ("sentry", "0820_snuba_query_non_none"),
        ("sentry", "0821_create_groupsearchview_page_filter_columns"),
        ("sentry", "0822_alert_rule_always_organization"),
        ("sentry", "0823_projectcodeowners_raw_never_null"),
        ("sentry", "0824_projectcodeowners_schema_non_null"),
        ("sentry", "0825_remove_notificationmessage_unique_ag_constraint"),
        ("sentry", "0826_make_sentryapp_uuid_unique"),
        ("sentry", "0827_projectteam_non_null"),
        ("sentry", "0828_add_platform_to_grouphash_metadata"),
        ("sentry", "0829_add_additional_timestamps_to_checkins"),
        ("sentry", "0830_add_external_id_to_project"),
        ("sentry", "0831_add_index_external_id_organization_to_project"),
        ("sentry", "0832_make_grouphash_metadata_date_added_nullable"),
        ("sentry", "0833_add_relocationtransfer_models"),
        ("sentry", "0834_add_index_on_authidentity_last_synced"),
    ]

    dependencies = [
        ("sentry", "0802_remove_grouping_auto_update_option"),
        ("workflow_engine", "0022_add_action_group_status_model"),
    ]

    operations = [
        # sentry.new_migrations.monkey.models.SafeDeleteModel(),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(),
        migrations.AlterField(
            model_name="apiauthorization",
            name="scopes",
            field=bitfield.models.BitField(
                [
                    "project:read",
                    "project:write",
                    "project:admin",
                    "project:releases",
                    "team:read",
                    "team:write",
                    "team:admin",
                    "event:read",
                    "event:write",
                    "event:admin",
                    "org:read",
                    "org:write",
                    "org:admin",
                    "member:read",
                    "member:write",
                    "member:admin",
                    "org:integrations",
                    "alerts:read",
                    "alerts:write",
                    "member:invite",
                ],
                default=None,
            ),
        ),
        migrations.AlterField(
            model_name="apikey",
            name="scopes",
            field=bitfield.models.BitField(
                [
                    "project:read",
                    "project:write",
                    "project:admin",
                    "project:releases",
                    "team:read",
                    "team:write",
                    "team:admin",
                    "event:read",
                    "event:write",
                    "event:admin",
                    "org:read",
                    "org:write",
                    "org:admin",
                    "member:read",
                    "member:write",
                    "member:admin",
                    "org:integrations",
                    "alerts:read",
                    "alerts:write",
                    "member:invite",
                ],
                default=None,
            ),
        ),
        migrations.AlterField(
            model_name="apitoken",
            name="scopes",
            field=bitfield.models.BitField(
                [
                    "project:read",
                    "project:write",
                    "project:admin",
                    "project:releases",
                    "team:read",
                    "team:write",
                    "team:admin",
                    "event:read",
                    "event:write",
                    "event:admin",
                    "org:read",
                    "org:write",
                    "org:admin",
                    "member:read",
                    "member:write",
                    "member:admin",
                    "org:integrations",
                    "alerts:read",
                    "alerts:write",
                    "member:invite",
                ],
                default=None,
            ),
        ),
        migrations.AlterField(
            model_name="sentryapp",
            name="scopes",
            field=bitfield.models.BitField(
                [
                    "project:read",
                    "project:write",
                    "project:admin",
                    "project:releases",
                    "team:read",
                    "team:write",
                    "team:admin",
                    "event:read",
                    "event:write",
                    "event:admin",
                    "org:read",
                    "org:write",
                    "org:admin",
                    "member:read",
                    "member:write",
                    "member:admin",
                    "org:integrations",
                    "alerts:read",
                    "alerts:write",
                    "member:invite",
                ],
                default=None,
            ),
        ),
        # sentry.new_migrations.monkey.fields.SafeRemoveField(),
        # sentry.new_migrations.monkey.fields.SafeRemoveField(),
        migrations.AlterField(
            model_name="grouphashmetadata",
            name="seer_matched_grouphash",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="seer_matchees",
                to="sentry.grouphash",
            ),
        ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(),
        migrations.AlterField(
            model_name="project",
            name="flags",
            field=bitfield.models.BitField(
                [
                    "has_releases",
                    "has_issue_alerts_targeting",
                    "has_transactions",
                    "has_alert_filters",
                    "has_sessions",
                    "has_profiles",
                    "has_replays",
                    "has_feedbacks",
                    "has_new_feedbacks",
                    "spike_protection_error_currently_active",
                    "spike_protection_transaction_currently_active",
                    "spike_protection_attachment_currently_active",
                    "has_minified_stack_trace",
                    "has_cron_monitors",
                    "has_cron_checkins",
                    "has_sourcemaps",
                    "has_custom_metrics",
                    "has_high_priority_alerts",
                    "has_insights_http",
                    "has_insights_db",
                    "has_insights_assets",
                    "has_insights_app_start",
                    "has_insights_screen_load",
                    "has_insights_vitals",
                    "has_insights_caches",
                    "has_insights_queues",
                    "has_insights_llm_monitoring",
                    "has_flags",
                ],
                default=10,
                null=True,
            ),
        ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(),
        # sentry.new_migrations.monkey.fields.SafeRemoveField(),
        migrations.AlterField(
            model_name="alertruleactivationcondition",
            name="alert_rule",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="activation_condition",
                to="sentry.alertrule",
            ),
        ),
        migrations.AlterField(
            model_name="alertruleactivations",
            name="alert_rule",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="activations",
                to="sentry.alertrule",
            ),
        ),
        migrations.AlterField(
            model_name="alertruleactivations",
            name="query_subscription",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="sentry.querysubscription",
            ),
        ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(),
        migrations.AddField(
            model_name="notificationmessage",
            name="action",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.action"
            ),
        ),
        migrations.AddField(
            model_name="notificationmessage",
            name="group",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.group"
            ),
        ),
        migrations.AddField(
            model_name="notificationmessage",
            name="open_period_start",
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name="grouptombstone",
            name="date_added",
            field=models.DateTimeField(default=django.utils.timezone.now, null=True),
        ),
        migrations.AddConstraint(
            model_name="notificationmessage",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("incident__isnull", False),
                        ("trigger_action__isnull", False),
                        ("rule_action_uuid__isnull", True),
                        ("rule_fire_history__isnull", True),
                        ("action__isnull", True),
                        ("group__isnull", True),
                        ("open_period_start__isnull", True),
                    ),
                    models.Q(
                        ("incident__isnull", True),
                        ("trigger_action__isnull", True),
                        ("rule_action_uuid__isnull", False),
                        ("rule_fire_history__isnull", False),
                        ("action__isnull", True),
                        ("group__isnull", True),
                    ),
                    models.Q(
                        ("incident__isnull", True),
                        ("trigger_action__isnull", True),
                        ("rule_action_uuid__isnull", True),
                        ("rule_fire_history__isnull", True),
                        ("action__isnull", False),
                        ("group__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="notification_type_mutual_exclusivity",
            ),
        ),
        migrations.AddConstraint(
            model_name="notificationmessage",
            constraint=models.UniqueConstraint(
                models.F("rule_fire_history"),
                models.F("rule_action_uuid"),
                django.db.models.functions.comparison.Coalesce(
                    "open_period_start",
                    models.Value(datetime.datetime(1, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)),
                ),
                condition=models.Q(
                    ("error_code__isnull", True), ("parent_notification_message__isnull", True)
                ),
                name="singular_parent_message_per_rule_fire_history_rule_action_open_",
            ),
        ),
        migrations.AddConstraint(
            model_name="notificationmessage",
            constraint=models.UniqueConstraint(
                models.F("action"),
                models.F("group"),
                django.db.models.functions.comparison.Coalesce(
                    "open_period_start",
                    models.Value(datetime.datetime(1, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)),
                ),
                condition=models.Q(
                    ("error_code__isnull", True), ("parent_notification_message__isnull", True)
                ),
                name="singular_parent_message_per_action_group_open_period",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="notificationmessage",
            name="notification_for_issue_xor_metric_alert",
        ),
        migrations.RemoveConstraint(
            model_name="notificationmessage",
            name="singular_parent_message_per_rule_fire_history_and_rule_action",
        ),
        migrations.AlterField(
            model_name="monitorcheckin",
            name="monitor_environment",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.monitorenvironment"
            ),
        ),
        migrations.AlterField(
            model_name="alertrule",
            name="snuba_query",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.snubaquery", unique=True
            ),
        ),
        migrations.AlterField(
            model_name="querysubscription",
            name="snuba_query",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="subscriptions",
                to="sentry.snubaquery",
            ),
        ),
        migrations.AddField(
            model_name="groupsearchview",
            name="environments",
            field=sentry.db.models.fields.array.ArrayField(default=list, null=True),
        ),
        migrations.AddField(
            model_name="groupsearchview",
            name="is_all_projects",
            field=models.BooleanField(db_default=False),
        ),
        migrations.AddField(
            model_name="groupsearchview",
            name="time_filters",
            field=models.JSONField(db_default={"period": "14d"}),
        ),
        migrations.CreateModel(
            name="GroupSearchViewProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "group_search_view",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.groupsearchview"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupsearchviewproject",
                "unique_together": {("group_search_view", "project")},
            },
        ),
        migrations.AddField(
            model_name="groupsearchview",
            name="projects",
            field=models.ManyToManyField(
                through="sentry.GroupSearchViewProject", to="sentry.project"
            ),
        ),
        migrations.AlterField(
            model_name="alertrule",
            name="organization",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
            ),
        ),
        migrations.AlterField(
            model_name="projectcodeowners",
            name="raw",
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name="projectcodeowners",
            name="schema",
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.RemoveConstraint(
            model_name="notificationmessage",
            name="singular_parent_message_per_action_group_open_period",
        ),
        migrations.AlterField(
            model_name="sentryapp",
            name="uuid",
            field=models.CharField(
                default=sentry.sentry_apps.models.sentry_app.default_uuid,
                max_length=64,
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="teamkeytransaction",
            name="project_team",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.CASCADE,
                to="sentry.projectteam",
            ),
        ),
        migrations.AddField(
            model_name="grouphashmetadata",
            name="platform",
            field=models.CharField(null=True),
        ),
        migrations.AddField(
            model_name="monitorcheckin",
            name="date_clock",
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name="monitorcheckin",
            name="date_created",
            field=models.DateTimeField(default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name="project",
            name="external_id",
            field=models.CharField(max_length=256, null=True),
        ),
        migrations.AlterUniqueTogether(
            name="project",
            unique_together={("organization", "external_id"), ("organization", "slug")},
        ),
        migrations.AlterField(
            model_name="grouphashmetadata",
            name="date_added",
            field=models.DateTimeField(default=django.utils.timezone.now, null=True),
        ),
        migrations.CreateModel(
            name="ControlRelocationTransfer",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("relocation_uuid", sentry.db.models.fields.uuid.UUIDField(max_length=32)),
                ("org_slug", models.CharField()),
                ("requesting_region", models.CharField()),
                ("exporting_region", models.CharField()),
                ("state", models.CharField(default="request")),
                (
                    "scheduled_for",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("public_key", models.BinaryField(null=True)),
            ],
            options={
                "db_table": "sentry_controlrelocationtransfer",
            },
        ),
        migrations.CreateModel(
            name="RegionRelocationTransfer",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("relocation_uuid", sentry.db.models.fields.uuid.UUIDField(max_length=32)),
                ("org_slug", models.CharField()),
                ("requesting_region", models.CharField()),
                ("exporting_region", models.CharField()),
                ("state", models.CharField(default="request")),
                (
                    "scheduled_for",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
            ],
            options={
                "db_table": "sentry_regionrelocationtransfer",
            },
        ),
        migrations.AddIndex(
            model_name="authidentity",
            index=models.Index(fields=["last_synced"], name="auth_identity_last_synced_idx"),
        ),
    ]
