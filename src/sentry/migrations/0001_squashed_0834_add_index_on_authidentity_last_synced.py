# Generated by Django 5.1.5 on 2025-02-26 00:07

import bitfield.models
import datetime
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.db.migrations.operations.special
import django.db.models.constraints
import django.db.models.deletion
import django.db.models.functions.comparison
import django.db.models.manager
import django.utils.timezone
import sentry.db.mixin
import sentry.db.models.fields.array
import sentry.db.models.fields.bounded
import sentry.db.models.fields.citext
import sentry.db.models.fields.foreignkey
import sentry.db.models.fields.gzippeddict
import sentry.db.models.fields.hybrid_cloud_foreign_key
import sentry.db.models.fields.jsonfield
import sentry.db.models.fields.node
import sentry.db.models.fields.onetoone
import sentry.db.models.fields.picklefield
import sentry.db.models.fields.slug
import sentry.db.models.fields.text
import sentry.db.models.fields.uuid
import sentry.db.models.indexes
import sentry.deletions.models.scheduleddeletion
import sentry.incidents.models.alert_rule
import sentry.models.apiapplication
import sentry.models.apigrant
import sentry.models.apitoken
import sentry.models.broadcast
import sentry.models.groupshare
import sentry.models.orgauthtoken
import sentry.monitors.models
import sentry.new_migrations.monkey.fields
import sentry.new_migrations.monkey.models
import sentry.relocation.models.relocation
import sentry.sentry_apps.models.sentry_app
import sentry.sentry_apps.models.sentry_app_installation
import sentry.sentry_apps.models.servicehook
import sentry.users.models.authenticator
import sentry.users.models.user
import sentry.utils.security.hash
import uuid
from django.conf import settings
from django.db import migrations, models


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# sentry.migrations.0492_pickle_to_json_sentry_groupedmessage
# sentry.migrations.0493_pickle_to_json_sentry_activity
# sentry.migrations.0500_set_none_date_last_modified_to_date_uploaded
# sentry.migrations.0502_savedsearch_update_me_myteams
# sentry.migrations.0507_delete_pending_deletion_rules
# sentry.migrations.0511_pickle_to_json_sentry_rawevent
# sentry.migrations.0514_migrate_priority_saved_searches
# sentry.migrations.0515_slugify_invalid_monitors
# sentry.migrations.0517_backfill_pagerdutyservices_into_org_integrations
# sentry.migrations.0521_migrate_world_map_widgets
# sentry.migrations.0522_migrate_discover_savedquery_worldmaps
# sentry.migrations.0527_backfill_next_checkin_latest
# sentry.migrations.0528_truncate_flat_index
# sentry.migrations.0537_backfill_xactor_team_and_user_ids
# sentry.migrations.0538_remove_name_data_from_rule
# sentry.migrations.0546_backfill_fix_bad_xactors
# sentry.migrations.0550_migrate_no_action_dupe_issue_alerts
# sentry.migrations.0561_backfill_new_notification_tables
# sentry.migrations.0565_fix_diff_env_dupe_alerts
# sentry.migrations.0566_remove_cron_missed_margins_zero
# sentry.migrations.0568_monitors_fix_next_checkin_latest
# sentry.migrations.0574_backfill_weekly_report_settings
# sentry.migrations.0587_remove_unused_neglectedrule_rows
# sentry.migrations.0619_monitors_migrate_is_muted
# sentry.migrations.0621_set_muted_monitors_to_active
# sentry.migrations.0632_apitoken_backfill_last_chars
# sentry.migrations.0634_backfill_github_webhook_outbox_shard_ids
# sentry.migrations.0645_backfill_add_uuid_to_all_rule_actions
# sentry.migrations.0654_rename_priority_sort_to_trends
# sentry.migrations.0660_fix_cron_monitor_invalid_orgs
# sentry.migrations.0670_monitor_incident_cleanup_duplicates
# sentry.migrations.0672_backfill_ukraine_timezone_name
# sentry.migrations.0674_monitor_clear_missed_timeout_as_error
# sentry.migrations.0675_dashboard_widget_query_rename_priority_sort_to_trends
# sentry.migrations.0677_unpickle_project_options_again
# sentry.migrations.0680_unpickle_options_again
# sentry.migrations.0681_unpickle_authenticator_again
# sentry.migrations.0687_alert_rule_project_backfill_migration
# sentry.migrations.0692_backfill_group_priority_again
# sentry.migrations.0701_backfill_alertrule_user_team
# sentry.migrations.0702_alert_rule_project_backfill_migration_2
# sentry.migrations.0704_backfill_rule_user_team
# sentry.migrations.0706_grouphistory_userteam_backfill
# sentry.migrations.0711_backfill_group_attributes_to_self_hosted
# sentry.migrations.0726_apitoken_backfill_hashes
# sentry.migrations.0729_backfill_groupsearchviews_with_pinned_searches
# sentry.migrations.0730_add_subscription_fk_to_incident
# sentry.migrations.0739_backfill_group_info_to_group_attributes
# sentry.migrations.0742_backfill_alertrule_detection_type
# sentry.migrations.0743_backfill_broken_monitor_notification_setting_option
# sentry.migrations.0752_fix_substatus_for_unresolved_groups
# sentry.migrations.0753_fix_substatus_for_ignored_groups
# sentry.migrations.0764_migrate_bad_status_substatus_rows
# sentry.migrations.0766_fix_substatus_for_pending_merge
# sentry.migrations.0768_fix_old_group_first_seen_dates
# sentry.migrations.0772_backfill_grouphash_metadata_grouping_config
# sentry.migrations.0779_remove_groups_from_group_inbox
# sentry.migrations.0802_remove_grouping_auto_update_option
from sentry.new_migrations.migrations import CheckedMigration


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = False


    replaces = [('sentry', '0001_squashed_0484_break_org_member_user_fk'), ('sentry', '0485_remove_scheduled_job'), ('sentry', '0486_integer_pr_comment_issue_list'), ('sentry', '0487_add_indexes_to_bundles'), ('sentry', '0488_add_orgauthtoken'), ('sentry', '0489_index_checkin_timeout'), ('sentry', '0490_add_is_test_to_org'), ('sentry', '0491_remove_orgmemmap_unique_constraints'), ('sentry', '0492_pickle_to_json_sentry_groupedmessage'), ('sentry', '0493_pickle_to_json_sentry_activity'), ('sentry', '0494_add_traceid_checkin'), ('sentry', '0495_add_date_last_modified_to_artifact_bundle'), ('sentry', '0496_update_userid_state'), ('sentry', '0497_add_comment_reactions_column'), ('sentry', '0498_typed_bitfield'), ('sentry', '0499_typed_bitfield_revert'), ('sentry', '0500_set_none_date_last_modified_to_date_uploaded'), ('sentry', '0501_typed_bitfield_remove_labels'), ('sentry', '0502_savedsearch_update_me_myteams'), ('sentry', '0503_alter_notification_actor_nullable'), ('sentry', '0504_add_artifact_bundle_index'), ('sentry', '0505_debugfile_date_accessed'), ('sentry', '0506_null_boolean_fields'), ('sentry', '0507_delete_pending_deletion_rules'), ('sentry', '0507_add_oidc_scopes'), ('sentry', '0508_merging_migrations'), ('sentry', '0508_index_checkin_monitorenvironment'), ('sentry', '0509_merging_migrations'), ('sentry', '0510_index_checkin_traceid'), ('sentry', '0511_pickle_to_json_sentry_rawevent'), ('sentry', '0512_add_proguard_release_association'), ('sentry', '0513_django_jsonfield'), ('sentry', '0514_migrate_priority_saved_searches'), ('sentry', '0515_slugify_invalid_monitors'), ('sentry', '0516_switch_pagerduty_silo'), ('sentry', '0517_backfill_pagerdutyservices_into_org_integrations'), ('sentry', '0518_cleanup_bundles_indexes'), ('sentry', '0519_remove_repo_name_constraint'), ('sentry', '0520_add_flat_file_index_table'), ('sentry', '0521_migrate_world_map_widgets'), ('sentry', '0522_migrate_discover_savedquery_worldmaps'), ('sentry', '0523_add_new_index_to_groupedmessage'), ('sentry', '0524_flip_checkin_index'), ('sentry', '0525_add_next_checkin_latest'), ('sentry', '0526_pr_comment_type_column'), ('sentry', '0527_backfill_next_checkin_latest'), ('sentry', '0528_truncate_flat_index'), ('sentry', '0529_remove_pagerduty_service'), ('sentry', '0530_new_notification_tables'), ('sentry', '0531_add_notification_uuid_to_incident_activity'), ('sentry', '0532_denormalize_team_and_user_x_actor'), ('sentry', '0533_make_flatfile_unique_again'), ('sentry', '0534_add_notification_uuid_to_rule_fire_history'), ('sentry', '0535_add_created_date_to_outbox_model'), ('sentry', '0536_backfill_tombstones'), ('sentry', '0537_backfill_xactor_team_and_user_ids'), ('sentry', '0538_remove_name_data_from_rule'), ('sentry', '0539_add_last_state_change_monitorenv'), ('sentry', '0540_add_release_threshold_table'), ('sentry', '0541_add_replicated_auth_models'), ('sentry', '0542_rm_flatfile_file'), ('sentry', '0543_add_team_id_to_groupsubscription'), ('sentry', '0544_remove_groupsubscription_columns'), ('sentry', '0545_add_last_verified_auth_ident_replica'), ('sentry', '0546_backfill_fix_bad_xactors'), ('sentry', '0547_add_commitfilechange_language_column'), ('sentry', '0548_add_is_unclaimed_boolean_to_user'), ('sentry', '0549_re_add_groupsubscription_columns'), ('sentry', '0550_migrate_no_action_dupe_issue_alerts'), ('sentry', '0551_drop_xactor_actor'), ('sentry', '0552_create_neglectedalert_table'), ('sentry', '0553_add_new_index_to_groupedmessage_table'), ('sentry', '0554_add_team_replica'), ('sentry', '0555_set_neglectedrule_email_date_columns_nullable'), ('sentry', '0556_organizationmapping_replicate_require_2fa'), ('sentry', '0557_threshold_related_name'), ('sentry', '0558_add_organization_member_team_replica'), ('sentry', '0559_custom_dynamic_sampling_rule'), ('sentry', '0560_add_monitorincident_table'), ('sentry', '0561_backfill_new_notification_tables'), ('sentry', '0562_drop_xactor_actor_from_state'), ('sentry', '0563_commitfilechange_drop_language_column'), ('sentry', '0564_commitfilechange_delete_language_column'), ('sentry', '0565_fix_diff_env_dupe_alerts'), ('sentry', '0566_remove_cron_missed_margins_zero'), ('sentry', '0567_add_slug_reservation_model'), ('sentry', '0568_monitors_fix_next_checkin_latest'), ('sentry', '0569_dashboard_widgets_indicator'), ('sentry', '0570_repository_add_languages_column'), ('sentry', '0571_add_hybrid_cloud_foreign_key_to_slug_reservation'), ('sentry', '0572_sentry_remove_unused_eventuser_index'), ('sentry', '0573_add_first_seen_index_groupedmessage'), ('sentry', '0574_backfill_weekly_report_settings'), ('sentry', '0575_incident_date_added_index'), ('sentry', '0576_add_missing_org_integration_scope'), ('sentry', '0577_drop_latest_incident_index'), ('sentry', '0578_add_query_and_users_to_custom_dynamic_sampling_rules'), ('sentry', '0579_index_incident_trigger'), ('sentry', '0580_threhsold_window_positive_integer'), ('sentry', '0581_add_user_and_team_to_alert_rules'), ('sentry', '0582_add_status_indexes_checkins'), ('sentry', '0583_add_early_adopter_to_organization_mapping'), ('sentry', '0584_apitoken_add_name_and_last_chars'), ('sentry', '0585_add_orgmember_partnership_restricted_flag'), ('sentry', '0586_add_has_feedbacks_flag'), ('sentry', '0587_remove_unused_neglectedrule_rows'), ('sentry', '0588_add_relocation_models'), ('sentry', '0589_add_commit_date_added_indices'), ('sentry', '0590_add_metadata_to_sentry_app'), ('sentry', '0591_remove_relocation_hybrid_cloud_foreign_keys'), ('sentry', '0592_delete_relocation_hybrid_cloud_foreign_keys'), ('sentry', '0593_add_notification_flag_to_dynamic_sampling_custom_rule'), ('sentry', '0594_trivial_but_dangerous_2'), ('sentry', '0595_trivial_but_dangerous_3'), ('sentry', '0596_trivial_but_dangerous_4'), ('sentry', '0597_trivial_but_dangerous_5'), ('sentry', '0598_trivial_but_dangerous_1'), ('sentry', '0599_add_import_chunk'), ('sentry', '0600_eventattachment_metadata'), ('sentry', '0601_add_has_sourcemaps_project_flag'), ('sentry', '0602_import_chunk_unique_together'), ('sentry', '0603_add_dangerous_but_trivial_index'), ('sentry', '0604_remove_dangerous_but_trivial_index'), ('sentry', '0605_addremove_dangerous_but_trivial_index'), ('sentry', '0606_update_user_to_optional_organization_slug_reservation'), ('sentry', '0607_drop_externalactor_actorid'), ('sentry', '0608_notification_setting_db_constraint'), ('sentry', '0609_remove_notification_setting_model'), ('sentry', '0610_remove_notification_setting_table'), ('sentry', '0611_add_regression_group_model'), ('sentry', '0612_expand_relocation_model'), ('sentry', '0613_drop_eventuser_table_part_1'), ('sentry', '0614_drop_eventuser_table_part_2'), ('sentry', '0615_add_dashboard_widget_query_on_demand_table'), ('sentry', '0616_drop_event_user_id_from_userreport_table_step_1'), ('sentry', '0617_monitor_boolean_fields_muted_disabled'), ('sentry', '0618_drop_event_user_id_from_userreport_table_step_2'), ('sentry', '0619_monitors_migrate_is_muted'), ('sentry', '0620_add_has_new_feedbacks_flag'), ('sentry', '0621_set_muted_monitors_to_active'), ('sentry', '0622_add_has_custom_metrics_flag'), ('sentry', '0623_increase_regression_fingerprint_length'), ('sentry', '0624_add_is_muted_monitorenvironment'), ('sentry', '0625_change_rule_label_type_to_char256'), ('sentry', '0626_add_member_project_creation_bitfield'), ('sentry', '0627_change_to_sentry_slug'), ('sentry', '0628_better_menv_latest_index'), ('sentry', '0629_eventattachment_index'), ('sentry', '0630_better_monitor_latest_index'), ('sentry', '0631_add_priority_columns_to_groupedmessage'), ('sentry', '0632_apitoken_backfill_last_chars'), ('sentry', '0633_add_priority_locked_at_to_groupedmessage'), ('sentry', '0634_backfill_github_webhook_outbox_shard_ids'), ('sentry', '0635_groupenvironment_index'), ('sentry', '0636_monitor_incident_env_resolving_index'), ('sentry', '0637_remove_pr_comment_pr_id_constraint'), ('sentry', '0638_add_date_added_to_dashboard_widget_on_demand'), ('sentry', '0639_add_spec_version_to_dashboard_on_demand'), ('sentry', '0640_index_together'), ('sentry', '0641_backfill_group_attributes'), ('sentry', '0642_index_together_release'), ('sentry', '0643_add_date_modified_col_dashboard_widget_query'), ('sentry', '0644_backfill_priority_for_groups'), ('sentry', '0645_backfill_add_uuid_to_all_rule_actions'), ('sentry', '0646_create_notification_message_table'), ('sentry', '0647_apitoken_add_hashed_columns'), ('sentry', '0648_monitor_env_break_env_fk'), ('sentry', '0649_add_index_for_group_priority'), ('sentry', '0650_create_sentryshot'), ('sentry', '0651_enable_activated_alert_rules'), ('sentry', '0652_alert_rule_activation_condition'), ('sentry', '0653_apitoken_add_token_type'), ('sentry', '0654_rename_priority_sort_to_trends'), ('sentry', '0655_apitoken_increase_token_length'), ('sentry', '0656_add_discover_dataset_split_dashboard'), ('sentry', '0657_add_status_column_for_alert_rule_trigger_action'), ('sentry', '0658_projectkey_usecase'), ('sentry', '0659_artifactbundleindex_cleanup'), ('sentry', '0660_fix_cron_monitor_invalid_orgs'), ('sentry', '0661_artifactbundleindex_cleanup_step2'), ('sentry', '0662_monitor_drop_last_state_change'), ('sentry', '0663_artifactbundleindex_cleanup_step3'), ('sentry', '0664_create_new_broken_monitor_detection_table'), ('sentry', '0665_monitor_drop_last_state_change_db'), ('sentry', '0666_monitor_incident_default_grouphash'), ('sentry', '0667_drop_django_team_org_role_column'), ('sentry', '0668_add_active_monitor_incident_index'), ('sentry', '0669_alert_rule_activation'), ('sentry', '0670_monitor_incident_cleanup_duplicates'), ('sentry', '0671_enforce_unqiue_active_incidents'), ('sentry', '0672_backfill_ukraine_timezone_name'), ('sentry', '0673_add_env_muted_to_broken_detection'), ('sentry', '0674_monitor_clear_missed_timeout_as_error'), ('sentry', '0675_dashboard_widget_query_rename_priority_sort_to_trends'), ('sentry', '0676_apitoken_hashed_indexes'), ('sentry', '0677_unpickle_project_options_again'), ('sentry', '0678_add_is_hidden_dashboard_widget_query'), ('sentry', '0679_add_query_sub_fk_to_aar_activations'), ('sentry', '0680_unpickle_options_again'), ('sentry', '0681_unpickle_authenticator_again'), ('sentry', '0682_monitors_constrain_to_project_id_slug'), ('sentry', '0683_reprocessing_datetime_indexes'), ('sentry', '0684_monitor_check_in_config_nullable'), ('sentry', '0685_alert_rule_conditons_rename_singular'), ('sentry', '0686_remove_config_from_checkin_state_operation'), ('sentry', '0687_alert_rule_project_backfill_migration'), ('sentry', '0688_add_project_flag_high_priority_alerts'), ('sentry', '0689_drop_config_from_cron_checkin'), ('sentry', '0690_remove_project_team_avatar'), ('sentry', '0691_remove_project_team_avatar_model'), ('sentry', '0692_backfill_group_priority_again'), ('sentry', '0693_add_monitors_ownership_actor_id'), ('sentry', '0694_db_index_alert_rule_actions'), ('sentry', '0695_add_monitors_ownership_owner_user_id_team_id'), ('sentry', '0696_remove_monitor_owner_actor_id'), ('sentry', '0697_remove_monitor_owner_actor_id_db'), ('sentry', '0698_remove_file_id_from_control_avatars'), ('sentry', '0699_update_monitor_owner_team_id_cascsade'), ('sentry', '0700_drop_fileid_controlavatar'), ('sentry', '0701_backfill_alertrule_user_team'), ('sentry', '0702_alert_rule_project_backfill_migration_2'), ('sentry', '0703_add_team_user_to_rule'), ('sentry', '0704_backfill_rule_user_team'), ('sentry', '0705_grouphistory_add_userteam'), ('sentry', '0706_grouphistory_userteam_backfill'), ('sentry', '0707_alert_rule_activations_incidents_fk'), ('sentry', '0708_rule_remove_owner_state'), ('sentry', '0709_alertrule_remove_owner_state'), ('sentry', '0710_grouphistory_remove_actor_state'), ('sentry', '0711_backfill_group_attributes_to_self_hosted'), ('sentry', '0712_create_tombstone_compound_indexes'), ('sentry', '0713_team_remove_actor_state'), ('sentry', '0714_drop_project_team_avatar'), ('sentry', '0715_remove_actormodel_constraints'), ('sentry', '0716_remove_actormodel'), ('sentry', '0717_query_subscription_timebox'), ('sentry', '0718_delete_timebox_columns'), ('sentry', '0719_querysubscription_timebox_column_deletion_db'), ('sentry', '0720_remove_actor_columns'), ('sentry', '0721_delete_sentryfunctions'), ('sentry', '0722_drop_sentryfunctions'), ('sentry', '0723_project_template_models'), ('sentry', '0724_discover_saved_query_dataset'), ('sentry', '0725_create_sentry_groupsearchview_table'), ('sentry', '0726_apitoken_backfill_hashes'), ('sentry', '0727_add_description_alertrule'), ('sentry', '0728_incident_subscription_fk'), ('sentry', '0729_backfill_groupsearchviews_with_pinned_searches'), ('sentry', '0730_add_subscription_fk_to_incident'), ('sentry', '0731_add_insight_project_flags'), ('sentry', '0732_add_span_attribute_extraction_rules'), ('sentry', '0733_relocation_provenance'), ('sentry', '0734_rm_reprocessing_step1'), ('sentry', '0735_sunset_appstore_connect_integration'), ('sentry', '0736_rm_reprocessing_step2'), ('sentry', '0737_add_discover_saved_query_dataset_source'), ('sentry', '0738_rm_reprocessing_step3'), ('sentry', '0739_backfill_group_info_to_group_attributes'), ('sentry', '0740_one_relocation_file_kind_per_relocation'), ('sentry', '0741_metric_alert_anomaly_detection'), ('sentry', '0742_backfill_alertrule_detection_type'), ('sentry', '0743_backfill_broken_monitor_notification_setting_option'), ('sentry', '0744_add_dataset_source_field_to_dashboards'), ('sentry', '0745_add_prevent_superuser_access_bitflag'), ('sentry', '0746_add_bitflags_to_hybrid_cloud'), ('sentry', '0747_create_datasecrecywaiver_table'), ('sentry', '0748_create_grouphashmetadata_table'), ('sentry', '0749_disable_member_invite'), ('sentry', '0750_disable_member_invite_in_hybrid_cloud'), ('sentry', '0751_grouphashmetadata_use_one_to_one_field_for_grouphash'), ('sentry', '0752_fix_substatus_for_unresolved_groups'), ('sentry', '0753_fix_substatus_for_ignored_groups'), ('sentry', '0754_extend_broadcast_model'), ('sentry', '0755_remove_fk_constraints_spanattributeextraction'), ('sentry', '0756_grouprelease_represented_in_django'), ('sentry', '0757_add_scopes_to_apiapplication'), ('sentry', '0758_remove_spanattributeextraction_models'), ('sentry', '0759_remove_spanattributeextraction_tables'), ('sentry', '0760_remove_appstore_connect_integration_tables'), ('sentry', '0761_add_substatus_constraint_to_groups'), ('sentry', '0762_drop_substatus_constraint_to_groups'), ('sentry', '0763_add_created_by_to_broadcasts'), ('sentry', '0764_migrate_bad_status_substatus_rows'), ('sentry', '0765_add_org_to_api_auth'), ('sentry', '0766_fix_substatus_for_pending_merge'), ('sentry', '0767_add_selected_aggregate_to_dashboards_widget_query'), ('sentry', '0768_fix_old_group_first_seen_dates'), ('sentry', '0769_add_seer_fields_to_grouphash_metadata'), ('sentry', '0770_increase_project_slug_max_length'), ('sentry', '0771_add_grouping_config_to_grouphash_metadata'), ('sentry', '0772_backfill_grouphash_metadata_grouping_config'), ('sentry', '0773_make_group_score_nullable'), ('sentry', '0774_drop_group_score_in_state_only'), ('sentry', '0775_add_dashboard_permissions_model'), ('sentry', '0776_drop_group_score_in_database'), ('sentry', '0777_add_related_name_to_dashboard_permissions'), ('sentry', '0778_userreport_comments_max_length'), ('sentry', '0779_remove_groups_from_group_inbox'), ('sentry', '0780_create_sentry_rollback_models'), ('sentry', '0781_add_hash_basis_to_grouphash_metadata'), ('sentry', '0782_align_deletedproject_slug_length'), ('sentry', '0783_remove_release_project_id'), ('sentry', '0784_remove_broadcasts_cta_column'), ('sentry', '0785_add_new_field_to_dashboard_permissions'), ('sentry', '0786_drop_broadcasts_cta_column'), ('sentry', '0787_make_dashboard_perms_col_nullable'), ('sentry', '0788_remove__dashboard_perms_col'), ('sentry', '0789_add_unique_constraint_to_rollbackorganization'), ('sentry', '0790_delete_dashboard_perms_col'), ('sentry', '0791_add_hashing_metadata_to_grouphash_metadata'), ('sentry', '0792_add_unique_index_apiauthorization'), ('sentry', '0793_remove_db_constraint_alert_rule_exclusion'), ('sentry', '0794_rm_excluded_included_projects_alertrule'), ('sentry', '0795_drop_included_excluded_projects'), ('sentry', '0796_rm_excluded_projects_triggers'), ('sentry', '0797_drop_excluded_project_triggers'), ('sentry', '0798_add_favorite_dashboard_col'), ('sentry', '0799_cron_incident_index'), ('sentry', '0800_rm_incidentseen_incidentsubscription'), ('sentry', '0801_drop_incidentseen_incidentsubscription'), ('sentry', '0802_remove_grouping_auto_update_option'), ('sentry', '0803_delete_unused_metricskeyindexer_pt1'), ('sentry', '0804_delete_metrics_key_indexer_pt2'), ('sentry', '0805_add_alert_and_member_invite_scopes_to_sentry_apps'), ('sentry', '0806_remove_monitor_attachment_id_pt1'), ('sentry', '0807_remove_monitor_attachment_id_pt2'), ('sentry', '0808_change_grouphash_metadata_seer_matched_grouphash_deletion_config'), ('sentry', '0809_delete_auth_provider_default_teams'), ('sentry', '0810_add_project_has_flag'), ('sentry', '0811_fully_delete_auth_provider_default_teams'), ('sentry', '0812_rm_activation_incident'), ('sentry', '0813_rm_alertruleactivation_models'), ('sentry', '0814_drop_alertactivations'), ('sentry', '0815_add_action_cols_to_threads_model'), ('sentry', '0816_add_timestamp_to_group_tombstone'), ('sentry', '0817_update_notificationmessage_constraints_for_action_group_open_period'), ('sentry', '0818_enforce_check_in_environment_not_null'), ('sentry', '0819_alert_rule_snuba_query_non_null'), ('sentry', '0820_snuba_query_non_none'), ('sentry', '0821_create_groupsearchview_page_filter_columns'), ('sentry', '0822_alert_rule_always_organization'), ('sentry', '0823_projectcodeowners_raw_never_null'), ('sentry', '0824_projectcodeowners_schema_non_null'), ('sentry', '0825_remove_notificationmessage_unique_ag_constraint'), ('sentry', '0826_make_sentryapp_uuid_unique'), ('sentry', '0827_projectteam_non_null'), ('sentry', '0828_add_platform_to_grouphash_metadata'), ('sentry', '0829_add_additional_timestamps_to_checkins'), ('sentry', '0830_add_external_id_to_project'), ('sentry', '0831_add_index_external_id_organization_to_project'), ('sentry', '0832_make_grouphash_metadata_date_added_nullable'), ('sentry', '0833_add_relocationtransfer_models'), ('sentry', '0834_add_index_on_authidentity_last_synced')]

    initial = True

    dependencies = [
        ('workflow_engine', '0022_add_action_group_status_model'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('username', models.CharField(max_length=128, unique=True)),
                ('name', models.CharField(blank=True, db_column='first_name', max_length=200)),
                ('email', models.EmailField(blank=True, max_length=75)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_managed', models.BooleanField(default=False)),
                ('is_sentry_app', models.NullBooleanField(default=None)),
                ('is_password_expired', models.BooleanField(default=False)),
                ('last_password_change', models.DateTimeField(null=True)),
                ('flags', bitfield.models.BitField((('newsletter_consent_prompt', 'Do we need to ask this user for newsletter consent?'),), default=0, null=True)),
                ('session_nonce', models.CharField(max_length=12, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now, null=True)),
            ],
            options={
                'db_table': 'auth_user',
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', sentry.users.models.user.UserManager(cache_fields=['pk'])),
            ],
        ),
        migrations.CreateModel(
            name='ApiApplication',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('client_id', models.CharField(default=sentry.models.apiapplication.generate_token, max_length=64, unique=True)),
                ('client_secret', models.TextField(default=sentry.models.apiapplication.generate_token)),
                ('name', models.CharField(blank=True, default=sentry.models.apiapplication.generate_name, max_length=64)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0)),
                ('allowed_origins', models.TextField(blank=True, null=True)),
                ('redirect_uris', models.TextField()),
                ('homepage_url', models.URLField(null=True)),
                ('privacy_url', models.URLField(null=True)),
                ('terms_url', models.URLField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('owner', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_apiapplication',
            },
        ),
        migrations.CreateModel(
            name='ApiGrant',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(db_index=True, default=sentry.models.apigrant.generate_code, max_length=64)),
                ('expires_at', models.DateTimeField(db_index=True, default=sentry.models.apigrant.default_expiration)),
                ('redirect_uri', models.CharField(max_length=255)),
                ('scopes', bitfield.models.BitField((('project:read', 'project:read'), ('project:write', 'project:write'), ('project:admin', 'project:admin'), ('project:releases', 'project:releases'), ('team:read', 'team:read'), ('team:write', 'team:write'), ('team:admin', 'team:admin'), ('event:read', 'event:read'), ('event:write', 'event:write'), ('event:admin', 'event:admin'), ('org:read', 'org:read'), ('org:write', 'org:write'), ('org:admin', 'org:admin'), ('member:read', 'member:read'), ('member:write', 'member:write'), ('member:admin', 'member:admin')), default=None)),
                ('scope_list', sentry.db.models.fields.array.ArrayField(null=True)),
                ('application', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.apiapplication')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_apigrant',
            },
        ),
        migrations.CreateModel(
            name='ApiKey',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE')),
                ('label', models.CharField(blank=True, default='Default', max_length=64)),
                ('key', models.CharField(max_length=32, unique=True)),
                ('scopes', bitfield.models.BitField((('project:read', 'project:read'), ('project:write', 'project:write'), ('project:admin', 'project:admin'), ('project:releases', 'project:releases'), ('team:read', 'team:read'), ('team:write', 'team:write'), ('team:admin', 'team:admin'), ('event:read', 'event:read'), ('event:write', 'event:write'), ('event:admin', 'event:admin'), ('org:read', 'org:read'), ('org:write', 'org:write'), ('org:admin', 'org:admin'), ('member:read', 'member:read'), ('member:write', 'member:write'), ('member:admin', 'member:admin')), default=None)),
                ('scope_list', sentry.db.models.fields.array.ArrayField(null=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('allowed_origins', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sentry_apikey',
            },
        ),
        migrations.CreateModel(
            name='ApiToken',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('scopes', bitfield.models.BitField((('project:read', 'project:read'), ('project:write', 'project:write'), ('project:admin', 'project:admin'), ('project:releases', 'project:releases'), ('team:read', 'team:read'), ('team:write', 'team:write'), ('team:admin', 'team:admin'), ('event:read', 'event:read'), ('event:write', 'event:write'), ('event:admin', 'event:admin'), ('org:read', 'org:read'), ('org:write', 'org:write'), ('org:admin', 'org:admin'), ('member:read', 'member:read'), ('member:write', 'member:write'), ('member:admin', 'member:admin')), default=None)),
                ('scope_list', sentry.db.models.fields.array.ArrayField(null=True)),
                ('token', models.CharField(default=sentry.models.apitoken.generate_token, max_length=64, unique=True)),
                ('refresh_token', models.CharField(default=sentry.models.apitoken.generate_token, max_length=64, null=True, unique=True)),
                ('expires_at', models.DateTimeField(default=sentry.models.apitoken.default_expiration, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('application', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.apiapplication')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_apitoken',
            },
        ),
        migrations.CreateModel(
            name='Broadcast',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('upstream_id', models.CharField(blank=True, max_length=32, null=True)),
                ('title', models.CharField(max_length=32)),
                ('message', models.CharField(max_length=256)),
                ('link', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('date_expires', models.DateTimeField(blank=True, default=sentry.models.broadcast.default_expiration, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_broadcast',
            },
        ),
        migrations.CreateModel(
            name='CommitAuthor',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=128, null=True)),
                ('email', models.EmailField(max_length=75)),
                ('external_id', models.CharField(max_length=164, null=True)),
            ],
            options={
                'db_table': 'sentry_commitauthor',
                'unique_together': {('organization_id', 'email'), ('organization_id', 'external_id')},
            },
        ),
        migrations.CreateModel(
            name='DeletedOrganization',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('actor_label', models.CharField(max_length=64, null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('actor_key', models.CharField(max_length=32, null=True)),
                ('ip_address', models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ('date_deleted', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_created', models.DateTimeField(null=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('name', models.CharField(max_length=64, null=True)),
                ('slug', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'sentry_deletedorganization',
            },
        ),
        migrations.CreateModel(
            name='DeletedProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('actor_label', models.CharField(max_length=64, null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('actor_key', models.CharField(max_length=32, null=True)),
                ('ip_address', models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ('date_deleted', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_created', models.DateTimeField(null=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('slug', models.CharField(max_length=50, null=True)),
                ('name', models.CharField(max_length=200, null=True)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('organization_name', models.CharField(max_length=64, null=True)),
                ('organization_slug', models.CharField(max_length=50, null=True)),
                ('platform', models.CharField(max_length=64, null=True)),
            ],
            options={
                'db_table': 'sentry_deletedproject',
            },
        ),
        migrations.CreateModel(
            name='DeletedTeam',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('actor_label', models.CharField(max_length=64, null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('actor_key', models.CharField(max_length=32, null=True)),
                ('ip_address', models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ('date_deleted', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_created', models.DateTimeField(null=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('name', models.CharField(max_length=64, null=True)),
                ('slug', models.CharField(max_length=50, null=True)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('organization_name', models.CharField(max_length=64, null=True)),
                ('organization_slug', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'sentry_deletedteam',
            },
        ),
        migrations.CreateModel(
            name='DiscoverSavedQuery',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('query', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('created_by_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
            ],
            options={
                'db_table': 'sentry_discoversavedquery',
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('email', sentry.db.models.fields.citext.CIEmailField(max_length=75, unique=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_email',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('project_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('name', models.CharField(max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_environment',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('type', models.CharField(max_length=64)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('headers', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('size', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('checksum', models.CharField(db_index=True, max_length=40, null=True)),
                ('path', models.TextField(null=True)),
            ],
            options={
                'db_table': 'sentry_file',
            },
        ),
        migrations.CreateModel(
            name='FileBlob',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('path', models.TextField(null=True)),
                ('size', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('checksum', models.CharField(max_length=40, unique=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_fileblob',
            },
        ),
        migrations.CreateModel(
            name='FileBlobIndex',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('offset', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('blob', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.fileblob')),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.file')),
            ],
            options={
                'db_table': 'sentry_fileblobindex',
                'unique_together': {('file', 'blob', 'offset')},
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('logger', models.CharField(blank=True, db_index=True, default='', max_length=64)),
                ('level', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(blank=True, db_index=True, default=40)),
                ('message', models.TextField()),
                ('culprit', models.CharField(blank=True, db_column='view', max_length=200, null=True)),
                ('num_comments', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0, null=True)),
                ('platform', models.CharField(max_length=64, null=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0)),
                ('times_seen', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=1)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('first_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('resolved_at', models.DateTimeField(db_index=True, null=True)),
                ('active_at', models.DateTimeField(db_index=True, null=True)),
                ('time_spent_total', sentry.db.models.fields.bounded.BoundedIntegerField(default=0)),
                ('time_spent_count', sentry.db.models.fields.bounded.BoundedIntegerField(default=0)),
                ('score', sentry.db.models.fields.bounded.BoundedIntegerField(default=0)),
                ('is_public', models.NullBooleanField(default=False)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField(blank=True, null=True)),
                ('short_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
            ],
            options={
                'verbose_name_plural': 'grouped messages',
                'db_table': 'sentry_groupedmessage',
                'verbose_name': 'grouped message',
                'permissions': (('can_view', 'Can view'),),
            },
        ),
        migrations.CreateModel(
            name='GroupRedirect',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('previous_group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(unique=True)),
            ],
            options={
                'db_table': 'sentry_groupredirect',
            },
        ),
        migrations.CreateModel(
            name='GroupSnooze',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('until', models.DateTimeField(null=True)),
                ('count', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('window', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('user_count', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('user_window', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('state', sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.group', unique=True)),
            ],
            options={
                'db_table': 'sentry_groupsnooze',
            },
        ),
        migrations.CreateModel(
            name='Integration',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('provider', models.CharField(max_length=64)),
                ('external_id', models.CharField(max_length=64)),
                ('name', models.CharField(max_length=200)),
                ('metadata', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
            ],
            options={
                'db_table': 'sentry_integration',
                'unique_together': {('provider', 'external_id')},
            },
        ),
        migrations.CreateModel(
            name='LostPasswordHash',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('hash', models.CharField(max_length=32)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'db_table': 'sentry_lostpasswordhash',
            },
        ),
        migrations.CreateModel(
            name='Monitor',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guid', sentry.db.models.fields.uuid.UUIDField(editable=False, max_length=32, unique=True)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('name', models.CharField(max_length=128)),
                ('slug', models.SlugField()),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('config', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_monitor',
                'unique_together': {('organization_id', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='MonitorLocation',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guid', sentry.db.models.fields.uuid.UUIDField(editable=False, max_length=32, unique=True)),
                ('name', models.CharField(max_length=128)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_monitorlocation',
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64, unique=True)),
                ('value', sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                ('last_updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_option',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('slug', models.SlugField(unique=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('default_role', models.CharField(default='member', max_length=32)),
                ('flags', bitfield.models.BitField((('allow_joinleave', 'Allow members to join and leave teams without requiring approval.'), ('enhanced_privacy', 'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'), ('disable_shared_issues', 'Disable sharing of limited details on issues to anonymous users.'), ('early_adopter', 'Enable early adopter status, gaining access to features prior to public release.'), ('require_2fa', 'Require and enforce two-factor authentication for all members.'), ('disable_new_visibility_features', 'Temporarily opt out of new visibility features and ui')), default=1)),
            ],
            options={
                'db_table': 'sentry_organization',
            },
        ),
        migrations.CreateModel(
            name='OrganizationAvatar',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(db_index=True, max_length=32, unique=True)),
                ('avatar_type', models.PositiveSmallIntegerField(default=0)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.file', unique=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.organization', unique=True)),
            ],
            options={
                'db_table': 'sentry_organizationavatar',
            },
        ),
        migrations.CreateModel(
            name='OrganizationIntegration',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('config', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('default_auth_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('integration', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.integration')),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_organizationintegration',
                'unique_together': {('organization_id', 'integration')},
            },
        ),
        migrations.CreateModel(
            name='OrganizationMember',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, max_length=75, null=True)),
                ('role', models.CharField(default='member', max_length=32)),
                ('flags', bitfield.models.BitField((('sso:linked', 'sso:linked'), ('sso:invalid', 'sso:invalid')), default=0)),
                ('token', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('token_expires_at', models.DateTimeField(default=None, null=True)),
                ('has_global_access', models.BooleanField(default=True)),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(blank=True, default=50)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_set', to='sentry.organization')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', blank=True, db_index=True, null=True, on_delete='CASCADE')),
                ('inviter_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', blank=True, db_index=True, null=True, on_delete='SET_NULL')),
            ],
            options={
                'db_table': 'sentry_organizationmember',
                'unique_together': {('organization', 'email'), ('organization', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('slug', models.SlugField(null=True)),
                ('name', models.CharField(max_length=200)),
                ('forced_color', models.CharField(blank=True, max_length=6, null=True)),
                ('public', models.BooleanField(default=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0)),
                ('first_event', models.DateTimeField(null=True)),
                ('flags', bitfield.models.BitField((('has_releases', 'This Project has sent release data'),), default=0, null=True)),
                ('platform', models.CharField(max_length=64, null=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_project',
            },
            bases=(models.Model, sentry.db.mixin.PendingDeletionMixin),
        ),
        migrations.CreateModel(
            name='ProjectAvatar',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(db_index=True, max_length=32, unique=True)),
                ('avatar_type', models.PositiveSmallIntegerField(default=0)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.file', unique=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.project', unique=True)),
            ],
            options={
                'db_table': 'sentry_projectavatar',
            },
        ),
        migrations.CreateModel(
            name='ProjectIntegration',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('config', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('integration_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Integration', db_index=True, on_delete='CASCADE')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_projectintegration',
                'unique_together': {('project', 'integration_id')},
            },
        ),
        migrations.CreateModel(
            name='ProjectKey',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, max_length=64, null=True)),
                ('public_key', models.CharField(max_length=32, null=True, unique=True)),
                ('secret_key', models.CharField(max_length=32, null=True, unique=True)),
                ('roles', bitfield.models.BitField((('store', 'Event API access'), ('api', 'Web API access')), default=1)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('rate_limit_count', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('rate_limit_window', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='key_set', to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_projectkey',
            },
        ),
        migrations.CreateModel(
            name='ProjectOwnership',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('raw', models.TextField(null=True)),
                ('schema', sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ('fallthrough', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project', unique=True)),
            ],
            options={
                'db_table': 'sentry_projectownership',
            },
        ),
        migrations.CreateModel(
            name='PullRequest',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('repository_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('key', models.CharField(max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.TextField(null=True)),
                ('message', models.TextField(null=True)),
                ('merge_commit_sha', models.CharField(max_length=64, null=True)),
                ('author', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.commitauthor')),
            ],
            options={
                'db_table': 'sentry_pull_request',
                'unique_together': {('repository_id', 'key')},
                'indexes': [models.Index(fields=['repository_id', 'date_added'], name='sentry_pull_reposit_c429a4_idx'), models.Index(fields=['organization_id', 'merge_commit_sha'], name='sentry_pull_organiz_8aabcf_idx')],
            },
        ),
        migrations.CreateModel(
            name='RawEvent',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('event_id', models.CharField(max_length=32, null=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('data', sentry.db.models.fields.node.NodeField(blank=True, null=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_rawevent',
                'unique_together': {('project', 'event_id')},
            },
        ),
        migrations.CreateModel(
            name='Relay',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('relay_id', models.CharField(max_length=64, unique=True)),
                ('public_key', models.CharField(max_length=200)),
                ('first_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_internal', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'sentry_relay',
            },
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('version', models.CharField(max_length=250)),
                ('ref', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_started', models.DateTimeField(blank=True, null=True)),
                ('date_released', models.DateTimeField(blank=True, null=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default={})),
                ('new_groups', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('commit_count', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0, null=True)),
                ('last_commit_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('authors', sentry.db.models.fields.array.ArrayField(null=True)),
                ('total_deploys', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0, null=True)),
                ('last_deploy_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('owner_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', blank=True, db_index=True, null=True, on_delete='SET_NULL')),
            ],
            options={
                'db_table': 'sentry_release',
            },
        ),
        migrations.CreateModel(
            name='ReleaseProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('new_groups', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0, null=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.release')),
            ],
            options={
                'db_table': 'sentry_release_project',
                'unique_together': {('project', 'release')},
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('environment_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('label', models.CharField(max_length=64)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField()),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_rule',
            },
        ),
        migrations.CreateModel(
            name='SavedSearch',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.PositiveSmallIntegerField(default=0, null=True)),
                ('name', models.CharField(max_length=128)),
                ('query', models.TextField()),
                ('sort', sentry.db.models.fields.text.CharField(default='date', max_length=16, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_global', models.NullBooleanField(db_index=True, default=False)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('owner_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE')),
                ('visibility', models.CharField(default='owner', max_length=16)),
            ],
            options={
                'db_table': 'sentry_savedsearch',
            },
        ),
        migrations.CreateModel(
            name='ScheduledJob',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('payload', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_scheduled', models.DateTimeField()),
            ],
            options={
                'db_table': 'sentry_scheduledjob',
            },
        ),
        migrations.CreateModel(
            name='SentryApp',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('scopes', bitfield.models.BitField((('project:read', 'project:read'), ('project:write', 'project:write'), ('project:admin', 'project:admin'), ('project:releases', 'project:releases'), ('team:read', 'team:read'), ('team:write', 'team:write'), ('team:admin', 'team:admin'), ('event:read', 'event:read'), ('event:write', 'event:write'), ('event:admin', 'event:admin'), ('org:read', 'org:read'), ('org:write', 'org:write'), ('org:admin', 'org:admin'), ('member:read', 'member:read'), ('member:write', 'member:write'), ('member:admin', 'member:admin')), default=None)),
                ('scope_list', sentry.db.models.fields.array.ArrayField(null=True)),
                ('name', models.TextField()),
                ('slug', models.CharField(max_length=64, unique=True)),
                ('author', models.TextField(null=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0)),
                ('uuid', models.CharField(default=sentry.sentry_apps.models.sentry_app.default_uuid, max_length=64)),
                ('redirect_url', models.URLField(null=True)),
                ('webhook_url', models.URLField()),
                ('is_alertable', models.BooleanField(default=False)),
                ('events', sentry.db.models.fields.array.ArrayField(null=True)),
                ('overview', models.TextField(null=True)),
                ('schema', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('application', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sentry_app', to='sentry.apiapplication')),
                ('owner_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE')),
                ('proxy_user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sentry_app', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_sentryapp',
            },
        ),
        migrations.CreateModel(
            name='SentryAppAvatar',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(db_index=True, max_length=32, unique=True)),
                ('avatar_type', models.PositiveSmallIntegerField(default=0)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.file', unique=True)),
                ('sentry_app', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.sentryapp', unique=True)),
            ],
            options={
                'db_table': 'sentry_sentryappavatar',
            },
        ),
        migrations.CreateModel(
            name='SentryAppComponent',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('uuid', sentry.db.models.fields.uuid.UUIDField(editable=False, max_length=32, unique=True)),
                ('type', models.CharField(max_length=64)),
                ('schema', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('sentry_app', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='sentry.sentryapp')),
            ],
            options={
                'db_table': 'sentry_sentryappcomponent',
            },
        ),
        migrations.CreateModel(
            name='SentryAppInstallation',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('uuid', models.CharField(default=sentry.sentry_apps.models.sentry_app_installation.default_uuid, max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('api_grant', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sentry_app_installation', to='sentry.apigrant')),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE')),
                ('sentry_app', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installations', to='sentry.sentryapp')),
            ],
            options={
                'db_table': 'sentry_sentryappinstallation',
            },
        ),
        migrations.CreateModel(
            name='ServiceHook',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guid', models.CharField(max_length=32, null=True, unique=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('installation_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.SentryAppInstallation', db_index=True, null=True, on_delete='CASCADE')),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, null=True)),
                ('url', models.URLField(max_length=512)),
                ('secret', models.TextField(default=sentry.sentry_apps.models.servicehook.generate_secret)),
                ('events', sentry.db.models.fields.array.ArrayField(null=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0)),
                ('version', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('application_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.ApiApplication', db_index=True, null=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_servicehook',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('slug', models.SlugField()),
                ('name', models.CharField(max_length=64)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_team',
                'unique_together': {('organization', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='TeamAvatar',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(db_index=True, max_length=32, unique=True)),
                ('avatar_type', models.PositiveSmallIntegerField(default=0)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.file', unique=True)),
                ('team', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.team', unique=True)),
            ],
            options={
                'db_table': 'sentry_teamavatar',
            },
        ),
        migrations.CreateModel(
            name='UserAvatar',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(db_index=True, max_length=32, unique=True)),
                ('avatar_type', models.PositiveSmallIntegerField(default=0)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.file', unique=True)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'db_table': 'sentry_useravatar',
            },
        ),
        migrations.CreateModel(
            name='ScheduledDeletion',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guid', models.CharField(default=sentry.deletions.models.scheduleddeletion.default_guid, max_length=32, unique=True)),
                ('app_label', models.CharField(max_length=64)),
                ('model_name', models.CharField(max_length=64)),
                ('object_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_scheduled', models.DateTimeField(default=sentry.deletions.models.scheduleddeletion.default_date_schedule)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default={})),
                ('in_progress', models.BooleanField(default=False)),
                ('aborted', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'sentry_scheduleddeletion',
                'unique_together': {('app_label', 'model_name', 'object_id')},
            },
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=200)),
                ('url', models.URLField(null=True)),
                ('provider', models.CharField(max_length=64, null=True)),
                ('external_id', models.CharField(max_length=64, null=True)),
                ('config', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('integration_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, null=True)),
            ],
            options={
                'db_table': 'sentry_repository',
                'unique_together': {('organization_id', 'name'), ('organization_id', 'provider', 'external_id')},
            },
            bases=(models.Model, sentry.db.mixin.PendingDeletionMixin),
        ),
        migrations.AddField(
            model_name='release',
            name='projects',
            field=models.ManyToManyField(related_name='releases', through='sentry.ReleaseProject', to='sentry.project'),
        ),
        migrations.CreateModel(
            name='ProjectTeam',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('team', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.team')),
            ],
            options={
                'db_table': 'sentry_projectteam',
                'unique_together': {('project', 'team')},
            },
        ),
        migrations.CreateModel(
            name='ProjectPlatform',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('platform', models.CharField(max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_projectplatform',
                'unique_together': {('project_id', 'platform')},
            },
        ),
        migrations.AddField(
            model_name='project',
            name='teams',
            field=models.ManyToManyField(related_name='teams', through='sentry.ProjectTeam', to='sentry.team'),
        ),
        migrations.CreateModel(
            name='ProcessingIssue',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('checksum', models.CharField(db_index=True, max_length=40)),
                ('type', models.CharField(max_length=30)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField()),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_processingissue',
                'unique_together': {('project', 'checksum', 'type')},
            },
        ),
        migrations.CreateModel(
            name='PlatformExternalIssue',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('service_type', models.CharField(max_length=64)),
                ('display_name', models.TextField()),
                ('web_url', models.URLField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_platformexternalissue',
                'unique_together': {('group_id', 'service_type')},
            },
        ),
        migrations.CreateModel(
            name='OrganizationMemberTeam',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedAutoField(primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('organizationmember', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organizationmember')),
                ('team', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.team')),
            ],
            options={
                'db_table': 'sentry_organizationmember_teams',
                'unique_together': {('team', 'organizationmember')},
            },
        ),
        migrations.AddField(
            model_name='organizationmember',
            name='teams',
            field=models.ManyToManyField(blank=True, through='sentry.OrganizationMemberTeam', to='sentry.team'),
        ),
        migrations.CreateModel(
            name='MonitorCheckIn',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guid', sentry.db.models.fields.uuid.UUIDField(editable=False, max_length=32, unique=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('config', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('duration', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('location', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.monitorlocation')),
                ('monitor', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.monitor')),
            ],
            options={
                'db_table': 'sentry_monitorcheckin',
            },
        ),
        migrations.CreateModel(
            name='LatestRelease',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('repository_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('environment_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('release_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('deploy_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('commit_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
            ],
            options={
                'db_table': 'sentry_latestrelease',
                'unique_together': {('repository_id', 'environment_id')},
            },
        ),
        migrations.CreateModel(
            name='IntegrationExternalProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_integration_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('name', models.CharField(max_length=128)),
                ('external_id', models.CharField(max_length=64)),
                ('resolved_status', models.CharField(max_length=64)),
                ('unresolved_status', models.CharField(max_length=64)),
            ],
            options={
                'db_table': 'sentry_integrationexternalproject',
                'unique_together': {('organization_integration_id', 'external_id')},
            },
        ),
        migrations.CreateModel(
            name='IdentityProvider',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=64)),
                ('config', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('external_id', models.CharField(max_length=64, null=True)),
            ],
            options={
                'db_table': 'sentry_identityprovider',
                'unique_together': {('type', 'external_id')},
            },
        ),
        migrations.CreateModel(
            name='GroupTombstone',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('previous_group_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(unique=True)),
                ('level', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(blank=True, default=40)),
                ('message', models.TextField()),
                ('culprit', models.CharField(blank=True, max_length=200, null=True)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField(blank=True, null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_grouptombstone',
            },
        ),
        migrations.CreateModel(
            name='GroupShare',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.CharField(default=sentry.models.groupshare.default_uuid, max_length=32, unique=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.group', unique=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_groupshare',
            },
        ),
        migrations.CreateModel(
            name='GroupResolution',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('datetime', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.group', unique=True)),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.release')),
            ],
            options={
                'db_table': 'sentry_groupresolution',
            },
        ),
        migrations.CreateModel(
            name='GroupRelease',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('group_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('release_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('environment', models.CharField(default='', max_length=64)),
                ('first_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_grouprelease',
                'unique_together': {('group_id', 'release_id', 'environment')},
                'indexes': [models.Index(fields=['group_id', 'first_seen'], name='sentry_grou_group_i_6eaff8_idx'), models.Index(fields=['group_id', 'last_seen'], name='sentry_grou_group_i_f10abe_idx')],
            },
        ),
        migrations.CreateModel(
            name='GroupLink',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('linked_type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=1)),
                ('linked_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('relationship', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=2)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('datetime', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_grouplink',
                'unique_together': {('group_id', 'linked_type', 'linked_id')},
            },
        ),
        migrations.CreateModel(
            name='GroupCommitResolution',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('group_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('commit_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('datetime', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_groupcommitresolution',
                'unique_together': {('group_id', 'commit_id')},
            },
        ),
        migrations.CreateModel(
            name='GroupAssignee',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignee_set', to='sentry.group', unique=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignee_set', to='sentry.project')),
                ('team', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sentry_assignee_set', to='sentry.team')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_groupasignee',
            },
        ),
        migrations.AddField(
            model_name='group',
            name='first_release',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='sentry.release'),
        ),
        migrations.AddField(
            model_name='group',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.project'),
        ),
        migrations.AddField(
            model_name='file',
            name='blob',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='legacy_blob', to='sentry.fileblob'),
        ),
        migrations.AddField(
            model_name='file',
            name='blobs',
            field=models.ManyToManyField(through='sentry.FileBlobIndex', to='sentry.fileblob'),
        ),
        migrations.CreateModel(
            name='ExternalIssue',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('integration_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Integration', db_index=True, on_delete='CASCADE')),
                ('key', models.CharField(max_length=128)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.TextField(null=True)),
                ('description', models.TextField(null=True)),
                ('metadata', sentry.db.models.fields.jsonfield.JSONField(null=True)),
            ],
            options={
                'db_table': 'sentry_externalissue',
                'unique_together': {('organization', 'integration_id', 'key')},
            },
        ),
        migrations.CreateModel(
            name='EnvironmentProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('is_hidden', models.NullBooleanField()),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.environment')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_environmentproject',
                'unique_together': {('project', 'environment')},
            },
        ),
        migrations.AddField(
            model_name='environment',
            name='projects',
            field=models.ManyToManyField(through='sentry.EnvironmentProject', to='sentry.project'),
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.release')),
            ],
            options={
                'db_table': 'sentry_distribution',
                'unique_together': {('release', 'name')},
            },
        ),
        migrations.CreateModel(
            name='DiscoverSavedQueryProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('discover_saved_query', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.discoversavedquery')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_discoversavedqueryproject',
                'unique_together': {('project', 'discover_saved_query')},
            },
        ),
        migrations.AddField(
            model_name='discoversavedquery',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization'),
        ),
        migrations.AddField(
            model_name='discoversavedquery',
            name='projects',
            field=models.ManyToManyField(through='sentry.DiscoverSavedQueryProject', to='sentry.project'),
        ),
        migrations.CreateModel(
            name='Deploy',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('environment_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('date_finished', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_started', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('notified', models.NullBooleanField(db_index=True, default=False)),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.release')),
            ],
            options={
                'db_table': 'sentry_deploy',
            },
        ),
        migrations.CreateModel(
            name='Counter',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('value', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project', unique=True)),
            ],
            options={
                'db_table': 'sentry_projectcounter',
            },
        ),
        migrations.CreateModel(
            name='Commit',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('repository_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('key', models.CharField(max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('message', models.TextField(null=True)),
                ('author', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.commitauthor')),
            ],
            options={
                'db_table': 'sentry_commit',
                'unique_together': {('repository_id', 'key')},
                'indexes': [models.Index(fields=['repository_id', 'date_added'], name='sentry_comm_reposit_da31f2_idx'), models.Index(fields=['author', 'date_added'], name='sentry_comm_author__131211_idx'), models.Index(fields=['organization_id', 'date_added'], name='sentry_comm_organiz_7be514_idx')],
            },
        ),
        migrations.CreateModel(
            name='AuthProvider',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('provider', models.CharField(max_length=128)),
                ('config', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('sync_time', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('last_sync', models.DateTimeField(null=True)),
                ('default_role', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=50)),
                ('default_global_access', models.BooleanField(default=True)),
                ('flags', bitfield.models.BitField((('allow_unlinked', 'Grant access to members who have not linked SSO accounts.'),), default=0)),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE', unique=True)),
            ],
            options={
                'db_table': 'sentry_authprovider',
            },
        ),
        migrations.CreateModel(
            name='AuditLogEntry',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('actor_label', models.CharField(blank=True, max_length=64, null=True)),
                ('target_object', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('event', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('ip_address', models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField()),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('actor', sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='audit_actors', to=settings.AUTH_USER_MODEL)),
                ('actor_key', sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.apikey')),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE')),
                ('target_user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='audit_targets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_auditlogentry',
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('ident', models.CharField(max_length=64, null=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField(null=True)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.group')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
            ],
            options={
                'db_table': 'sentry_activity',
            },
        ),
        migrations.CreateModel(
            name='UserReport',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('event_user_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('event_id', models.CharField(max_length=32)),
                ('name', models.CharField(max_length=128)),
                ('email', models.EmailField(max_length=75)),
                ('comments', models.TextField()),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('environment_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True)),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
            ],
            options={
                'db_table': 'sentry_userreport',
                'unique_together': {('project_id', 'event_id')},
                'indexes': [models.Index(fields=['project_id', 'event_id'], name='sentry_user_project_cbfd59_idx'), models.Index(fields=['project_id', 'date_added'], name='sentry_user_project_b8faaf_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('permission', models.CharField(max_length=32)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_userpermission',
                'unique_together': {('user', 'permission')},
            },
        ),
        migrations.CreateModel(
            name='UserOption',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64)),
                ('value', sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, null=True, on_delete='CASCADE')),
                ('project_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Project', db_index=True, null=True, on_delete='CASCADE')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_useroption',
                'unique_together': {('user', 'organization_id', 'key'), ('user', 'project_id', 'key')},
            },
        ),
        migrations.CreateModel(
            name='UserIP',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField()),
                ('country_code', models.CharField(max_length=16, null=True)),
                ('region_code', models.CharField(max_length=16, null=True)),
                ('first_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_userip',
                'unique_together': {('user', 'ip_address')},
            },
        ),
        migrations.CreateModel(
            name='UserEmail',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=75)),
                ('validation_hash', models.CharField(default=sentry.utils.security.hash.get_secure_token, max_length=32)),
                ('date_hash_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_verified', models.BooleanField(default=False)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_useremail',
                'unique_together': {('user', 'email')},
            },
        ),
        migrations.CreateModel(
            name='ServiceHookProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('service_hook', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.servicehook')),
            ],
            options={
                'db_table': 'sentry_servicehookproject',
                'unique_together': {('service_hook', 'project_id')},
            },
        ),
        migrations.CreateModel(
            name='ReprocessingReport',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('event_id', models.CharField(max_length=32, null=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_reprocessingreport',
                'unique_together': {('project', 'event_id')},
            },
        ),
        migrations.CreateModel(
            name='ReleaseProjectEnvironment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('new_issues_count', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('first_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('last_deploy_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, null=True)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.environment')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.release')),
            ],
            options={
                'db_table': 'sentry_releaseprojectenvironment',
                'unique_together': {('project', 'release', 'environment')},
            },
        ),
        migrations.CreateModel(
            name='ReleaseHeadCommit',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('repository_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('commit', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.commit')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.release')),
            ],
            options={
                'db_table': 'sentry_releaseheadcommit',
                'unique_together': {('repository_id', 'release')},
            },
        ),
        migrations.CreateModel(
            name='ReleaseFile',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('ident', models.CharField(max_length=40)),
                ('name', models.TextField()),
                ('dist', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.distribution')),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.file')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.release')),
            ],
            options={
                'db_table': 'sentry_releasefile',
                'unique_together': {('release', 'ident')},
                'indexes': [models.Index(fields=['release_id', 'name'], name='sentry_rele_release_bff97c_idx')],
            },
        ),
        migrations.CreateModel(
            name='ReleaseEnvironment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('first_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.environment')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.release')),
            ],
            options={
                'db_table': 'sentry_environmentrelease',
                'unique_together': {('organization', 'release', 'environment')},
            },
        ),
        migrations.CreateModel(
            name='ReleaseCommit',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('order', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('commit', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.commit')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.release')),
            ],
            options={
                'db_table': 'sentry_releasecommit',
                'unique_together': {('release', 'commit'), ('release', 'order')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='release',
            unique_together={('organization', 'version')},
        ),
        migrations.CreateModel(
            name='RecentSearch',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.PositiveSmallIntegerField()),
                ('query', models.TextField()),
                ('query_hash', models.CharField(max_length=32)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=False, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_recentsearch',
                'unique_together': {('user_id', 'organization', 'type', 'query_hash')},
            },
        ),
        migrations.CreateModel(
            name='PullRequestCommit',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('commit', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.commit')),
                ('pull_request', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.pullrequest')),
            ],
            options={
                'db_table': 'sentry_pullrequest_commit',
                'unique_together': {('pull_request', 'commit')},
            },
        ),
        migrations.CreateModel(
            name='PromptsActivity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('feature', models.CharField(max_length=64)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default={})),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_promptsactivity',
                'unique_together': {('user_id', 'feature', 'organization_id', 'project_id')},
            },
        ),
        migrations.CreateModel(
            name='ProjectRedirect',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('redirect_slug', models.SlugField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_projectredirect',
                'unique_together': {('organization', 'redirect_slug')},
            },
        ),
        migrations.CreateModel(
            name='ProjectOption',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64)),
                ('value', sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_projectoptions',
                'unique_together': {('project', 'key')},
            },
        ),
        migrations.CreateModel(
            name='ProjectDebugFile',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('object_name', models.TextField()),
                ('cpu_name', models.CharField(max_length=40)),
                ('debug_id', models.CharField(db_column='uuid', max_length=64)),
                ('code_id', models.CharField(max_length=64, null=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.file')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_projectdsymfile',
                'indexes': [models.Index(fields=['project_id', 'debug_id'], name='sentry_proj_project_c586ac_idx'), models.Index(fields=['project_id', 'code_id'], name='sentry_proj_project_9b5950_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProjectBookmark',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_projectbookmark',
                'unique_together': {('project', 'user_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('organization', 'slug')},
        ),
        migrations.CreateModel(
            name='OrganizationOption',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64)),
                ('value', sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_organizationoptions',
                'unique_together': {('organization', 'key')},
            },
        ),
        migrations.CreateModel(
            name='OrganizationOnboardingTask',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('task', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('date_completed', models.DateTimeField(default=django.utils.timezone.now)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(blank=True, null=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
            ],
            options={
                'db_table': 'sentry_organizationonboardingtask',
                'unique_together': {('organization', 'task')},
            },
        ),
        migrations.CreateModel(
            name='OrganizationAccessRequest',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('member', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organizationmember')),
                ('team', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.team')),
                ('requester_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_organizationaccessrequest',
                'unique_together': {('team', 'member')},
            },
        ),
        migrations.CreateModel(
            name='Identity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('external_id', models.CharField(max_length=64)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('scopes', sentry.db.models.fields.array.ArrayField(null=True)),
                ('date_verified', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('idp', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.identityprovider')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_identity',
                'unique_together': {('idp', 'external_id'), ('idp', 'user')},
            },
        ),
        migrations.CreateModel(
            name='GroupSubscription',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('reason', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_set', to='sentry.group')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_set', to='sentry.project')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_groupsubscription',
                'unique_together': {('group', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='GroupSeen',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.group')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=False, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_groupseen',
                'unique_together': {('user_id', 'group')},
            },
        ),
        migrations.CreateModel(
            name='GroupRuleStatus',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_active', models.DateTimeField(null=True)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.group')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.rule')),
            ],
            options={
                'db_table': 'sentry_grouprulestatus',
                'unique_together': {('rule', 'group')},
            },
        ),
        migrations.CreateModel(
            name='GroupMeta',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64)),
                ('value', models.TextField()),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.group')),
            ],
            options={
                'db_table': 'sentry_groupmeta',
                'unique_together': {('group', 'key')},
            },
        ),
        migrations.CreateModel(
            name='GroupHash',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('hash', models.CharField(max_length=32)),
                ('group_tombstone_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, null=True)),
                ('state', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.group')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_grouphash',
                'unique_together': {('project', 'hash')},
            },
        ),
        migrations.CreateModel(
            name='GroupEnvironment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('first_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now, null=True)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.environment')),
                ('first_release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sentry.release')),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.group')),
            ],
            options={
                'db_table': 'sentry_groupenvironment',
                'unique_together': {('group', 'environment')},
                'indexes': [models.Index(fields=['environment', 'first_release', 'first_seen'], name='sentry_grou_environ_443bdb_idx')],
            },
        ),
        migrations.CreateModel(
            name='GroupEmailThread',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=75)),
                ('msgid', models.CharField(max_length=100)),
                ('date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groupemail_set', to='sentry.group')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groupemail_set', to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_groupemailthread',
                'unique_together': {('email', 'group'), ('email', 'msgid')},
            },
        ),
        migrations.CreateModel(
            name='GroupBookmark',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmark_set', to='sentry.group')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmark_set', to='sentry.project')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_groupbookmark',
                'unique_together': {('project', 'user_id', 'group')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='group',
            unique_together={('project', 'short_id')},
        ),
        migrations.CreateModel(
            name='FileBlobOwner',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('blob', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.fileblob')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_fileblobowner',
                'unique_together': {('blob', 'organization')},
            },
        ),
        migrations.CreateModel(
            name='FeatureAdoption',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('feature_id', models.PositiveIntegerField()),
                ('date_completed', models.DateTimeField(default=django.utils.timezone.now)),
                ('complete', models.BooleanField(default=False)),
                ('applicable', models.BooleanField(default=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_featureadoption',
                'unique_together': {('organization', 'feature_id')},
            },
        ),
        migrations.CreateModel(
            name='EventProcessingIssue',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('processing_issue', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.processingissue')),
                ('raw_event', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.rawevent')),
            ],
            options={
                'db_table': 'sentry_eventprocessingissue',
                'unique_together': {('raw_event', 'processing_issue')},
            },
        ),
        migrations.CreateModel(
            name='EventAttachment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True)),
                ('event_id', models.CharField(db_index=True, max_length=32)),
                ('name', models.TextField()),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('file_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
            ],
            options={
                'db_table': 'sentry_eventattachment',
                'unique_together': {('project_id', 'event_id', 'file_id')},
                'indexes': [models.Index(fields=['project_id', 'date_added'], name='sentry_even_project_62b83b_idx'), models.Index(fields=['project_id', 'event_id'], name='sentry_even_project_974f7b_idx')],
            },
        ),
        migrations.AlterUniqueTogether(
            name='environment',
            unique_together={('organization_id', 'name')},
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('created_by_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, on_delete='CASCADE')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_dashboard',
                'unique_together': {('organization', 'title')},
            },
        ),
        migrations.CreateModel(
            name='CommitFileChange',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('filename', models.TextField()),
                ('type', models.CharField(max_length=1)),
                ('commit', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.commit')),
            ],
            options={
                'db_table': 'sentry_commitfilechange',
                'unique_together': {('commit', 'filename')},
            },
        ),
        migrations.CreateModel(
            name='BroadcastSeen',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('broadcast', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.broadcast')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_broadcastseen',
                'unique_together': {('broadcast', 'user')},
            },
        ),
        migrations.CreateModel(
            name='AuthIdentity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(max_length=128)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('last_verified', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_synced', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('auth_provider', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.authprovider')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_authidentity',
                'unique_together': {('auth_provider', 'ident'), ('auth_provider', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Authenticator',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_used_at', models.DateTimeField(null=True)),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('config', sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_authenticator',
                'verbose_name': 'authenticator',
                'verbose_name_plural': 'authenticators',
                'unique_together': {('user', 'type')},
            },
        ),
        migrations.CreateModel(
            name='AssistantActivity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guide_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('viewed_ts', models.DateTimeField(null=True)),
                ('dismissed_ts', models.DateTimeField(null=True)),
                ('useful', models.NullBooleanField()),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_assistant_activity',
                'unique_together': {('user', 'guide_id')},
            },
        ),
        migrations.CreateModel(
            name='ApiAuthorization',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('scopes', bitfield.models.BitField((('project:read', 'project:read'), ('project:write', 'project:write'), ('project:admin', 'project:admin'), ('project:releases', 'project:releases'), ('team:read', 'team:read'), ('team:write', 'team:write'), ('team:admin', 'team:admin'), ('event:read', 'event:read'), ('event:write', 'event:write'), ('event:admin', 'event:admin'), ('org:read', 'org:read'), ('org:write', 'org:write'), ('org:admin', 'org:admin'), ('member:read', 'member:read'), ('member:write', 'member:write'), ('member:admin', 'member:admin')), default=None)),
                ('scope_list', sentry.db.models.fields.array.ArrayField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('application', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.apiapplication')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_apiauthorization',
                'unique_together': {('user', 'application')},
            },
        ),
        migrations.RunSQL(
            sql='\n        create or replace function sentry_increment_project_counter(\n                project bigint, delta int) returns int as $$\n            declare\n            new_val int;\n            begin\n            loop\n                update sentry_projectcounter set value = value + delta\n                where project_id = project\n                returning value into new_val;\n                if found then\n                return new_val;\n                end if;\n                begin\n                insert into sentry_projectcounter(project_id, value)\n                    values (project, delta)\n                    returning value into new_val;\n                return new_val;\n                exception when unique_violation then\n                end;\n            end loop;\n            end\n            $$ language plpgsql;\n        ',
            hints={'tables': ['sentry_projectcounter']},
        ),
        migrations.CreateModel(
            name='AlertRule',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('status', models.SmallIntegerField(default=0)),
                ('include_all_projects', models.BooleanField(default=False)),
                ('threshold_period', models.IntegerField()),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_alertrule',
            },
        ),
        migrations.CreateModel(
            name='AlertRuleExcludedProjects',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.alertrule')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_alertruleexcludedprojects',
                'unique_together': {('alert_rule', 'project')},
            },
        ),
        migrations.CreateModel(
            name='AlertRuleTrigger',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('label', models.TextField()),
                ('threshold_type', models.SmallIntegerField()),
                ('alert_threshold', models.IntegerField()),
                ('resolve_threshold', models.IntegerField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.alertrule')),
            ],
            options={
                'db_table': 'sentry_alertruletrigger',
            },
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('identifier', models.IntegerField()),
                ('detection_uuid', sentry.db.models.fields.uuid.UUIDField(db_index=True, max_length=32, null=True)),
                ('status', models.PositiveSmallIntegerField(default=1)),
                ('type', models.PositiveSmallIntegerField(default=1)),
                ('title', models.TextField()),
                ('date_started', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_detected', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_closed', models.DateTimeField(null=True)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.alertrule')),
            ],
            options={
                'db_table': 'sentry_incident',
                'indexes': [models.Index(fields=['alert_rule', 'type', 'status'], name='sentry_inci_alert_r_24a457_idx')],
            },
        ),
        migrations.CreateModel(
            name='IncidentProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.incident')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_incidentproject',
                'unique_together': {('project', 'incident')},
            },
        ),
        migrations.CreateModel(
            name='IncidentTrigger',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('status', models.SmallIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule_trigger', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.alertruletrigger')),
                ('incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.incident')),
            ],
            options={
                'db_table': 'sentry_incidenttrigger',
                'unique_together': {('incident', 'alert_rule_trigger')},
            },
        ),
        migrations.CreateModel(
            name='PagerDutyService',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('integration_key', models.CharField(max_length=255)),
                ('service_name', models.CharField(max_length=255)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('organization_integration_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.OrganizationIntegration', db_index=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_pagerdutyservice',
            },
        ),
        migrations.CreateModel(
            name='QuerySubscription',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.TextField()),
                ('subscription_id', models.TextField(unique=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_querysubscription',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesSnapshot',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('values', sentry.db.models.fields.array.ArrayField(null=True)),
                ('period', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_timeseriessnapshot',
            },
        ),
        migrations.AddField(
            model_name='broadcast',
            name='cta',
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
        migrations.AddField(
            model_name='groupredirect',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='groupredirect',
            name='previous_project_slug',
            field=models.SlugField(null=True),
        ),
        migrations.AddField(
            model_name='groupredirect',
            name='previous_short_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='organizationmember',
            name='invite_status',
            field=models.PositiveSmallIntegerField(default=0, null=True),
        ),
        migrations.AddField(
            model_name='projectownership',
            name='auto_assignment',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='sentryapp',
            name='verify_install',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='sentryappinstallation',
            name='api_token',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sentry_app_installation', to='sentry.apitoken'),
        ),
        migrations.AddField(
            model_name='sentryappinstallation',
            name='status',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0),
        ),
        migrations.AlterField(
            model_name='commitfilechange',
            name='filename',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='discoversavedquery',
            name='query',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='externalissue',
            name='metadata',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name='featureadoption',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='file',
            name='headers',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='group',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project'),
        ),
        migrations.AlterField(
            model_name='grouplink',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='groupsnooze',
            name='state',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name='organization',
            name='default_role',
            field=models.CharField(default='member', max_length=32),
        ),
        migrations.AlterField(
            model_name='organizationonboardingtask',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='projectdebugfile',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name='projectkey',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='projectownership',
            name='schema',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name='promptsactivity',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
        ),
        migrations.AlterField(
            model_name='release',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
        ),
        migrations.AlterField(
            model_name='release',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='releasefile',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='repository',
            name='config',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='scheduleddeletion',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
        ),
        migrations.AlterField(
            model_name='scheduledjob',
            name='payload',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='status',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0),
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='webhook_url',
            field=models.URLField(null=True),
        ),
        migrations.AlterUniqueTogether(
            name='groupassignee',
            unique_together={('project', 'group')},
        ),
        migrations.AlterUniqueTogether(
            name='groupredirect',
            unique_together={('organization_id', 'previous_short_id', 'previous_project_slug')},
        ),
        migrations.CreateModel(
            name='IncidentSnapshot',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('unique_users', models.IntegerField()),
                ('total_events', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('event_stats_snapshot', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.timeseriessnapshot')),
                ('incident', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sentry.incident')),
            ],
            options={
                'db_table': 'sentry_incidentsnapshot',
            },
        ),
        migrations.CreateModel(
            name='IncidentActivity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.IntegerField()),
                ('value', models.TextField(null=True)),
                ('previous_value', models.TextField(null=True)),
                ('comment', models.TextField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.incident')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_incidentactivity',
            },
        ),
        migrations.AddField(
            model_name='incident',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization'),
        ),
        migrations.AddField(
            model_name='incident',
            name='projects',
            field=models.ManyToManyField(related_name='incidents', through='sentry.IncidentProject', to='sentry.project'),
        ),
        migrations.AddField(
            model_name='alertruletrigger',
            name='triggered_incidents',
            field=models.ManyToManyField(related_name='triggers', through='sentry.IncidentTrigger', to='sentry.incident'),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='excluded_projects',
            field=models.ManyToManyField(related_name='alert_rule_exclusions', through='sentry.AlertRuleExcludedProjects', to='sentry.project'),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization'),
        ),
        migrations.CreateModel(
            name='SentryAppInstallationToken',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('api_token', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.apitoken')),
                ('sentry_app_installation', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.sentryappinstallation')),
            ],
            options={
                'db_table': 'sentry_sentryappinstallationtoken',
                'unique_together': {('sentry_app_installation', 'api_token')},
            },
        ),
        migrations.CreateModel(
            name='IntegrationFeature',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('target_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('target_type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('user_description', models.TextField(null=True)),
                ('feature', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_integrationfeature',
                'unique_together': {('target_id', 'target_type', 'feature')},
            },
        ),
        migrations.CreateModel(
            name='IncidentSubscription',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.incident')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_incidentsubscription',
                'unique_together': {('incident', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='IncidentSeen',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.incident')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=False, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_incidentseen',
                'unique_together': {('user_id', 'incident')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='incident',
            unique_together={('organization', 'identifier')},
        ),
        migrations.CreateModel(
            name='AlertRuleTriggerExclusion',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule_trigger', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exclusions', to='sentry.alertruletrigger')),
                ('query_subscription', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.querysubscription')),
            ],
            options={
                'db_table': 'sentry_alertruletriggerexclusion',
                'unique_together': {('alert_rule_trigger', 'query_subscription')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='alertruletrigger',
            unique_together={('alert_rule', 'label')},
        ),
        migrations.CreateModel(
            name='AlertRuleTriggerAction',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.SmallIntegerField()),
                ('target_type', models.SmallIntegerField()),
                ('target_identifier', models.TextField(null=True)),
                ('target_display', models.TextField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule_trigger', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.alertruletrigger')),
                ('integration_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Integration', blank=True, db_index=True, null=True, on_delete='CASCADE')),
                ('sentry_app_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.SentryApp', blank=True, db_index=True, null=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_alertruletriggeraction',
            },
        ),
        migrations.AlterField(
            model_name='auditlogentry',
            name='event',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AddField(
            model_name='sentryapp',
            name='date_published',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='organizationmember',
            name='role',
            field=models.CharField(default='member', max_length=32),
        ),
        migrations.AddField(
            model_name='discoversavedquery',
            name='version',
            field=models.IntegerField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='incidentsnapshot',
                    name='incident',
                    field=sentry.db.models.fields.onetoone.OneToOneCascadeDeletes(on_delete=django.db.models.deletion.CASCADE, to='sentry.incident'),
                ),
            ],
        ),
        migrations.RenameModel(
            old_name='LatestRelease',
            new_name='LatestRepoReleaseEnvironment',
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField((('has_releases', 'This Project has sent release data'), ('has_sourcemaps', 'This Project has processed source maps')), default=0, null=True),
        ),
        migrations.AddField(
            model_name='incidenttrigger',
            name='date_modified',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='incident',
            name='type',
            field=models.PositiveSmallIntegerField(),
        ),
        migrations.CreateModel(
            name='ExportedData',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_finished', models.DateTimeField(null=True)),
                ('date_expired', models.DateTimeField(db_index=True, null=True)),
                ('query_type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('query_info', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.file')),
            ],
            options={
                'db_table': 'sentry_exporteddata',
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='organizationonboardingtask',
                    name='project_id',
                ),
                migrations.AddField(
                    model_name='organizationonboardingtask',
                    name='project',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.project'),
                ),
                migrations.AlterField(
                    model_name='organizationonboardingtask',
                    name='status',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
                ),
                migrations.AlterField(
                    model_name='organizationonboardingtask',
                    name='task',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='exporteddata',
            name='query_type',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AddField(
            model_name='organizationonboardingtask',
            name='completion_seen',
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name='querysubscription',
            name='status',
            field=models.SmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='querysubscription',
            name='subscription_id',
            field=models.TextField(null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='alertrule',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization'),
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField((('has_releases', 'This Project has sent release data'), ('has_issue_alerts_targeting', 'This Project has issue alerts targeting'), ('has_transactions', 'This Project has sent transactions')), default=0, null=True),
        ),
        migrations.AddField(
            model_name='incident',
            name='status_method',
            field=models.PositiveSmallIntegerField(default=3),
        ),
        migrations.AlterModelOptions(
            name='alertrule',
            options={'base_manager_name': 'objects_with_snapshots', 'default_manager_name': 'objects_with_snapshots'},
        ),
        migrations.AlterModelManagers(
            name='alertrule',
            managers=[
                ('objects_with_snapshots', django.db.models.manager.Manager()),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='project',
                    name='flags',
                    field=bitfield.models.BitField((('has_releases', 'This Project has sent release data'), ('has_issue_alerts_targeting', 'This Project has issue alerts targeting'), ('has_transactions', 'This Project has sent transactions')), default=2, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name='PendingIncidentSnapshot',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('target_run_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('incident', sentry.db.models.fields.onetoone.OneToOneCascadeDeletes(on_delete=django.db.models.deletion.CASCADE, to='sentry.incident')),
            ],
            options={
                'db_table': 'sentry_pendingincidentsnapshot',
            },
        ),
        migrations.AddField(
            model_name='integration',
            name='date_updated',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='integrationexternalproject',
            name='date_updated',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='organizationintegration',
            name='date_updated',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='pagerdutyservice',
            name='date_updated',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.CreateModel(
            name='SnubaQuery',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('dataset', models.TextField()),
                ('query', models.TextField()),
                ('aggregate', models.TextField()),
                ('time_window', models.IntegerField()),
                ('resolution', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.environment')),
            ],
            options={
                'db_table': 'sentry_snubaquery',
            },
        ),
        migrations.AddField(
            model_name='alertrule',
            name='snuba_query',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.snubaquery', unique=True),
        ),
        migrations.AddField(
            model_name='querysubscription',
            name='snuba_query',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='sentry.snubaquery'),
        ),
        migrations.AlterField(
            model_name='featureadoption',
            name='feature_id',
            field=models.PositiveIntegerField(),
        ),
        migrations.AlterField(
            model_name='incident',
            name='alert_rule',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sentry.alertrule'),
        ),
        migrations.AlterField(
            model_name='auditlogentry',
            name='event',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AlterField(
            model_name='alertruletrigger',
            name='alert_threshold',
            field=models.FloatField(),
        ),
        migrations.AlterField(
            model_name='alertruletrigger',
            name='resolve_threshold',
            field=models.FloatField(null=True),
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='webhook_url',
            field=models.URLField(max_length=512, null=True),
        ),
        migrations.CreateModel(
            name='ExportedDataBlob',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('offset', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('blob', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.fileblob')),
                ('data_export', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.exporteddata')),
            ],
            options={
                'db_table': 'sentry_exporteddatablob',
                'unique_together': {('data_export', 'blob', 'offset')},
            },
        ),
        migrations.CreateModel(
            name='SentryAppInstallationForProvider',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('provider', models.CharField(max_length=64)),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE')),
                ('sentry_app_installation', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.sentryappinstallation')),
            ],
            options={
                'db_table': 'sentry_sentryappinstallationforprovider',
                'unique_together': {('provider', 'organization_id')},
            },
        ),
        migrations.RunSQL(
            sql='ALTER TABLE sentry_timeseriessnapshot ALTER COLUMN values SET DATA TYPE float[] USING values::float[]',
            hints={'tables': ['sentry_timeseriessnapshot']},
        ),
        migrations.AddField(
            model_name='alertrule',
            name='resolve_threshold',
            field=models.FloatField(null=True),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='threshold_type',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.CreateModel(
            name='AlertRuleActivity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.alertrule')),
                ('previous_alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='previous_alert_rule', to='sentry.alertrule')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
            ],
            options={
                'db_table': 'sentry_alertruleactivity',
            },
        ),
        migrations.AlterField(
            model_name='alertruletrigger',
            name='threshold_type',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='identity',
            name='external_id',
            field=models.TextField(),
        ),
        migrations.CreateModel(
            name='RuleActivity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.rule')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
            ],
            options={
                'db_table': 'sentry_ruleactivity',
            },
        ),
        migrations.AlterField(
            model_name='organizationonboardingtask',
            name='task',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AddField(
            model_name='eventattachment',
            name='type',
            field=models.CharField(db_index=True, max_length=64, null=True),
        ),
        migrations.AlterField(
            model_name='relay',
            name='first_seen',
            field=models.DateTimeField(default=None, null=True),
        ),
        migrations.AlterField(
            model_name='relay',
            name='is_internal',
            field=models.NullBooleanField(default=None),
        ),
        migrations.AlterField(
            model_name='relay',
            name='last_seen',
            field=models.DateTimeField(default=None, null=True),
        ),
        migrations.CreateModel(
            name='RelayUsage',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('relay_id', models.CharField(max_length=64)),
                ('version', models.CharField(default='0.0.1', max_length=32)),
                ('first_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_relayusage',
                'unique_together': {('relay_id', 'version')},
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='project',
                    name='flags',
                    field=bitfield.models.BitField((('has_releases', 'This Project has sent release data'), ('has_issue_alerts_targeting', 'This Project has issue alerts targeting'), ('has_transactions', 'This Project has sent transactions'), ('has_alert_filters', 'This Project has filters')), default=10, null=True),
                ),
            ],
        ),
        migrations.AddField(
            model_name='relayusage',
            name='public_key',
            field=models.CharField(db_index=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='eventattachment',
            name='type',
            field=models.CharField(db_index=True, max_length=64),
        ),
        migrations.AlterField(
            model_name='servicehook',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='fileblobindex',
                    name='blob',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sentry.fileblob'),
                ),
            ],
        ),
        migrations.AddField(
            model_name='sentryapp',
            name='creator_label',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='sentryapp',
            name='creator_user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SnubaQueryEventType',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.SmallIntegerField()),
                ('snuba_query', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.snubaquery')),
            ],
            options={
                'db_table': 'sentry_snubaqueryeventtype',
                'unique_together': {('snuba_query', 'type')},
            },
        ),
        migrations.CreateModel(
            name='GroupInbox',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('reason', models.PositiveSmallIntegerField(default=0)),
                ('reason_details', sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.group', unique=True)),
            ],
            options={
                'db_table': 'sentry_groupinbox',
            },
        ),
        migrations.CreateModel(
            name='RepositoryProjectPathConfig',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('stack_root', models.TextField()),
                ('source_root', models.TextField()),
                ('default_branch', models.TextField(null=True)),
                ('organization_integration_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.OrganizationIntegration', db_index=True, on_delete='CASCADE')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('repository', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.repository')),
            ],
            options={
                'db_table': 'sentry_repositoryprojectpathconfig',
                'unique_together': {('project', 'stack_root')},
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_projectdsymfile" ADD COLUMN "checksum" varchar(40) NULL;\n                    ',
                    reverse_sql='\n                        ALTER TABLE "sentry_projectdsymfile" DROP COLUMN "checksum";\n                        ',
                    hints={'tables': ['sentry_projectdsymfile']},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY "sentry_projectdsymfile_checksum_8fb028a8_idx" ON "sentry_projectdsymfile" ("checksum");\n                    ',
                    reverse_sql='\n                        DROP INDEX CONCURRENTLY "sentry_projectdsymfile_checksum_8fb028a8_idx";\n                        ',
                    hints={'tables': ['sentry_projectdsymfile']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='projectdebugfile',
                    name='checksum',
                    field=models.CharField(db_index=True, max_length=40, null=True),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='activity',
            name='type',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='auditlogentry',
                    name='actor',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_actors', to=settings.AUTH_USER_MODEL),
                ),
                migrations.AlterField(
                    model_name='auditlogentry',
                    name='target_user',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_targets', to=settings.AUTH_USER_MODEL),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='commitauthor',
            name='email',
            field=models.CharField(max_length=75),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_release" ADD COLUMN "status" integer NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_release" DROP COLUMN "status";\n                    ',
                    hints={'tables': ['sentry_release']},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_groupinbox" ADD COLUMN "organization_id" bigint NULL;\n                    ALTER TABLE "sentry_groupinbox" ADD COLUMN "project_id" bigint NULL;\n                    ',
                    reverse_sql='\n                        ALTER TABLE "sentry_groupinbox" DROP COLUMN "organization_id";\n                        ALTER TABLE "sentry_groupinbox" DROP COLUMN "project_id";\n                        ',
                    hints={'tables': ['sentry_groupinbox']},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY "sentry_groupinbox_organization_id_7b67769a" ON "sentry_groupinbox" ("organization_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX CONCURRENTLY "sentry_groupinbox_organization_id_7b67769a";\n                        ',
                    hints={'tables': ['sentry_groupinbox']},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY "sentry_groupinbox_project_id_ef8f034d" ON "sentry_groupinbox" ("project_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX CONCURRENTLY "sentry_groupinbox_project_id_ef8f034d";\n                        ',
                    hints={'tables': ['sentry_groupinbox']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='groupinbox',
                    name='organization',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization'),
                ),
                migrations.AddField(
                    model_name='groupinbox',
                    name='project',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.project'),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name='release',
                    name='status',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0, null=True),
                ),
            ],
        ),
        migrations.AddField(
            model_name='platformexternalissue',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.project'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name='platformexternalissue',
                    name='group',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.group'),
                ),
                migrations.RemoveField(
                    model_name='platformexternalissue',
                    name='group_id',
                ),
                migrations.AlterUniqueTogether(
                    name='platformexternalissue',
                    unique_together={('group', 'service_type')},
                ),
            ],
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('order', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('title', models.CharField(max_length=255)),
                ('display_type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('dashboard', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.dashboard')),
            ],
            options={
                'db_table': 'sentry_dashboardwidget',
                'unique_together': {('dashboard', 'order')},
            },
        ),
        migrations.CreateModel(
            name='DashboardWidgetQuery',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('fields', sentry.db.models.fields.array.ArrayField(null=True)),
                ('conditions', models.TextField()),
                ('order', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('widget', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.dashboardwidget')),
            ],
            options={
                'db_table': 'sentry_dashboardwidgetquery',
                'unique_together': {('widget', 'order')},
            },
        ),
        migrations.CreateModel(
            name='GroupOwner',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.PositiveSmallIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.group', unique=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('team', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.team')),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE')),
            ],
            options={
                'db_table': 'sentry_groupowner',
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='dashboard',
                    name='status',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                        ALTER TABLE "sentry_dashboard" DROP COLUMN "status";\n                        ',
                    reverse_sql='\n                        ALTER TABLE "sentry_dashboard" ADD COLUMN "status" int NOT NULL;\n                        ',
                    hints={'tables': ['sentry_dashboard']},
                ),
            ],
        ),
        migrations.AlterField(
            model_name='groupowner',
            name='group',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.group'),
        ),
        migrations.AddField(
            model_name='dashboardwidget',
            name='interval',
            field=models.CharField(max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='querysubscription',
            name='date_updated',
            field=models.DateTimeField(default=django.utils.timezone.now, null=True),
        ),
        migrations.AlterField(
            model_name='querysubscription',
            name='status',
            field=models.SmallIntegerField(db_index=True, default=0),
        ),
        migrations.CreateModel(
            name='DashboardTombstone',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('slug', models.CharField(max_length=255)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_dashboardtombstone',
                'unique_together': {('organization', 'slug')},
            },
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='status',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS sentry_groupinbox_date_added_f113c11b\n                    ON sentry_groupinbox (date_added);\n                    ',
                    reverse_sql='\n                    DROP INDEX CONCURRENTLY IF EXISTS sentry_groupinbox_date_added_f113c11b;\n                    ',
                    hints={'tables': ['sentry_groupinbox']},
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name='groupinbox',
                    name='date_added',
                    field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='groupcommitresolution',
            name='group_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
        ),
        migrations.AlterField(
            model_name='grouprelease',
            name='group_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
        ),
        migrations.AlterField(
            model_name='groupcommitresolution',
            name='commit_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='grouptombstone',
            name='previous_group_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(unique=True),
        ),
        migrations.AlterField(
            model_name='release',
            name='last_commit_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='dashboardwidget',
            name='display_type',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AddIndex(
            model_name='groupinbox',
            index=models.Index(fields=['project', 'date_added'], name='sentry_grou_project_a9fe16_idx'),
        ),
        migrations.AddField(
            model_name='dashboardwidgetquery',
            name='orderby',
            field=models.TextField(default=''),
        ),
        migrations.AlterField(
            model_name='activity',
            name='type',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.CreateModel(
            name='ProjectCodeOwners',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('raw', models.TextField(null=True)),
                ('schema', sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('repository_project_path_config', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.repositoryprojectpathconfig')),
            ],
            options={
                'db_table': 'sentry_projectcodeowners',
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='projectcodeowners',
                    name='repository_project_path_config',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sentry.repositoryprojectpathconfig'),
                ),
            ],
        ),
        migrations.CreateModel(
            name='NotificationSetting',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('scope_type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('scope_identifier', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('team_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Team', db_index=True, null=True, on_delete='CASCADE')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('target_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Actor', db_index=True, on_delete='CASCADE')),
                ('provider', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('value', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
            ],
            options={
                'db_table': 'sentry_notificationsetting',
                'unique_together': {('scope_type', 'scope_identifier', 'target_id', 'provider', 'type')},
            },
        ),
        migrations.AlterField(
            model_name='organization',
            name='flags',
            field=bitfield.models.BitField((('allow_joinleave', 'Allow members to join and leave teams without requiring approval.'), ('enhanced_privacy', 'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'), ('disable_shared_issues', 'Disable sharing of limited details on issues to anonymous users.'), ('early_adopter', 'Enable early adopter status, gaining access to features prior to public release.'), ('require_2fa', 'Require and enforce two-factor authentication for all members.'), ('disable_new_visibility_features', 'Temporarily opt out of new visibility features and ui'), ('demo_mode', 'Mark an organization as a demo org.')), default=1),
        ),
        migrations.AlterField(
            model_name='user',
            name='flags',
            field=bitfield.models.BitField((('newsletter_consent_prompt', 'Do we need to ask this user for newsletter consent?'), ('demo_mode', 'Mark an user as a demo user.')), default=0, null=True),
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'sentry_actor',
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_team ADD COLUMN "actor_id" bigint NULL;',
                    reverse_sql='ALTER TABLE sentry_team DROP COLUMN "actor_id";',
                    hints={'tables': ['sentry_team']},
                ),
                migrations.RunSQL(
                    sql='CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS sentry_team_actor_idx ON sentry_team (actor_id);',
                    reverse_sql='DROP INDEX CONCURRENTLY IF EXISTS sentry_team_actor_idx;',
                    hints={'tables': ['sentry_team']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='team',
                    name='actor',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='sentry.actor', unique=True),
                ),
            ],
        ),
        migrations.AddField(
            model_name='alertrule',
            name='owner',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.actor'),
        ),
        migrations.AddField(
            model_name='rule',
            name='owner',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.actor'),
        ),
        migrations.AlterField(
            model_name='organization',
            name='flags',
            field=bitfield.models.BitField((('allow_joinleave', 'Allow members to join and leave teams without requiring approval.'), ('enhanced_privacy', 'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'), ('disable_shared_issues', 'Disable sharing of limited details on issues to anonymous users.'), ('early_adopter', 'Enable early adopter status, gaining access to features prior to public release.'), ('require_2fa', 'Require and enforce two-factor authentication for all members.'), ('disable_new_visibility_features', 'Temporarily opt out of new visibility features and ui')), default=1),
        ),
        migrations.AlterField(
            model_name='user',
            name='flags',
            field=bitfield.models.BitField((('newsletter_consent_prompt', 'Do we need to ask this user for newsletter consent?'),), default=0, null=True),
        ),
        migrations.AlterField(
            model_name='savedsearch',
            name='sort',
            field=sentry.db.models.fields.text.CharField(default='date', max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name='projectcodeowners',
            name='repository_project_path_config',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sentry.repositoryprojectpathconfig', unique=True),
        ),
        migrations.CreateModel(
            name='ExternalActor',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('provider', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('external_name', models.TextField()),
                ('external_id', models.TextField(null=True)),
                ('actor', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.actor')),
                ('integration_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Integration', db_index=True, on_delete='CASCADE')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_externalactor',
                'unique_together': {('organization', 'provider', 'external_name', 'actor')},
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_externalactor" ALTER COLUMN "integration_id" SET DEFAULT 1;\n                    UPDATE "sentry_externalactor" SET "integration_id" = 1 where "integration_id" is NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_externalactor" ALTER COLUMN "integration_id" DROP DEFAULT;\n                    ',
                    hints={'tables': ['sentry_externalactor']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_externalactor" ALTER COLUMN "integration_id" SET NOT NULL;\n                    ALTER TABLE "sentry_externalactor" ALTER COLUMN "integration_id" DROP DEFAULT;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_externalactor" ALTER COLUMN "integration_id" DROP NOT NULL;\n                    ',
                    hints={'tables': ['sentry_externalactor']},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AlterField(
                    model_name='fileblobowner',
                    name='organization',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization'),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='fileblobowner',
                    name='organization_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                    preserve_default=False,
                ),
                migrations.RemoveField(
                    model_name='fileblobowner',
                    name='organization',
                ),
                migrations.AlterUniqueTogether(
                    name='fileblobowner',
                    unique_together={('blob', 'organization_id')},
                ),
            ],
        ),
        migrations.AlterField(
            model_name='externalactor',
            name='provider',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.CreateModel(
            name='TeamKeyTransaction',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('transaction', models.CharField(max_length=200)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('project_team', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.projectteam')),
            ],
            options={
                'db_table': 'sentry_performanceteamkeytransaction',
                'unique_together': {('project_team', 'transaction')},
            },
        ),
        migrations.AlterField(
            model_name='organizationmember',
            name='flags',
            field=bitfield.models.BitField((('sso:linked', 'sso:linked'), ('sso:invalid', 'sso:invalid'), ('member-limit:restricted', 'member-limit:restricted')), default=0),
        ),
        migrations.AlterField(
            model_name='authprovider',
            name='flags',
            field=bitfield.models.BitField((('allow_unlinked', 'Grant access to members who have not linked SSO accounts.'), ('scim_enabled', 'Enable SCIM for member and team provisioning and syncing')), default=0),
        ),
        migrations.CreateModel(
            name='ProjectTransactionThreshold',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('threshold', models.IntegerField()),
                ('metric', models.PositiveSmallIntegerField(default=1)),
                ('edited_by_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project', unique=True)),
            ],
            options={
                'db_table': 'sentry_projecttransactionthreshold',
            },
        ),
        migrations.CreateModel(
            name='ProjectTransactionThresholdOverride',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('transaction', models.CharField(max_length=200)),
                ('threshold', models.IntegerField()),
                ('metric', models.PositiveSmallIntegerField(default=1)),
                ('edited_by_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_projecttransactionthresholdoverride',
                'unique_together': {('project', 'transaction')},
            },
        ),
        migrations.AddField(
            model_name='release',
            name='build_code',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='release',
            name='build_number',
            field=models.BigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='release',
            name='major',
            field=models.BigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='release',
            name='minor',
            field=models.BigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='release',
            name='patch',
            field=models.BigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='release',
            name='prerelease',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='release',
            name='revision',
            field=models.BigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='release',
            name='package',
            field=models.TextField(null=True),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['organization', 'version'], name='sentry_release_version_btree', opclasses=['', 'text_pattern_ops']),
        ),
        migrations.AddIndex(
            model_name='release',
            index=sentry.db.models.indexes.IndexWithPostgresNameLimits(models.F('organization'), models.F('package'), models.OrderBy(models.F('major'), descending=True), models.OrderBy(models.F('minor'), descending=True), models.OrderBy(models.F('patch'), descending=True), models.OrderBy(models.F('revision'), descending=True), models.OrderBy(models.Case(models.When(prerelease='', then=1), default=0), descending=True), models.OrderBy(models.F('prerelease'), descending=True), name='sentry_release_semver_by_package_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(models.F('organization'), models.OrderBy(models.F('major'), descending=True), models.OrderBy(models.F('minor'), descending=True), models.OrderBy(models.F('patch'), descending=True), models.OrderBy(models.F('revision'), descending=True), models.OrderBy(models.Case(models.When(prerelease='', then=1), default=0), descending=True), models.OrderBy(models.F('prerelease'), descending=True), name='sentry_release_semver_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['organization', 'build_code'], name='sentry_rele_organiz_ffeeb2_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['organization', 'build_number'], name='sentry_rele_organiz_6b035f_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['organization', 'date_added'], name='sentry_rele_organiz_4ed947_idx'),
        ),
        migrations.AddIndex(
            model_name='release',
            index=models.Index(fields=['organization', 'status'], name='sentry_rele_organiz_6975e7_idx'),
        ),
        migrations.RunSQL(
            sql='\n            CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_organization_slug_upper_idx"\n            ON "sentry_organization" (UPPER(("slug"::text)));\n            ',
            reverse_sql='DROP INDEX CONCURRENTLY IF EXISTS sentry_organization_slug_upper_idx',
            hints={'tables': ['sentry_organization']},
        ),
        migrations.AlterField(
            model_name='organization',
            name='flags',
            field=bitfield.models.BitField((('allow_joinleave', 'Allow members to join and leave teams without requiring approval.'), ('enhanced_privacy', 'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'), ('disable_shared_issues', 'Disable sharing of limited details on issues to anonymous users.'), ('early_adopter', 'Enable early adopter status, gaining access to features prior to public release.'), ('require_2fa', 'Require and enforce two-factor authentication for all members.'), ('disable_new_visibility_features', 'Temporarily opt out of new visibility features and ui'), ('require_email_verification', 'Require and enforce email verification for all members.')), default=1),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_release_project" ADD COLUMN "adopted" timestamp with time zone NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_release_project" DROP COLUMN "adopted";\n                    ',
                    hints={'tables': ['sentry_release_project']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_release_project" ADD COLUMN "unadopted" timestamp with time zone NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_release_project" DROP COLUMN "unadopted";\n                    ',
                    hints={'tables': ['sentry_release_project']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_releaseprojectenvironment" ADD COLUMN "adopted" timestamp with time zone NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_releaseprojectenvironment" DROP COLUMN "adopted";\n                    ',
                    hints={'tables': ['sentry_releaseprojectenvironment']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_releaseprojectenvironment" ADD COLUMN "unadopted" timestamp with time zone NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_releaseprojectenvironment" DROP COLUMN "unadopted";\n                    ',
                    hints={'tables': ['sentry_releaseprojectenvironment']},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_project_proj_id_adopted_4ce765fa" ON "sentry_release_project" ("project_id", "adopted");\n                    ',
                    reverse_sql='DROP INDEX CONCURRENTLY IF EXISTS sentry_release_project_proj_id_adopted_4ce765fa',
                    hints={'tables': ['sentry_release_project']},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_project_proj_id_unadopted_8h5g84ee" ON "sentry_release_project" ("project_id", "unadopted");\n                    ',
                    reverse_sql='DROP INDEX CONCURRENTLY IF EXISTS sentry_release_project_proj_id_unadopted_8h5g84ee',
                    hints={'tables': ['sentry_release_project']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='releaseproject',
                    name='adopted',
                    field=models.DateTimeField(blank=True, null=True),
                ),
                migrations.AddField(
                    model_name='releaseproject',
                    name='unadopted',
                    field=models.DateTimeField(blank=True, null=True),
                ),
                migrations.AddField(
                    model_name='releaseprojectenvironment',
                    name='adopted',
                    field=models.DateTimeField(blank=True, null=True),
                ),
                migrations.AddField(
                    model_name='releaseprojectenvironment',
                    name='unadopted',
                    field=models.DateTimeField(blank=True, null=True),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name='releaseprojectenvironment',
            index=models.Index(fields=['project', 'adopted', 'environment'], name='sentry_rele_project_4bea8e_idx'),
        ),
        migrations.AddIndex(
            model_name='releaseprojectenvironment',
            index=models.Index(fields=['project', 'unadopted', 'environment'], name='sentry_rele_project_922a6a_idx'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AlterField(
                    model_name='organizationavatar',
                    name='file',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.file', unique=True),
                ),
                migrations.AlterField(
                    model_name='projectavatar',
                    name='file',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.file', unique=True),
                ),
                migrations.AlterField(
                    model_name='sentryappavatar',
                    name='file',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.file', unique=True),
                ),
                migrations.AlterField(
                    model_name='useravatar',
                    name='file',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.file', unique=True),
                ),
                migrations.AlterField(
                    model_name='teamavatar',
                    name='file',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.file', unique=True),
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='organizationavatar',
                    name='file',
                ),
                migrations.RemoveField(
                    model_name='projectavatar',
                    name='file',
                ),
                migrations.RemoveField(
                    model_name='sentryappavatar',
                    name='file',
                ),
                migrations.RemoveField(
                    model_name='useravatar',
                    name='file',
                ),
                migrations.RemoveField(
                    model_name='teamavatar',
                    name='file',
                ),
                migrations.AddField(
                    model_name='organizationavatar',
                    name='file_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
                ),
                migrations.AddField(
                    model_name='projectavatar',
                    name='file_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
                ),
                migrations.AddField(
                    model_name='sentryappavatar',
                    name='file_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
                ),
                migrations.AddField(
                    model_name='useravatar',
                    name='file_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
                ),
                migrations.AddField(
                    model_name='teamavatar',
                    name='file_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AddField(
                    model_name='releasefile',
                    name='artifact_count',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='releasefile',
                    name='artifact_count',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=1, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name='AppConnectBuild',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('app_id', models.IntegerField()),
                ('bundle_id', models.CharField(max_length=256)),
                ('platform', models.CharField(max_length=256)),
                ('bundle_short_version', models.CharField(max_length=256)),
                ('bundle_version', models.CharField(max_length=256)),
                ('fetched', models.BooleanField(default=False)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_appconnectbuild',
            },
        ),
        migrations.AddIndex(
            model_name='rule',
            index=models.Index(fields=['project', 'status', 'owner'], name='sentry_rule_project_676d0d_idx'),
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['project', 'datetime'], name='sentry_acti_project_cd8457_idx'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterUniqueTogether(
                    name='groupassignee',
                    unique_together={('project', 'group')},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterUniqueTogether(
                    name='group',
                    unique_together={('project', 'id'), ('project', 'short_id')},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AlterField(
                    model_name='projectdebugfile',
                    name='project',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.project'),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='projectdebugfile',
                    name='project_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                migrations.RemoveField(
                    model_name='projectdebugfile',
                    name='project',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AlterField(
                    model_name='releasefile',
                    name='dist',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.distribution'),
                ),
                migrations.AlterField(
                    model_name='releasefile',
                    name='organization',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization'),
                ),
                migrations.AlterField(
                    model_name='releasefile',
                    name='release',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.release'),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='releasefile',
                    name='dist_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                migrations.AddField(
                    model_name='releasefile',
                    name='organization_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
                ),
                migrations.AddField(
                    model_name='releasefile',
                    name='release_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
                ),
                migrations.RemoveField(
                    model_name='releasefile',
                    name='dist',
                ),
                migrations.RemoveField(
                    model_name='releasefile',
                    name='organization',
                ),
                migrations.RemoveField(
                    model_name='releasefile',
                    name='release',
                ),
                migrations.AlterUniqueTogether(
                    name='releasefile',
                    unique_together={('release_id', 'ident')},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='exporteddata',
                    name='file',
                ),
                migrations.AddField(
                    model_name='exporteddata',
                    name='file_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                migrations.AddField(
                    model_name='exporteddatablob',
                    name='blob_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(default=0),
                    preserve_default=False,
                ),
                migrations.RemoveField(
                    model_name='exporteddatablob',
                    name='blob',
                ),
                migrations.AlterUniqueTogether(
                    name='exporteddatablob',
                    unique_together={('data_export', 'blob_id', 'offset')},
                ),
            ],
        ),
        migrations.AddField(
            model_name='groupresolution',
            name='current_release_version',
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name='appconnectbuild',
            name='first_seen',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='appconnectbuild',
            name='uploaded_to_appstore',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddIndex(
            model_name='auditlogentry',
            index=models.Index(fields=['organization_id', 'datetime'], name='sentry_audi_organiz_c8bd18_idx'),
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField((('has_releases', 'This Project has sent release data'), ('has_issue_alerts_targeting', 'This Project has issue alerts targeting'), ('has_transactions', 'This Project has sent transactions'), ('has_alert_filters', 'This Project has filters'), ('has_sessions', 'This Project has sessions')), default=10, null=True),
        ),
        migrations.CreateModel(
            name='LatestAppConnectBuildsCheck',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('source_id', models.CharField(max_length=200)),
                ('last_checked', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_latestappconnectbuildscheck',
                'unique_together': {('project', 'source_id')},
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AddField(
                    model_name='dashboard',
                    name='last_visited',
                    field=models.DateTimeField(null=True),
                ),
                migrations.AddField(
                    model_name='dashboard',
                    name='visits',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                migrations.AddField(
                    model_name='discoversavedquery',
                    name='last_visited',
                    field=models.DateTimeField(null=True),
                ),
                migrations.AddField(
                    model_name='discoversavedquery',
                    name='visits',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='dashboard',
                    name='last_visited',
                    field=models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                migrations.AddField(
                    model_name='dashboard',
                    name='visits',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(default=1, null=True),
                ),
                migrations.AddField(
                    model_name='discoversavedquery',
                    name='last_visited',
                    field=models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                migrations.AddField(
                    model_name='discoversavedquery',
                    name='visits',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(default=1, null=True),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name='auditlogentry',
            index=models.Index(fields=['organization_id', 'event', 'datetime'], name='sentry_audi_organiz_588b1e_idx'),
        ),
        migrations.RunSQL(
            sql='\n                DROP TABLE IF EXISTS "jira_ac_tenant";\n                ',
            reverse_sql='CREATE TABLE jira_ac_tenant (fake_col int)',
            hints={'tables': ['jira_ac_tenant']},
        ),
        migrations.AddField(
            model_name='alertruletriggeraction',
            name='sentry_app_config',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='comparison_delta',
            field=models.IntegerField(null=True),
        ),
        migrations.CreateModel(
            name='GroupHistory',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('prev_history_date', models.DateTimeField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('actor', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.actor')),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.group')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('prev_history', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.grouphistory')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.release')),
            ],
            options={
                'db_table': 'sentry_grouphistory',
                'indexes': [models.Index(fields=['project', 'status', 'release'], name='sentry_grou_project_bbcf30_idx'), models.Index(fields=['group', 'status'], name='sentry_grou_group_i_c61acb_idx'), models.Index(fields=['project', 'date_added'], name='sentry_grou_project_20b3f8_idx')],
            },
        ),
        migrations.CreateModel(
            name='MetricsKeyIndexer',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('string', models.CharField(max_length=200)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_metricskeyindexer',
                'constraints': [models.UniqueConstraint(fields=('string',), name='unique_string')],
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_scheduleddeletion ALTER COLUMN aborted DROP NOT NULL',
                    reverse_sql='ALTER TABLE sentry_scheduleddeletion ALTER COLUMN aborted SET NOT NULL',
                    hints={'tables': ['sentry_scheduleddeletion']},
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='scheduleddeletion',
                    name='aborted',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_scheduleddeletion DROP COLUMN aborted',
                    reverse_sql='ALTER TABLE sentry_scheduleddeletion ADD COLUMN aborted BOOLEAN',
                    hints={'tables': ['sentry_scheduleddeletion']},
                ),
            ],
        ),
        migrations.AlterField(
            model_name='grouphistory',
            name='actor',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.actor'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name='grouplink',
                    name='group',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.group'),
                ),
                migrations.AddField(
                    model_name='grouplink',
                    name='project',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project'),
                ),
                migrations.AlterUniqueTogether(
                    name='grouplink',
                    unique_together={('group', 'linked_type', 'linked_id')},
                ),
                migrations.RemoveField(
                    model_name='grouplink',
                    name='group_id',
                ),
                migrations.RemoveField(
                    model_name='grouplink',
                    name='project_id',
                ),
            ],
        ),
        migrations.AlterField(
            model_name='incidentsnapshot',
            name='event_stats_snapshot',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.timeseriessnapshot'),
        ),
        migrations.AlterField(
            model_name='incidentsnapshot',
            name='incident',
            field=sentry.db.models.fields.onetoone.OneToOneCascadeDeletes(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.incident'),
        ),
        migrations.AlterField(
            model_name='pendingincidentsnapshot',
            name='incident',
            field=sentry.db.models.fields.onetoone.OneToOneCascadeDeletes(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.incident'),
        ),
        migrations.RemoveField(
            model_name='sentryappavatar',
            name='avatar_type',
        ),
        migrations.AddField(
            model_name='sentryappavatar',
            name='color',
            field=models.BooleanField(default=False),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AddField(
                    model_name='sentryapp',
                    name='popularity',
                    field=models.PositiveSmallIntegerField(null=True),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='sentryapp',
                    name='popularity',
                    field=models.PositiveSmallIntegerField(default=1, null=True),
                ),
            ],
        ),
        migrations.AddField(
            model_name='sentryappavatar',
            name='avatar_type',
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='sentryappavatar',
            name='sentry_app',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.sentryapp'),
        ),
        migrations.AddField(
            model_name='dashboardwidget',
            name='widget_type',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='organizationintegration',
            name='grace_period_end',
            field=models.DateTimeField(blank=True, db_index=True, null=True),
        ),
        migrations.CreateModel(
            name='DocIntegration',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('slug', models.CharField(max_length=64, unique=True)),
                ('author', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('url', models.URLField()),
                ('popularity', models.PositiveSmallIntegerField(default=1, null=True)),
                ('is_draft', models.BooleanField(default=True)),
                ('metadata', sentry.db.models.fields.jsonfield.JSONField(null=True)),
            ],
            options={
                'db_table': 'sentry_docintegration',
            },
        ),
        migrations.CreateModel(
            name='DocIntegrationAvatar',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('file_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True)),
                ('ident', models.CharField(db_index=True, max_length=32, unique=True)),
                ('avatar_type', models.PositiveSmallIntegerField(default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('doc_integration', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.docintegration')),
            ],
            options={
                'db_table': 'sentry_docintegrationavatar',
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('name', models.CharField(max_length=32, unique=True)),
                ('permissions', sentry.db.models.fields.array.ArrayField(null=True)),
            ],
            options={
                'db_table': 'sentry_userrole',
            },
        ),
        migrations.CreateModel(
            name='UserRoleUser',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('role', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.userrole')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_userrole_users',
            },
        ),
        migrations.AddField(
            model_name='userrole',
            name='users',
            field=models.ManyToManyField(through='sentry.UserRoleUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='dashboardwidget',
            name='detail',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AddField(
                    model_name='projectownership',
                    name='codeowners_auto_sync',
                    field=models.BooleanField(null=True),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='projectownership',
                    name='codeowners_auto_sync',
                    field=models.BooleanField(default=True, null=True),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='monitorcheckin',
            name='status',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=0),
        ),
        migrations.AddIndex(
            model_name='groupemailthread',
            index=models.Index(fields=['date', 'project', 'id'], name='sentry_grou_date_d4eb5a_idx'),
        ),
        migrations.AddIndex(
            model_name='monitorcheckin',
            index=models.Index(fields=['monitor', 'date_added', 'status'], name='sentry_moni_monitor_0a49ce_idx'),
        ),
        migrations.AddIndex(
            model_name='grouplink',
            index=models.Index(fields=['project', 'linked_id', 'linked_type', 'group'], name='sentry_grou_project_dd3e95_idx'),
        ),
        migrations.AddField(
            model_name='dashboardwidgetquery',
            name='aggregates',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), null=True, size=None),
        ),
        migrations.AddField(
            model_name='dashboardwidgetquery',
            name='columns',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), null=True, size=None),
        ),
        migrations.CreateModel(
            name='RuleFireHistory',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.group')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
                ('rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.rule')),
            ],
            options={
                'db_table': 'sentry_rulefirehistory',
                'indexes': [models.Index(fields=['rule', 'date_added'], name='sentry_rule_rule_id_015b9e_idx')],
            },
        ),
        migrations.AddField(
            model_name='dashboardwidget',
            name='limit',
            field=models.IntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='commitauthor',
            name='email',
            field=models.CharField(max_length=200),
        ),
        migrations.CreateModel(
            name='StringIndexer',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('string', models.CharField(max_length=200)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('retention_days', models.IntegerField(default=90)),
            ],
            options={
                'db_table': 'sentry_stringindexer',
                'constraints': [models.UniqueConstraint(fields=('string', 'organization_id'), name='unique_org_string')],
            },
        ),
        migrations.AddField(
            model_name='dashboardwidgetquery',
            name='field_aliases',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), null=True, size=None),
        ),
        migrations.AlterField(
            model_name='externalissue',
            name='key',
            field=models.CharField(max_length=256),
        ),
        migrations.RunSQL(
            sql='\n            ALTER SEQUENCE sentry_stringindexer_id_seq START WITH 65536;\n            ALTER SEQUENCE sentry_stringindexer_id_seq RESTART;\n            ',
            reverse_sql='\n            ALTER SEQUENCE sentry_stringindexer_id_seq START WITH 1;\n            ALTER SEQUENCE sentry_stringindexer_id_seq RESTART;\n            ',
            hints={'tables': ['sentry_stringindexer']},
        ),
        migrations.AddField(
            model_name='organizationmemberteam',
            name='role',
            field=models.CharField(blank=True, max_length=32, null=True),
        ),
        migrations.AddConstraint(
            model_name='savedsearch',
            constraint=models.UniqueConstraint(condition=models.Q(('is_global', True)), fields=('is_global', 'name'), name='sentry_savedsearch_organization_id_313a24e907cdef99'),
        ),
        migrations.AddConstraint(
            model_name='savedsearch',
            constraint=models.UniqueConstraint(condition=models.Q(('visibility', 'owner_pinned')), fields=('organization', 'owner_id', 'type'), name='sentry_savedsearch_pinning_constraint'),
        ),
        migrations.CreateModel(
            name='PerfStringIndexer',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('string', models.CharField(max_length=200)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('retention_days', models.IntegerField(default=90)),
            ],
            options={
                'db_table': 'sentry_perfstringindexer',
                'constraints': [models.UniqueConstraint(fields=('string', 'organization_id'), name='perf_unique_org_string')],
            },
        ),
        migrations.RunSQL(
            sql='\n            ALTER SEQUENCE sentry_perfstringindexer_id_seq START WITH 65536;\n            ALTER SEQUENCE sentry_perfstringindexer_id_seq RESTART;\n            ',
            reverse_sql='\n            ALTER SEQUENCE sentry_perfstringindexer_id_seq START WITH 1;\n            ALTER SEQUENCE sentry_perfstringindexer_id_seq RESTART;\n             ',
            hints={'tables': ['sentry_perfstringindexer']},
        ),
        migrations.AddField(
            model_name='dashboard',
            name='filters',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AddField(
            model_name='dashboard',
            name='projects',
            field=models.ManyToManyField(db_table='sentry_dashboardproject', to='sentry.project'),
        ),
        migrations.AlterField(
            model_name='commitfilechange',
            name='filename',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='deploy',
            name='date_finished',
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='snubaquery',
            name='type',
            field=models.SmallIntegerField(),
        ),
        migrations.CreateModel(
            name='ReleaseActivity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.release')),
            ],
            options={
                'db_table': 'sentry_releaseactivity',
            },
        ),
        migrations.CreateModel(
            name='SentryFunction',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('name', models.TextField()),
                ('slug', models.CharField(max_length=64, unique=True)),
                ('author', models.TextField()),
                ('external_id', models.CharField(max_length=128, unique=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('code', models.TextField(null=True)),
                ('overview', models.TextField(null=True)),
            ],
            options={
                'db_table': 'sentry_sentryfunction',
                'unique_together': {('organization', 'slug')},
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name='DashboardProject',
                    fields=[
                        ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                    ],
                    options={
                        'db_table': 'sentry_dashboardproject',
                    },
                ),
                migrations.AlterField(
                    model_name='dashboard',
                    name='projects',
                    field=models.ManyToManyField(through='sentry.DashboardProject', to='sentry.project'),
                ),
                migrations.AddField(
                    model_name='dashboardproject',
                    name='dashboard',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.dashboard'),
                ),
                migrations.AddField(
                    model_name='dashboardproject',
                    name='project',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project'),
                ),
                migrations.AlterUniqueTogether(
                    name='dashboardproject',
                    unique_together={('project', 'dashboard')},
                ),
            ],
        ),
        migrations.CreateModel(
            name='AuthProviderDefaultTeams',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('team_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('authprovider_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
            ],
            options={
                'db_table': 'sentry_authprovider_default_teams',
            },
        ),
        migrations.RunSQL(
            sql='ALTER TABLE sentry_dashboardproject ALTER COLUMN id TYPE bigint',
            reverse_sql='ALTER TABLE sentry_dashboardproject ALTER COLUMN id TYPE int',
            hints={'tables': ['sentry_dashboardproject']},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE sentry_dashboardproject ALTER COLUMN id TYPE bigint',
            reverse_sql='ALTER TABLE sentry_dashboardproject ALTER COLUMN dashboard_id TYPE int',
            hints={'tables': ['sentry_dashboardproject']},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE sentry_dashboardproject ALTER COLUMN id TYPE bigint',
            reverse_sql='ALTER TABLE sentry_dashboardproject ALTER COLUMN project_id TYPE int',
            hints={'tables': ['sentry_dashboardproject']},
        ),
        migrations.AddField(
            model_name='sentryfunction',
            name='events',
            field=sentry.db.models.fields.array.ArrayField(null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField((('has_releases', 'This Project has sent release data'), ('has_issue_alerts_targeting', 'This Project has issue alerts targeting'), ('has_transactions', 'This Project has sent transactions'), ('has_alert_filters', 'This Project has filters'), ('has_sessions', 'This Project has sessions'), ('has_profiles', 'This Project has sent profiles')), default=10, null=True),
        ),
        migrations.AddField(
            model_name='sentryfunction',
            name='env_variables',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='auditlogentry',
            name='target_object',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='commit',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='commitauthor',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='commitfilechange',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='deploy',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='distribution',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='environment',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
        ),
        migrations.AlterField(
            model_name='environment',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='grouprelease',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='monitor',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='monitor',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='promptsactivity',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='promptsactivity',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='pullrequest',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='release',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='releasecommit',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='releasecommit',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='releaseenvironment',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='releasefile',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='releaseheadcommit',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='repository',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='servicehook',
            name='actor_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='servicehook',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name='servicehook',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name='servicehookproject',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.RunSQL(
            sql='ALTER TABLE sentry_externalissue ALTER COLUMN organization_id TYPE bigint',
            reverse_sql='ALTER TABLE sentry_externalissue ALTER COLUMN organization_id TYPE int',
            hints={'tables': ['sentry_externalissue']},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE sentry_externalissue ALTER COLUMN integration_id TYPE bigint',
            reverse_sql='ALTER TABLE sentry_externalissue ALTER COLUMN integration_id TYPE int',
            hints={'tables': ['sentry_externalissue']},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE sentry_dashboardproject ALTER COLUMN project_id TYPE bigint',
            reverse_sql='ALTER TABLE sentry_dashboardproject ALTER COLUMN project_id TYPE int',
            hints={'tables': ['sentry_dashboardproject']},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE sentry_dashboardproject ALTER COLUMN dashboard_id TYPE bigint',
            reverse_sql='ALTER TABLE sentry_dashboardproject ALTER COLUMN dashboard_id TYPE int',
            hints={'tables': ['sentry_dashboardproject']},
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_groupedmessage" ADD COLUMN "type" integer NOT NULL DEFAULT 1;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_groupedmessage" DROP COLUMN "type";\n                    ',
                    hints={'tables': ['sentry_groupedmessage']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='group',
                    name='type',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=1),
                ),
            ],
        ),
        migrations.AddField(
            model_name='groupowner',
            name='context',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AddField(
            model_name='discoversavedquery',
            name='is_homepage',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddConstraint(
            model_name='discoversavedquery',
            constraint=models.UniqueConstraint(condition=models.Q(('is_homepage', True)), fields=('organization', 'created_by_id', 'is_homepage'), name='unique_user_homepage_query'),
        ),
        migrations.AlterField(
            model_name='projectownership',
            name='fallthrough',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='rulefirehistory',
            name='event_id',
            field=sentry.db.models.fields.text.CharField(max_length=32, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_projectownership" ADD COLUMN "suspect_committer_auto_assignment" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_projectownership" DROP COLUMN "suspect_committer_auto_assignment";\n                    ',
                    hints={'tables': ['sentry_projectownership']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='projectownership',
                    name='suspect_committer_auto_assignment',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='projectownership',
            name='fallthrough',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='projectownership',
            name='auto_assignment',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='projectownership',
            name='suspect_committer_auto_assignment',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='releaseproject',
            name='first_seen_transaction',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name='releaseproject',
            index=models.Index(fields=['project', 'adopted'], name='sentry_rele_project_a80825_idx'),
        ),
        migrations.AddIndex(
            model_name='releaseproject',
            index=models.Index(fields=['project', 'unadopted'], name='sentry_rele_project_2ca122_idx'),
        ),
        migrations.AddIndex(
            model_name='releaseproject',
            index=models.Index(fields=['project', 'first_seen_transaction'], name='sentry_rele_project_3143eb_idx'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_appconnectbuild" ADD COLUMN "app_id_str" varchar(256) NOT NULL DEFAULT \'0\';\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_appconnectbuild" DROP COLUMN "app_id_str";\n                    ',
                    hints={'tables': ['sentry_appconnectbuild']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='appconnectbuild',
                    name='app_id_str',
                    field=models.CharField(default='0', max_length=256),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='appconnectbuild',
            name='app_id',
            field=models.IntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField((('has_releases', 'This Project has sent release data'), ('has_issue_alerts_targeting', 'This Project has issue alerts targeting'), ('has_transactions', 'This Project has sent transactions'), ('has_alert_filters', 'This Project has filters'), ('has_sessions', 'This Project has sessions'), ('has_profiles', 'This Project has sent profiles'), ('has_replays', 'This Project has sent replays')), default=10, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='appconnectbuild',
                    name='app_id_str',
                ),
                migrations.AlterField(
                    model_name='appconnectbuild',
                    name='app_id',
                    field=models.CharField(db_column='app_id_str', default='0', max_length=256),
                ),
            ],
        ),
        migrations.AddField(
            model_name='release',
            name='user_agent',
            field=models.TextField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_appconnectbuild" DROP COLUMN "app_id";\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_appconnectbuild" ADD COLUMN "app_id" int NULL;\n                    ',
                    hints={'tables': ['sentry_appconnectbuild']},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_repositoryprojectpathconfig" ADD COLUMN "automatically_generated" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_repositoryprojectpathconfig" DROP COLUMN "automatically_generated";\n                    ',
                    hints={'tables': ['sentry_repositoryprojectpathconfig']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='repositoryprojectpathconfig',
                    name='automatically_generated',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField((('has_releases', 'This Project has sent release data'), ('has_issue_alerts_targeting', 'This Project has issue alerts targeting'), ('has_transactions', 'This Project has sent transactions'), ('has_alert_filters', 'This Project has filters'), ('has_sessions', 'This Project has sessions'), ('has_profiles', 'This Project has sent profiles'), ('has_replays', 'This Project has sent replays'), ('spike_protection_error_currently_active', 'spike_protection_error_currently_active'), ('spike_protection_transaction_currently_active', 'spike_protection_transaction_currently_active'), ('spike_protection_attachment_currently_active', 'spike_protection_attachment_currently_active')), default=10, null=True),
        ),
        migrations.AlterField(
            model_name='organizationmember',
            name='flags',
            field=bitfield.models.BitField((('sso:linked', 'sso:linked'), ('sso:invalid', 'sso:invalid'), ('member-limit:restricted', 'member-limit:restricted'), ('idp:provisioned', 'idp:provisioned'), ('idp:role-restricted', 'idp:role-restricted')), default=0),
        ),
        migrations.CreateModel(
            name='OrganizationMapping',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('slug', models.SlugField(unique=True)),
                ('name', models.CharField(max_length=64)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('customer_id', models.CharField(db_index=True, max_length=255, null=True)),
                ('verified', models.BooleanField(default=False)),
                ('idempotency_key', models.CharField(max_length=48)),
                ('region_name', models.CharField(max_length=48)),
            ],
            options={
                'db_table': 'sentry_organizationmapping',
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_team" ADD COLUMN "idp_provisioned" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_team" DROP COLUMN "idp_provisioned";\n                    ',
                    hints={'tables': ['sentry_team']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='team',
                    name='idp_provisioned',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.CreateModel(
            name='ControlTombstone',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('table_name', models.CharField(max_length=48)),
                ('object_identifier', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_controltombstone',
            },
        ),
        migrations.CreateModel(
            name='RegionTombstone',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('table_name', models.CharField(max_length=48)),
                ('object_identifier', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_regiontombstone',
            },
        ),
        migrations.CreateModel(
            name='RegionOutbox',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('shard_scope', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('shard_identifier', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('category', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('object_identifier', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('payload', sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ('scheduled_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('scheduled_for', models.DateTimeField(default=datetime.datetime(2016, 8, 1, 0, 0, tzinfo=datetime.timezone.utc))),
            ],
            options={
                'db_table': 'sentry_regionoutbox',
                'indexes': [models.Index(fields=['shard_scope', 'shard_identifier', 'id'], name='sentry_regi_shard_s_e7412f_idx'), models.Index(fields=['shard_scope', 'shard_identifier', 'scheduled_for'], name='sentry_regi_shard_s_cd9995_idx'), models.Index(fields=['shard_scope', 'shard_identifier', 'category', 'object_identifier'], name='sentry_regi_shard_s_bfff84_idx')],
            },
        ),
        migrations.CreateModel(
            name='ControlOutbox',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('shard_scope', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('shard_identifier', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('category', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('object_identifier', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('payload', sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ('scheduled_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('scheduled_for', models.DateTimeField(default=datetime.datetime(2016, 8, 1, 0, 0, tzinfo=datetime.timezone.utc))),
                ('region_name', models.CharField(max_length=48)),
            ],
            options={
                'db_table': 'sentry_controloutbox',
                'indexes': [models.Index(fields=['region_name', 'shard_scope', 'shard_identifier', 'category', 'object_identifier'], name='sentry_cont_region__1c1c72_idx'), models.Index(fields=['region_name', 'shard_scope', 'shard_identifier', 'scheduled_for'], name='sentry_cont_region__0c4512_idx'), models.Index(fields=['region_name', 'shard_scope', 'shard_identifier', 'id'], name='sentry_cont_region__a95d82_idx')],
            },
        ),
        migrations.AlterField(
            model_name='organization',
            name='flags',
            field=bitfield.models.BitField((('allow_joinleave', 'Allow members to join and leave teams without requiring approval.'), ('enhanced_privacy', 'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'), ('disable_shared_issues', 'Disable sharing of limited details on issues to anonymous users.'), ('early_adopter', 'Enable early adopter status, gaining access to features prior to public release.'), ('require_2fa', 'Require and enforce two-factor authentication for all members.'), ('disable_new_visibility_features', 'Temporarily opt out of new visibility features and ui'), ('require_email_verification', 'Require and enforce email verification for all members.'), ('codecov_access', 'Enable codecov integration.')), default=1),
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField((('has_releases', 'This Project has sent release data'), ('has_issue_alerts_targeting', 'This Project has issue alerts targeting'), ('has_transactions', 'This Project has sent transactions'), ('has_alert_filters', 'This Project has filters'), ('has_sessions', 'This Project has sessions'), ('has_profiles', 'This Project has sent profiles'), ('has_replays', 'This Project has sent replays'), ('spike_protection_error_currently_active', 'spike_protection_error_currently_active'), ('spike_protection_transaction_currently_active', 'spike_protection_transaction_currently_active'), ('spike_protection_attachment_currently_active', 'spike_protection_attachment_currently_active'), ('has_minified_stack_trace', 'This Project has event with minified stack trace'), ('has_cron_monitors', 'This Project has cron monitors'), ('has_cron_checkins', 'This Project has sent check-ins')), default=10, null=True),
        ),
        migrations.AddField(
            model_name='team',
            name='org_role',
            field=models.CharField(max_length=32, null=True),
        ),
        migrations.CreateModel(
            name='RegionScheduledDeletion',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guid', models.CharField(default=sentry.deletions.models.scheduleddeletion.default_guid, max_length=32, unique=True)),
                ('app_label', models.CharField(max_length=64)),
                ('model_name', models.CharField(max_length=64)),
                ('object_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_scheduled', models.DateTimeField(default=sentry.deletions.models.scheduleddeletion.default_date_schedule)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default={})),
                ('in_progress', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'sentry_regionscheduleddeletion',
                'unique_together': {('app_label', 'model_name', 'object_id')},
            },
        ),
        migrations.AddField(
            model_name='monitorcheckin',
            name='attachment_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='authenticator',
            name='config',
            field=sentry.users.models.authenticator.AuthenticatorConfig(editable=False),
        ),
        migrations.CreateModel(
            name='MonitorEnvironment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('next_checkin', models.DateTimeField(null=True)),
                ('last_checkin', models.DateTimeField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.environment')),
                ('monitor', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.monitor')),
            ],
            options={
                'db_table': 'sentry_monitorenvironment',
                'indexes': [models.Index(fields=['monitor', 'environment'], name='sentry_moni_monitor_3d7eb9_idx')],
            },
        ),
        migrations.CreateModel(
            name='ArtifactBundle',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('bundle_id', models.UUIDField(db_index=True, default='00000000-00000000-00000000-00000000')),
                ('artifact_count', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('date_uploaded', models.DateTimeField(default=django.utils.timezone.now)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.file')),
            ],
            options={
                'db_table': 'sentry_artifactbundle',
            },
        ),
        migrations.CreateModel(
            name='ReleaseArtifactBundle',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('release_name', models.CharField(db_index=True, max_length=250)),
                ('dist_name', models.CharField(default='', max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('artifact_bundle', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.artifactbundle')),
            ],
            options={
                'db_table': 'sentry_releaseartifactbundle',
                'unique_together': {('organization_id', 'release_name', 'dist_name', 'artifact_bundle')},
                'indexes': [models.Index(fields=['organization_id', 'release_name', 'dist_name', 'artifact_bundle'], name='sentry_rele_organiz_291018_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProjectArtifactBundle',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('artifact_bundle', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.artifactbundle')),
            ],
            options={
                'db_table': 'sentry_projectartifactbundle',
                'unique_together': {('project_id', 'artifact_bundle')},
                'indexes': [models.Index(fields=['project_id', 'artifact_bundle'], name='sentry_proj_project_f73d36_idx')],
            },
        ),
        migrations.CreateModel(
            name='DebugIdArtifactBundle',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('debug_id', models.UUIDField()),
                ('source_file_type', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_last_accessed', models.DateTimeField(default=django.utils.timezone.now)),
                ('artifact_bundle', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.artifactbundle')),
            ],
            options={
                'db_table': 'sentry_debugidartifactbundle',
                'unique_together': {('debug_id', 'artifact_bundle', 'source_file_type')},
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='environment',
                    name='project_id',
                ),
            ],
        ),
        migrations.AddField(
            model_name='monitorcheckin',
            name='monitor_environment',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.monitorenvironment'),
        ),
        migrations.RemoveIndex(
            model_name='monitorenvironment',
            name='sentry_moni_monitor_3d7eb9_idx',
        ),
        migrations.AlterUniqueTogether(
            name='monitorenvironment',
            unique_together={('monitor', 'environment')},
        ),
        migrations.AlterField(
            model_name='option',
            name='key',
            field=models.CharField(max_length=128, unique=True),
        ),
        migrations.AlterField(
            model_name='group',
            name='type',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=1),
        ),
        migrations.CreateModel(
            name='NotificationAction',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.SmallIntegerField()),
                ('target_type', models.SmallIntegerField()),
                ('target_identifier', models.TextField(null=True)),
                ('target_display', models.TextField(null=True)),
                ('integration_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Integration', blank=True, db_index=True, null=True, on_delete='CASCADE')),
                ('sentry_app_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.SentryApp', blank=True, db_index=True, null=True, on_delete='CASCADE')),
                ('trigger_type', models.SmallIntegerField()),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_notificationaction',
            },
        ),
        migrations.CreateModel(
            name='NotificationActionProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('action', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.notificationaction')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_notificationactionproject',
            },
        ),
        migrations.AddField(
            model_name='notificationaction',
            name='projects',
            field=models.ManyToManyField(through='sentry.NotificationActionProject', to='sentry.project'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "auth_user" ADD COLUMN "avatar_type" smallint NOT NULL DEFAULT 0;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "auth_user" DROP COLUMN "avatar_type";\n                    ',
                    hints={'tables': ['auth_user']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "auth_user" ADD COLUMN "avatar_url" varchar(120) DEFAULT NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "auth_user" DROP COLUMN "avatar_url";\n                    ',
                    hints={'tables': ['auth_user']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='user',
                    name='avatar_type',
                    field=models.PositiveSmallIntegerField(default=0),
                ),
                migrations.AddField(
                    model_name='user',
                    name='avatar_url',
                    field=models.CharField(max_length=120, null=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_groupsnooze" ADD COLUMN "until_escalating" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_groupsnooze" DROP COLUMN "until_escalating";\n                    ',
                    hints={'tables': ['sentry_groupsnooze']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='groupsnooze',
                    name='until_escalating',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='debugidartifactbundle',
            name='date_last_accessed',
            field=models.DateTimeField(default=None, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='debugidartifactbundle',
                    name='date_last_accessed',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_debugidartifactbundle" DROP COLUMN "date_last_accessed";\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_debugidartifactbundle" ADD COLUMN "date_last_accessed" timestamp with time zone NULL;\n                    ',
                    hints={'tables': ['sentry_debugidartifactbundle']},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql="\n                    ALTER TABLE sentry_perfstringindexer ADD COLUMN use_case_id varchar(120) NOT NULL DEFAULT 'performance';\n                    ",
                    reverse_sql='\n                    ALTER TABLE sentry_perfstringindexer DROP COLUMN use_case_id;\n                    ',
                    hints={'tables': ['sentry_perfstringindexer']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='perfstringindexer',
                    name='use_case_id',
                    field=models.CharField(default='performance', max_length=120),
                ),
            ],
        ),
        migrations.AddField(
            model_name='actor',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, db_index=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actor_from_team', to='sentry.team'),
        ),
        migrations.AddField(
            model_name='actor',
            name='user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=False, null=True, on_delete='CASCADE'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='team',
                    name='actor',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_from_actor', to='sentry.actor', unique=True),
                ),
                migrations.AlterField(
                    model_name='alertrule',
                    name='owner',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.actor'),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='actor',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actor_from_team', to='sentry.team'),
        ),
        migrations.AlterField(
            model_name='actor',
            name='user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE'),
        ),
        migrations.AddConstraint(
            model_name='perfstringindexer',
            constraint=models.UniqueConstraint(fields=('string', 'organization_id', 'use_case_id'), name='perf_unique_org_string_usecase'),
        ),
        migrations.RemoveConstraint(
            model_name='perfstringindexer',
            name='perf_unique_org_string',
        ),
        migrations.CreateModel(
            name='RuleSnooze',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE')),
                ('owner_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
                ('until', models.DateTimeField(db_index=True, null=True)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.alertrule')),
                ('rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.rule')),
            ],
            options={
                'db_table': 'sentry_rulesnooze',
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('alert_rule__isnull', True), ('rule__isnull', False)), models.Q(('alert_rule__isnull', False), ('rule__isnull', True)), _connector='OR'), name='rule_or_alert_rule')],
                'unique_together': {('user_id', 'alert_rule'), ('user_id', 'rule')},
            },
        ),
        migrations.CreateModel(
            name='OrganizationMemberMapping',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('role', models.CharField(default='member', max_length=32)),
                ('email', models.EmailField(blank=True, max_length=75, null=True)),
                ('invite_status', models.PositiveSmallIntegerField(default=0, null=True)),
                ('inviter', sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inviter_orgmembermapping_set', to=settings.AUTH_USER_MODEL)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orgmembermapping_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_organizationmembermapping',
                'unique_together': {('organization_id', 'email'), ('organization_id', 'user')},
            },
        ),
        migrations.AlterField(
            model_name='actor',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actor_from_team', to='sentry.team', unique=True),
        ),
        migrations.AlterField(
            model_name='actor',
            name='user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE', unique=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_rulesnooze" ADD COLUMN "date_added" timestamp NOT NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_rulesnooze" DROP COLUMN "date_added";\n                    ',
                    hints={'tables': ['sentry_rulesnooze']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='rulesnooze',
                    name='date_added',
                    field=models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name='rulesnooze',
            constraint=models.UniqueConstraint(condition=models.Q(('user_id__isnull', True)), fields=('rule',), name='unique_rule_user'),
        ),
        migrations.AddConstraint(
            model_name='rulesnooze',
            constraint=models.UniqueConstraint(condition=models.Q(('user_id__isnull', True)), fields=('alert_rule',), name='unique_alert_rule_user'),
        ),
        migrations.AddField(
            model_name='group',
            name='substatus',
            field=sentry.db.models.fields.bounded.BoundedIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='groupsnooze',
            name='until_escalating',
            field=models.BooleanField(default=False, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='groupsnooze',
                    name='until_escalating',
                ),
            ],
        ),
        migrations.AddField(
            model_name='pagerdutyservice',
            name='integration_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='repositoryprojectpathconfig',
            name='integration_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='pagerdutyservice',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.AddField(
            model_name='repositoryprojectpathconfig',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_groupsnooze" DROP COLUMN "until_escalating";\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_groupsnooze" ADD COLUMN "until_escalating" BOOLEAN DEFAULT false\n                    ',
                    hints={'tables': ['sentry_groupsnooze']},
                ),
            ],
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "sentry_actor" DROP CONSTRAINT IF EXISTS "sentry_actor_team_id_6ca8eba5_fk_sentry_team_id";',
            reverse_sql='',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "sentry_actor" DROP CONSTRAINT IF EXISTS "sentry_actor_team_id_6ca8eba5_uniq";',
            reverse_sql='',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='DROP INDEX CONCURRENTLY IF EXISTS "sentry_actor_team_id_6ca8eba5";',
            reverse_sql='',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='DROP INDEX CONCURRENTLY IF EXISTS "sentry_actor_team_id_6ca8eba5_uniq";',
            reverse_sql='',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "sentry_actor_team_id_6ca8eba5_uniq" ON "sentry_actor" ("team_id");',
            reverse_sql='',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "sentry_actor" ADD CONSTRAINT "sentry_actor_team_id_6ca8eba5_fk_sentry_team_id" FOREIGN KEY ("team_id") REFERENCES "sentry_team" ("id") DEFERRABLE INITIALLY DEFERRED NOT VALID;',
            reverse_sql='',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "sentry_actor" VALIDATE CONSTRAINT "sentry_actor_team_id_6ca8eba5_fk_sentry_team_id";',
            reverse_sql='',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "sentry_actor" DROP CONSTRAINT IF EXISTS "sentry_actor_user_id_c832ff63_uniq";',
            reverse_sql='',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='DROP INDEX CONCURRENTLY IF EXISTS "sentry_actor_user_id_c832ff63";',
            reverse_sql='',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='DROP INDEX CONCURRENTLY IF EXISTS "sentry_actor_user_id_c832ff63_uniq";',
            reverse_sql='',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "sentry_actor_user_id_c832ff63_uniq" ON "sentry_actor" ("user_id");',
            reverse_sql='',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='SELECT 1',
            reverse_sql='\nALTER TABLE "sentry_actor" ADD CONSTRAINT "sentry_actor_team_id_6ca8eba5_uniq" UNIQUE USING INDEX "sentry_actor_team_id_6ca8eba5_uniq";\n            ',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.RunSQL(
            sql='SELECT 1',
            reverse_sql='\nALTER TABLE "sentry_actor" ADD CONSTRAINT "sentry_actor_user_id_c832ff63_uniq" UNIQUE USING INDEX "sentry_actor_user_id_c832ff63_uniq";\n            ',
            hints={'tables': ['sentry_actor']},
        ),
        migrations.AlterField(
            model_name='pagerdutyservice',
            name='integration_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
        ),
        migrations.AlterField(
            model_name='pagerdutyservice',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='repositoryprojectpathconfig',
            name='integration_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
        ),
        migrations.AlterField(
            model_name='repositoryprojectpathconfig',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name='rule',
            name='owner',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.actor'),
        ),
        migrations.AddField(
            model_name='organizationmembermapping',
            name='organizationmember_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='organizationmembermapping',
            unique_together={('organization_id', 'email'), ('organization_id', 'organizationmember_id'), ('organization_id', 'user')},
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_rule" ADD COLUMN "source" integer NOT NULL DEFAULT 0;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_rule" DROP COLUMN "source";\n                    ',
                    hints={'tables': ['sentry_rule']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='rule',
                    name='source',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
            ],
        ),
        migrations.RunSQL(
            sql='ALTER TABLE IF EXISTS sentry_notificationsetting DROP CONSTRAINT IF EXISTS sentry_notifications_target_id_f3923c98_fk_sentry_ac',
            reverse_sql='ALTER TABLE IF EXISTS sentry_notificationsetting ADD CONSTRAINT sentry_notifications_target_id_f3923c98_fk_sentry_ac FOREIGN KEY (target_id) REFERENCES sentry_actor (id) DEFERRABLE INITIALLY DEFERRED',
            hints={'tables': ['sentry_notificationsetting']},
        ),
        migrations.CreateModel(
            name='ControlOption',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=128, unique=True)),
                ('last_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('value', sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
            ],
            options={
                'db_table': 'sentry_controloption',
            },
        ),
        migrations.AlterField(
            model_name='perfstringindexer',
            name='use_case_id',
            field=models.CharField(max_length=120),
        ),
        migrations.AddConstraint(
            model_name='notificationsetting',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('team_id__isnull', False), ('user_id__isnull', True)), models.Q(('team_id__isnull', True), ('user_id__isnull', False)), _connector='OR'), name='notification_team_or_user_check'),
        ),
        migrations.AddField(
            model_name='monitorcheckin',
            name='expected_time',
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name='monitorcheckin',
            name='monitor_config',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AddField(
            model_name='organizationmapping',
            name='status',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='monitorcheckin',
            name='date_added',
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_option" ADD COLUMN "last_updated_by" VARCHAR(16) NOT NULL DEFAULT \'unknown\';\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_option" DROP COLUMN "last_updated_by";\n                    ',
                    hints={'tables': ['sentry_option']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_controloption" ADD COLUMN "last_updated_by" VARCHAR(16) NOT NULL DEFAULT \'unknown\';\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_controloption" DROP COLUMN "last_updated_by";\n                    ',
                    hints={'tables': ['sentry_controloption']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='option',
                    name='last_updated_by',
                    field=models.CharField(default='unknown', max_length=16),
                ),
                migrations.AddField(
                    model_name='controloption',
                    name='last_updated_by',
                    field=models.CharField(default='unknown', max_length=16),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='commit',
            name='key',
            field=models.CharField(db_index=True, max_length=64),
        ),
        migrations.AlterField(
            model_name='pullrequest',
            name='date_added',
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='pullrequest',
            name='merge_commit_sha',
            field=models.CharField(db_index=True, max_length=64, null=True),
        ),
        migrations.CreateModel(
            name='ControlFile',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('type', models.CharField(max_length=64)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('headers', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('size', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('checksum', models.CharField(db_index=True, max_length=40, null=True)),
            ],
            options={
                'db_table': 'sentry_controlfile',
            },
        ),
        migrations.CreateModel(
            name='ControlFileBlob',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('path', models.TextField(null=True)),
                ('size', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('checksum', models.CharField(max_length=40, unique=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_controlfileblob',
            },
        ),
        migrations.CreateModel(
            name='ControlFileBlobIndex',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('offset', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('blob', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sentry.controlfileblob')),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.controlfile')),
            ],
            options={
                'db_table': 'sentry_controlfileblobindex',
                'unique_together': {('file', 'blob', 'offset')},
            },
        ),
        migrations.AddField(
            model_name='controlfile',
            name='blobs',
            field=models.ManyToManyField(through='sentry.ControlFileBlobIndex', to='sentry.controlfileblob'),
        ),
        migrations.CreateModel(
            name='ControlFileBlobOwner',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('blob', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.controlfileblob')),
            ],
            options={
                'db_table': 'sentry_controlfileblobowner',
                'unique_together': {('blob', 'organization_id')},
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmember" ADD COLUMN "user_is_active" BOOLEAN NOT NULL DEFAULT TRUE;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_organizationmember" DROP COLUMN "user_is_active";\n                    ',
                    hints={'tables': ['sentry_organizationmember']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='organizationmember',
                    name='user_is_active',
                    field=models.BooleanField(default=True),
                ),
            ],
        ),
        migrations.AddField(
            model_name='dashboardwidget',
            name='description',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='organizationmapping',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, unique=True),
        ),
        migrations.AddField(
            model_name='docintegrationavatar',
            name='control_file_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
        ),
        migrations.AddField(
            model_name='sentryappavatar',
            name='control_file_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
        ),
        migrations.AddField(
            model_name='useravatar',
            name='control_file_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
        ),
        migrations.AddField(
            model_name='monitorcheckin',
            name='timeout_at',
            field=models.DateTimeField(null=True),
        ),
        migrations.AlterField(
            model_name='apiapplication',
            name='owner',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PullRequestComment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('external_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('group_ids', sentry.db.models.fields.array.ArrayField(null=True)),
                ('pull_request', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.pullrequest', unique=True)),
            ],
            options={
                'db_table': 'sentry_pullrequest_comment',
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmember" ADD COLUMN "user_email" VARCHAR(75) NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_organizationmember" DROP COLUMN "user_email";\n                    ',
                    hints={'tables': ['sentry_organizationmember']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='organizationmember',
                    name='user_email',
                    field=models.CharField(blank=True, max_length=75, null=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='user',
                    name='id',
                    field=sentry.db.models.fields.bounded.BoundedAutoField(primary_key=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(
                    name='ScheduledJob',
                ),
            ],
        ),
        migrations.AlterField(
            model_name='pullrequestcomment',
            name='group_ids',
            field=django.contrib.postgres.fields.ArrayField(base_field=sentry.db.models.fields.bounded.BoundedBigIntegerField(), default=None, size=None),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='artifactbundle',
            name='bundle_id',
            field=models.UUIDField(db_index=True, default='00000000-00000000-00000000-00000000'),
        ),
        migrations.AlterField(
            model_name='releaseartifactbundle',
            name='dist_name',
            field=models.CharField(db_index=True, default='', max_length=64),
        ),
        migrations.AlterField(
            model_name='releaseartifactbundle',
            name='release_name',
            field=models.CharField(db_index=True, max_length=250),
        ),
        migrations.CreateModel(
            name='OrgAuthToken',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE')),
                ('token_hashed', models.TextField(unique=True)),
                ('token_last_characters', models.CharField(max_length=4, null=True)),
                ('name', models.CharField(max_length=255)),
                ('scope_list', sentry.db.models.fields.array.ArrayField(null=True, validators=[sentry.models.orgauthtoken.validate_scope_list])),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_last_used', models.DateTimeField(blank=True, null=True)),
                ('project_last_used_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Project', blank=True, db_index=True, null=True, on_delete='SET_NULL')),
                ('date_deactivated', models.DateTimeField(blank=True, null=True)),
                ('created_by', sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_orgauthtoken',
            },
        ),
        migrations.AddIndex(
            model_name='monitorcheckin',
            index=models.Index(fields=['timeout_at', 'status'], name='sentry_moni_timeout_0a5bdf_idx'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organization" ADD COLUMN "is_test" BOOLEAN NOT NULL DEFAULT FALSE;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_organization" DROP COLUMN "is_test";\n                    ',
                    hints={'tables': ['sentry_organization']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='organization',
                    name='is_test',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.RunSQL(
            sql='\n            ALTER TABLE "sentry_organizationmembermapping" DROP CONSTRAINT "sentry_organizationmembe_organization_id_email_66a560fc_uniq";\n            ALTER TABLE "sentry_organizationmembermapping" DROP CONSTRAINT "sentry_organizationmembe_organization_id_user_id_feb6bdf0_uniq";\n            ',
            reverse_sql='',
            hints={'tables': ['sentry_organizationmembermapping']},
        ),
        migrations.AddIndex(
            model_name='organizationmembermapping',
            index=models.Index(fields=['organization_id', 'user'], name='sentry_orga_organiz_ae9fe7_idx'),
        ),
        migrations.AddIndex(
            model_name='organizationmembermapping',
            index=models.Index(fields=['organization_id', 'email'], name='sentry_orga_organiz_7de26b_idx'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterUniqueTogether(
                    name='organizationmembermapping',
                    unique_together={('organization_id', 'organizationmember_id')},
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0492_pickle_to_json_sentry_groupedmessage._backfill,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupedmessage']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0493_pickle_to_json_sentry_activity._backfill,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_activity']},
        # ),
        migrations.AddField(
            model_name='monitorcheckin',
            name='trace_id',
            field=sentry.db.models.fields.uuid.UUIDField(max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='artifactbundle',
            name='date_last_modified',
            field=models.DateTimeField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='user',
                    name='id',
                    field=sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False),
                ),
            ],
        ),
        migrations.AddField(
            model_name='pullrequestcomment',
            name='reactions',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='project',
                    name='flags',
                    field=bitfield.models.BitField(['has_releases', 'has_issue_alerts_targeting', 'has_transactions', 'has_alert_filters', 'has_sessions', 'has_profiles', 'has_replays', 'spike_protection_error_currently_active', 'spike_protection_transaction_currently_active', 'spike_protection_attachment_currently_active', 'has_minified_stack_trace', 'has_cron_monitors', 'has_cron_checkins'], default=10, null=True),
                ),
                migrations.AlterField(
                    model_name='projectkey',
                    name='roles',
                    field=bitfield.models.BitField(['store', 'api'], default=1, null=None),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='organization',
                    name='flags',
                    field=bitfield.models.BitField(['allow_joinleave', 'enhanced_privacy', 'disable_shared_issues', 'early_adopter', 'require_2fa', 'disable_new_visibility_features', 'require_email_verification', 'codecov_access'], default=1),
                ),
                migrations.AlterField(
                    model_name='projectkey',
                    name='roles',
                    field=bitfield.models.BitField(['store', 'api'], default=1),
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0500_set_none_date_last_modified_to_date_uploaded.copy_date_uploaded_to_date_last_modified,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_artifactbundle']},
        # ),
        migrations.AlterField(
            model_name='apiauthorization',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin'], default=None),
        ),
        migrations.AlterField(
            model_name='apigrant',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin'], default=None),
        ),
        migrations.AlterField(
            model_name='apikey',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin'], default=None),
        ),
        migrations.AlterField(
            model_name='apitoken',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin'], default=None),
        ),
        migrations.AlterField(
            model_name='authprovider',
            name='flags',
            field=bitfield.models.BitField(['allow_unlinked', 'scim_enabled'], default=0),
        ),
        migrations.AlterField(
            model_name='organizationmember',
            name='flags',
            field=bitfield.models.BitField(['sso:linked', 'sso:invalid', 'member-limit:restricted', 'idp:provisioned', 'idp:role-restricted'], default=0),
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin'], default=None),
        ),
        migrations.AlterField(
            model_name='user',
            name='flags',
            field=bitfield.models.BitField(['newsletter_consent_prompt'], default=0, null=True),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0502_savedsearch_update_me_myteams.update_saved_search_query,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_savedsearch']},
        # ),
        migrations.AlterField(
            model_name='notificationsetting',
            name='target_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Actor', db_index=True, null=True, on_delete='CASCADE'),
        ),
        migrations.AddField(
            model_name='artifactbundle',
            name='indexing_state',
            field=models.IntegerField(default=None, null=True),
        ),
        migrations.CreateModel(
            name='ArtifactBundleIndex',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('release_name', models.CharField(max_length=250)),
                ('dist_name', models.CharField(default='', max_length=64)),
                ('url', models.TextField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_last_modified', models.DateTimeField(default=django.utils.timezone.now)),
                ('artifact_bundle', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.artifactbundle')),
            ],
            options={
                'db_table': 'sentry_artifactbundleindex',
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_projectdsymfile" ADD COLUMN "date_accessed" timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_projectdsymfile" DROP COLUMN "date_accessed";\n                    ',
                    hints={'tables': ['sentry_projectdsymfile']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='projectdebugfile',
                    name='date_accessed',
                    field=models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='assistantactivity',
            name='useful',
            field=models.BooleanField(null=True),
        ),
        migrations.AlterField(
            model_name='deploy',
            name='notified',
            field=models.BooleanField(db_index=True, default=False, null=True),
        ),
        migrations.AlterField(
            model_name='environmentproject',
            name='is_hidden',
            field=models.BooleanField(null=True),
        ),
        migrations.AlterField(
            model_name='group',
            name='is_public',
            field=models.BooleanField(default=False, null=True),
        ),
        migrations.AlterField(
            model_name='relay',
            name='is_internal',
            field=models.BooleanField(default=None, null=True),
        ),
        migrations.AlterField(
            model_name='savedsearch',
            name='is_global',
            field=models.BooleanField(db_index=True, default=False, null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_sentry_app',
            field=models.BooleanField(default=None, null=True),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0507_delete_pending_deletion_rules.delete_rules,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_rule']},
        # ),
        migrations.AlterField(
            model_name='apigrant',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin', 'openid', 'profile', 'email'], default=None),
        ),
        migrations.AddIndex(
            model_name='monitorcheckin',
            index=models.Index(fields=['monitor_environment', 'date_added', 'status'], name='sentry_moni_monitor_1fb26c_idx'),
        ),
        migrations.AddIndex(
            model_name='monitorcheckin',
            index=models.Index(fields=['trace_id'], name='sentry_moni_trace_i_c63ea4_idx'),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0511_pickle_to_json_sentry_rawevent._backfill,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_rawevent']},
        # ),
        migrations.CreateModel(
            name='ProguardArtifactRelease',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('release_name', models.CharField(max_length=250)),
                ('proguard_uuid', models.UUIDField(db_index=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('project_debug_file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.projectdebugfile')),
            ],
            options={
                'db_table': 'sentry_proguardartifactrelease',
                'unique_together': {('project_id', 'release_name', 'proguard_uuid')},
            },
        ),
        migrations.AlterField(
            model_name='releaseactivity',
            name='data',
            field=models.JSONField(default=dict),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0514_migrate_priority_saved_searches.migrate_saved_searches,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_savedsearch']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0515_slugify_invalid_monitors.migrate_monitor_slugs,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_monitor']},
        # ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='pagerdutyservice',
                    name='organization_integration_id',
                ),
                migrations.AddField(
                    model_name='pagerdutyservice',
                    name='organization_integration',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, default=-1, on_delete=django.db.models.deletion.CASCADE, to='sentry.organizationintegration'),
                    preserve_default=False,
                ),
                migrations.AlterField(
                    model_name='pagerdutyservice',
                    name='organization_id',
                    field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE'),
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0517_backfill_pagerdutyservices_into_org_integrations.backfill_pagerdutyservices,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_organizationintegration']},
        # ),
        migrations.AlterField(
            model_name='projectartifactbundle',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
        ),
        migrations.AlterField(
            model_name='releaseartifactbundle',
            name='dist_name',
            field=models.CharField(default='', max_length=64),
        ),
        migrations.AlterField(
            model_name='releaseartifactbundle',
            name='release_name',
            field=models.CharField(max_length=250),
        ),
        migrations.AlterUniqueTogether(
            name='debugidartifactbundle',
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name='projectartifactbundle',
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name='releaseartifactbundle',
            unique_together=set(),
        ),
        migrations.AddIndex(
            model_name='artifactbundleindex',
            index=models.Index(fields=['url', 'artifact_bundle'], name='sentry_arti_url_7e628a_idx'),
        ),
        migrations.AddIndex(
            model_name='debugidartifactbundle',
            index=models.Index(fields=['debug_id', 'artifact_bundle'], name='sentry_debu_debug_i_8c6c44_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='repository',
            unique_together={('organization_id', 'provider', 'external_id')},
        ),
        migrations.CreateModel(
            name='ArtifactBundleFlatFileIndex',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('release_name', models.CharField(max_length=250)),
                ('dist_name', models.CharField(default='', max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('flat_file_index', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.file')),
            ],
            options={
                'db_table': 'sentry_artifactbundleflatfileindex',
            },
        ),
        migrations.CreateModel(
            name='FlatFileIndexState',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('indexing_state', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('artifact_bundle', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.artifactbundle')),
                ('flat_file_index', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.artifactbundleflatfileindex')),
            ],
            options={
                'db_table': 'sentry_flatfileindexstate',
            },
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0521_migrate_world_map_widgets.migrate_worldmap_widgets_to_table_widgets,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_dashboardwidgetquery', 'sentry_dashboardwidget']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0522_migrate_discover_savedquery_worldmaps.migrate_savedquery_worldmap_display_to_totalPeriod,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_discoversavedquery']},
        # ),
        migrations.RemoveIndex(
            model_name='monitorcheckin',
            name='sentry_moni_timeout_0a5bdf_idx',
        ),
        migrations.AddIndex(
            model_name='monitorcheckin',
            index=models.Index(fields=['status', 'timeout_at'], name='sentry_moni_status_fe7282_idx'),
        ),
        migrations.AddField(
            model_name='monitorenvironment',
            name='next_checkin_latest',
            field=models.DateTimeField(null=True),
        ),
        migrations.AddIndex(
            model_name='monitorenvironment',
            index=models.Index(fields=['status', 'next_checkin_latest'], name='sentry_moni_status_9f06fe_idx'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_pullrequest_comment" ADD COLUMN "comment_type" integer NOT NULL DEFAULT 0;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_pullrequest_comment" DROP COLUMN "comment_type";\n                    ',
                    hints={'tables': ['sentry_pullrequest_comment']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='pullrequestcomment',
                    name='comment_type',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
                migrations.AlterField(
                    model_name='pullrequestcomment',
                    name='pull_request',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.pullrequest'),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='pullrequestcomment',
            unique_together={('pull_request', 'comment_type')},
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0527_backfill_next_checkin_latest.backfill_next_checkin_latest,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_monitorenvironment']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0528_truncate_flat_index.delete_flat_files,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_flatfileindexstate', 'sentry_artifactbundleflatfileindex']},
        # ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(
                    name='PagerDutyService',
                ),
            ],
        ),
        migrations.CreateModel(
            name='NotificationSettingProvider',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('scope_type', models.CharField(max_length=32)),
                ('scope_identifier', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('team_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Team', db_index=True, null=True, on_delete='CASCADE')),
                ('type', models.CharField(max_length=32)),
                ('value', models.CharField(max_length=32)),
                ('provider', models.CharField(max_length=32)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_notificationsettingprovider',
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('team_id__isnull', False), ('user_id__isnull', True)), models.Q(('team_id__isnull', True), ('user_id__isnull', False)), _connector='OR'), name='notification_setting_provider_team_or_user_check')],
                'unique_together': {('scope_type', 'scope_identifier', 'user_id', 'team_id', 'provider', 'type')},
            },
        ),
        migrations.CreateModel(
            name='NotificationSettingOption',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('scope_type', models.CharField(max_length=32)),
                ('scope_identifier', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('team_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Team', db_index=True, null=True, on_delete='CASCADE')),
                ('type', models.CharField(max_length=32)),
                ('value', models.CharField(max_length=32)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_notificationsettingoption',
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('team_id__isnull', False), ('user_id__isnull', True)), models.Q(('team_id__isnull', True), ('user_id__isnull', False)), _connector='OR'), name='notification_setting_option_team_or_user_check')],
                'unique_together': {('scope_type', 'scope_identifier', 'user_id', 'team_id', 'type')},
            },
        ),
        migrations.AddField(
            model_name='incidentactivity',
            name='notification_uuid',
            field=models.UUIDField(null=True),
        ),
        migrations.AddField(
            model_name='externalactor',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.team'),
        ),
        migrations.AddField(
            model_name='externalactor',
            name='user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE'),
        ),
        migrations.AlterUniqueTogether(
            name='externalactor',
            unique_together={('organization', 'provider', 'external_name', 'actor'), ('organization', 'provider', 'external_name', 'team_id'), ('organization', 'provider', 'external_name', 'user_id')},
        ),
        migrations.AlterUniqueTogether(
            name='artifactbundleflatfileindex',
            unique_together={('project_id', 'release_name', 'dist_name')},
        ),
        migrations.AlterUniqueTogether(
            name='flatfileindexstate',
            unique_together={('flat_file_index', 'artifact_bundle')},
        ),
        migrations.AddField(
            model_name='rulefirehistory',
            name='notification_uuid',
            field=models.UUIDField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_controloutbox" ADD COLUMN "date_added" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_controloutbox" DROP COLUMN "date_added"\n                    ',
                    hints={'tables': ['sentry_controloutbox']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_regionoutbox" ADD COLUMN "date_added" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_regionoutbox" DROP COLUMN "date_added"\n                    ',
                    hints={'tables': ['sentry_regionoutbox']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='controloutbox',
                    name='date_added',
                    field=models.DateTimeField(default=django.utils.timezone.now, editable=False),
                ),
                migrations.AddField(
                    model_name='regionoutbox',
                    name='date_added',
                    field=models.DateTimeField(default=django.utils.timezone.now, editable=False),
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0537_backfill_xactor_team_and_user_ids.backfill_xactor,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_externalactor', 'sentry_actor']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0538_remove_name_data_from_rule.remove_name_data,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_rule']},
        # ),
        migrations.AddField(
            model_name='monitorenvironment',
            name='last_state_change',
            field=models.DateTimeField(null=True),
        ),
        migrations.CreateModel(
            name='ReleaseThreshold',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('threshold_type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('trigger_type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('value', models.IntegerField()),
                ('window_in_seconds', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.environment')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AuthProviderReplica',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('auth_provider_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.AuthProvider', db_index=True, on_delete='CASCADE', unique=True)),
                ('provider', models.CharField(max_length=128)),
                ('config', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('default_role', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=50)),
                ('default_global_access', models.BooleanField(default=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization', unique=True)),
                ('allow_unlinked', models.BooleanField()),
                ('scim_enabled', models.BooleanField()),
            ],
            options={
                'db_table': 'sentry_authproviderreplica',
            },
        ),
        migrations.CreateModel(
            name='AuthIdentityReplica',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('auth_identity_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.AuthIdentity', db_index=True, on_delete='CASCADE', unique=True)),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, on_delete='CASCADE')),
                ('auth_provider_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.AuthProvider', db_index=True, on_delete='CASCADE')),
                ('ident', models.CharField(max_length=128)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_authidentityreplica',
                'unique_together': {('auth_provider_id', 'ident'), ('auth_provider_id', 'user_id')},
            },
        ),
        migrations.AlterField(
            model_name='flatfileindexstate',
            name='indexing_state',
            field=models.IntegerField(db_index=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='artifactbundleflatfileindex',
                    name='flat_file_index',
                ),
            ],
        ),
        migrations.AddField(
            model_name='groupsubscription',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.team'),
        ),
        migrations.AlterField(
            model_name='groupsubscription',
            name='user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE'),
        ),
        migrations.AlterUniqueTogether(
            name='groupsubscription',
            unique_together={('group', 'team'), ('group', 'user_id')},
        ),
        migrations.AddConstraint(
            model_name='groupsubscription',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('team_id__isnull', False), ('user_id__isnull', True)), models.Q(('team_id__isnull', True), ('user_id__isnull', False)), _connector='OR'), name='subscription_team_or_user_check'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE sentry_groupsubscription DROP CONSTRAINT IF EXISTS subscription_team_or_user_check;\n                    ALTER TABLE sentry_groupsubscription DROP COLUMN IF EXISTS team_id;\n                    ',
                    reverse_sql='\n                    ALTER TABLE sentry_groupsubscription ADD COLUMN team_id BIGINT NULL;\n                    ALTER TABLE sentry_groupsubscription ADD CONSTRAINT "subscription_team_or_user_check" CHECK (team_id IS NOT NULL AND user_id IS NULL OR team_id IS NULL AND user_id IS NOT NULL);\n                    ',
                    hints={'tables': ['sentry_groupsubscription']},
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='groupsubscription',
                    name='team',
                ),
                migrations.RemoveConstraint(
                    model_name='groupsubscription',
                    name='subscription_team_or_user_check',
                ),
                migrations.AlterUniqueTogether(
                    name='groupsubscription',
                    unique_together={('group', 'user_id')},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_authidentityreplica" ADD COLUMN IF NOT EXISTS "last_verified" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW();\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_authidentityreplica" DROP COLUMN "last_verified";\n                    ',
                    hints={'tables': ['sentry_authidentityreplica']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='authidentityreplica',
                    name='last_verified',
                    field=models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0546_backfill_fix_bad_xactors.backfill_xactor,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_externalactor', 'sentry_actor']},
        # ),
        migrations.AddField(
            model_name='commitfilechange',
            name='language',
            field=models.CharField(default=None, max_length=255, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "auth_user" ADD COLUMN "is_unclaimed" boolean NOT NULL DEFAULT FALSE;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "auth_user" DROP COLUMN "is_unclaimed";\n                    ',
                    hints={'tables': ['auth_user']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='user',
                    name='is_unclaimed',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AddField(
            model_name='groupsubscription',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.team'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_groupsubscription" ALTER COLUMN "user_id" DROP NOT NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_groupsubscription" ALTER COLUMN "user_id" SET NOT NULL;\n                    ',
                    hints={'tables': ['sentry_groupsubscription']},
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name='groupsubscription',
                    name='user_id',
                    field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE'),
                ),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='groupsubscription',
            unique_together={('group', 'team'), ('group', 'user_id')},
        ),
        migrations.AddConstraint(
            model_name='groupsubscription',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('team_id__isnull', False), ('user_id__isnull', True)), models.Q(('team_id__isnull', True), ('user_id__isnull', False)), _connector='OR'), name='subscription_team_or_user_check'),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0550_migrate_no_action_dupe_issue_alerts.migrate_bad_rules,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_rule']},
        # ),
        migrations.AlterField(
            model_name='externalactor',
            name='actor',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.actor'),
        ),
        migrations.AlterUniqueTogether(
            name='externalactor',
            unique_together={('organization', 'provider', 'external_name', 'team_id'), ('organization', 'provider', 'external_name', 'user_id')},
        ),
        migrations.AddConstraint(
            model_name='externalactor',
            constraint=models.CheckConstraint(condition=models.Q(('user_id__isnull', False), ('team_id__isnull', False), _connector='OR'), name='external_actor_team_or_user'),
        ),
        migrations.CreateModel(
            name='TeamReplica',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('team_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Team', db_index=True, on_delete='CASCADE')),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE')),
                ('slug', models.SlugField()),
                ('name', models.CharField(max_length=64)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('org_role', models.CharField(max_length=32, null=True)),
            ],
            options={
                'db_table': 'sentry_teamreplica',
                'unique_together': {('organization_id', 'slug')},
            },
        ),
        migrations.CreateModel(
            name='NeglectedRule',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('disable_date', models.DateTimeField()),
                ('opted_out', models.BooleanField(default=False)),
                ('sent_initial_email_date', models.DateTimeField(null=True)),
                ('sent_final_email_date', models.DateTimeField(null=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
                ('rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.rule')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmapping" ADD COLUMN "require_2fa" boolean NOT NULL DEFAULT FALSE;\n                    ',
                    reverse_sql='\n            ALTER TABLE "sentry_organizationmapping" DROP COLUMN "require_2fa";\n            ',
                    hints={'tables': ['sentry_organizationmapping']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='organizationmapping',
                    name='require_2fa',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='releasethreshold',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='release_thresholds', to='sentry.project'),
        ),
        migrations.CreateModel(
            name='OrganizationMemberTeamReplica',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedAutoField(primary_key=True, serialize=False)),
                ('team_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Team', db_index=True, on_delete='CASCADE')),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE')),
                ('organizationmember_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('organizationmemberteam_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('is_active', models.BooleanField()),
                ('role', models.CharField(blank=True, max_length=32, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_organizationmember_teamsreplica',
                'unique_together': {('team_id', 'organizationmember_id', 'organization_id')},
            },
        ),
        migrations.CreateModel(
            name='CustomDynamicSamplingRule',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('is_org_level', models.BooleanField(default=False)),
                ('rule_id', models.IntegerField(default=0)),
                ('condition', models.TextField()),
                ('sample_rate', models.FloatField(default=0.0)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField()),
                ('num_samples', models.IntegerField()),
                ('condition_hash', models.CharField(max_length=40)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_customdynamicsamplingrule',
            },
        ),
        migrations.CreateModel(
            name='CustomDynamicSamplingRuleProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('custom_dynamic_sampling_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.customdynamicsamplingrule')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_customdynamicsamplingruleproject',
                'unique_together': {('custom_dynamic_sampling_rule', 'project')},
            },
        ),
        migrations.AddField(
            model_name='customdynamicsamplingrule',
            name='projects',
            field=models.ManyToManyField(related_name='custom_dynamic_sampling_rules', through='sentry.CustomDynamicSamplingRuleProject', to='sentry.project'),
        ),
        migrations.AddIndex(
            model_name='customdynamicsamplingrule',
            index=models.Index(condition=models.Q(('is_active', True)), fields=['organization'], name='org_idx'),
        ),
        migrations.AddIndex(
            model_name='customdynamicsamplingrule',
            index=models.Index(condition=models.Q(('is_active', True)), fields=['end_date'], name='end_date_idx'),
        ),
        migrations.AddIndex(
            model_name='customdynamicsamplingrule',
            index=models.Index(condition=models.Q(('is_active', True)), fields=['condition_hash'], name='condition_hash_idx'),
        ),
        migrations.CreateModel(
            name='MonitorIncident',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('starting_timestamp', models.DateTimeField(null=True)),
                ('resolving_timestamp', models.DateTimeField(null=True)),
                ('grouphash', models.CharField(max_length=32)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('monitor', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.monitor')),
                ('monitor_environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.monitorenvironment')),
                ('resolving_checkin', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resolved_incidents', to='sentry.monitorcheckin')),
                ('starting_checkin', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_incidents', to='sentry.monitorcheckin')),
            ],
            options={
                'db_table': 'sentry_monitorincident',
            },
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0561_backfill_new_notification_tables.backfill_notification_settings,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_notificationsetting', 'sentry_notificationsettingoption', 'sentry_notificationsettingprovider']},
        # ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='externalactor',
                    name='actor',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='commitfilechange',
                    name='language',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_commitfilechange" DROP COLUMN "language";\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_commitfilechange" ADD COLUMN "language" varchar(255) NULL;\n                    ',
                    hints={'tables': ['sentry_commitfilechange']},
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0565_fix_diff_env_dupe_alerts.fix_diff_env_rules,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_rule']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0566_remove_cron_missed_margins_zero.remove_missed_margins_zero,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_monitor']},
        # ),
        migrations.CreateModel(
            name='OrganizationSlugReservation',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('slug', models.SlugField(unique=True)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('user_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('region_name', models.CharField(max_length=48)),
                ('reservation_type', sentry.db.models.fields.bounded.BoundedBigIntegerField(default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
            ],
            options={
                'db_table': 'sentry_organizationslugreservation',
                'unique_together': {('organization_id', 'reservation_type')},
            },
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0568_monitors_fix_next_checkin_latest.fix_next_checkin_latest,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_monitor']},
        # ),
        migrations.AddField(
            model_name='dashboardwidget',
            name='thresholds',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_repository" ADD COLUMN "languages" TEXT[] NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_repository" DROP COLUMN "languages";\n                    ',
                    hints={'tables': ['sentry_repository']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='repository',
                    name='languages',
                    field=sentry.db.models.fields.array.ArrayField(null=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='organizationslugreservation',
                    name='organization_id',
                    field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.organization', db_index=True, on_delete='CASCADE'),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['project', 'first_release'], name='sentry_grou_project_4662d9_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['project', 'id'], name='sentry_grou_project_41a5ce_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['project', 'status', 'last_seen', 'id'], name='sentry_grou_project_81a5ed_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['project', 'status', 'type', 'last_seen', 'id'], name='sentry_grou_project_17d28d_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['project', 'status', 'substatus', 'last_seen', 'id'], name='sentry_grou_project_5eb75b_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['project', 'status', 'substatus', 'type', 'last_seen', 'id'], name='sentry_grou_project_ff3fdf_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['project', 'status', 'substatus', 'id'], name='sentry_grou_project_5acaf7_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['status', 'substatus', 'id'], name='sentry_grou_status_48b516_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['status', 'substatus', 'first_seen'], name='sentry_grou_status_e07f40_idx'),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0574_backfill_weekly_report_settings.backfill_weekly_report_settings,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_useroption', 'sentry_notificationsettingoption']},
        # ),
        migrations.AlterField(
            model_name='apiauthorization',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin', 'org:integrations'], default=None),
        ),
        migrations.AlterField(
            model_name='apikey',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin', 'org:integrations'], default=None),
        ),
        migrations.AlterField(
            model_name='apitoken',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin', 'org:integrations'], default=None),
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin', 'org:integrations'], default=None),
        ),
        migrations.AddField(
            model_name='customdynamicsamplingrule',
            name='created_by_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', blank=True, db_index=True, null=True, on_delete='CASCADE'),
        ),
        migrations.AddField(
            model_name='customdynamicsamplingrule',
            name='query',
            field=models.TextField(null=True),
        ),
        migrations.AddIndex(
            model_name='incidenttrigger',
            index=models.Index(fields=['alert_rule_trigger', 'incident_id'], name='sentry_inci_alert_r_33da01_idx'),
        ),
        migrations.AlterField(
            model_name='releasethreshold',
            name='window_in_seconds',
            field=models.PositiveIntegerField(),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.team'),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL'),
        ),
        migrations.AddIndex(
            model_name='monitorcheckin',
            index=models.Index(fields=['monitor', 'status', 'date_added'], name='sentry_moni_monitor_7ed5ce_idx'),
        ),
        migrations.AddIndex(
            model_name='monitorcheckin',
            index=models.Index(fields=['monitor_environment', 'status', 'date_added'], name='sentry_moni_monitor_d75fdf_idx'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmapping" ADD COLUMN "early_adopter" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                ALTER TABLE "sentry_organizationmapping" DROP COLUMN "early_adopter";\n                ',
                    hints={'tables': ['sentry_organizationmapping']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmapping" ADD COLUMN "allow_joinleave" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                ALTER TABLE "sentry_organizationmapping" DROP COLUMN "allow_joinleave";\n                ',
                    hints={'tables': ['sentry_organizationmapping']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmapping" ADD COLUMN "enhanced_privacy" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                ALTER TABLE "sentry_organizationmapping" DROP COLUMN "enhanced_privacy";\n                ',
                    hints={'tables': ['sentry_organizationmapping']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmapping" ADD COLUMN "disable_shared_issues" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                ALTER TABLE "sentry_organizationmapping" DROP COLUMN "disable_shared_issues";\n                ',
                    hints={'tables': ['sentry_organizationmapping']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmapping" ADD COLUMN "disable_new_visibility_features" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                ALTER TABLE "sentry_organizationmapping" DROP COLUMN "disable_new_visibility_features";\n                ',
                    hints={'tables': ['sentry_organizationmapping']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmapping" ADD COLUMN "require_email_verification" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                ALTER TABLE "sentry_organizationmapping" DROP COLUMN "require_email_verification";\n                ',
                    hints={'tables': ['sentry_organizationmapping']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmapping" ADD COLUMN "codecov_access" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                ALTER TABLE "sentry_organizationmapping" DROP COLUMN "codecov_access";\n                ',
                    hints={'tables': ['sentry_organizationmapping']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='organizationmapping',
                    name='early_adopter',
                    field=models.BooleanField(default=False),
                ),
                migrations.AddField(
                    model_name='organizationmapping',
                    name='allow_joinleave',
                    field=models.BooleanField(default=False),
                ),
                migrations.AddField(
                    model_name='organizationmapping',
                    name='enhanced_privacy',
                    field=models.BooleanField(default=False),
                ),
                migrations.AddField(
                    model_name='organizationmapping',
                    name='disable_shared_issues',
                    field=models.BooleanField(default=False),
                ),
                migrations.AddField(
                    model_name='organizationmapping',
                    name='disable_new_visibility_features',
                    field=models.BooleanField(default=False),
                ),
                migrations.AddField(
                    model_name='organizationmapping',
                    name='require_email_verification',
                    field=models.BooleanField(default=False),
                ),
                migrations.AddField(
                    model_name='organizationmapping',
                    name='codecov_access',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AddField(
            model_name='apitoken',
            name='name',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='apitoken',
            name='token_last_characters',
            field=models.CharField(max_length=4, null=True),
        ),
        migrations.AlterField(
            model_name='organizationmember',
            name='flags',
            field=bitfield.models.BitField(['sso:linked', 'sso:invalid', 'member-limit:restricted', 'idp:provisioned', 'idp:role-restricted', 'partnership:restricted'], default=0),
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField(['has_releases', 'has_issue_alerts_targeting', 'has_transactions', 'has_alert_filters', 'has_sessions', 'has_profiles', 'has_replays', 'has_feedbacks', 'spike_protection_error_currently_active', 'spike_protection_transaction_currently_active', 'spike_protection_attachment_currently_active', 'has_minified_stack_trace', 'has_cron_monitors', 'has_cron_checkins'], default=10, null=True),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0587_remove_unused_neglectedrule_rows.remove_unused_neglectedrule_rows,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_neglectedrule']},
        # ),
        migrations.CreateModel(
            name='Relocation',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('creator', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
                ('owner', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
                ('uuid', sentry.db.models.fields.uuid.UUIDField(db_index=True, default=sentry.relocation.models.relocation.default_guid, max_length=32, unique=True)),
                ('step', models.SmallIntegerField(default=None)),
                ('status', models.SmallIntegerField(default=0)),
                ('want_org_slugs', models.JSONField(default=list)),
                ('want_usernames', models.JSONField(null=True)),
                ('latest_notified', models.SmallIntegerField(default=None, null=True)),
                ('latest_task', models.CharField(default='', max_length=64)),
                ('latest_task_attempts', models.SmallIntegerField(default=0)),
                ('failure_reason', models.CharField(default=None, max_length=256, null=True)),
            ],
            options={
                'db_table': 'sentry_relocation',
            },
        ),
        migrations.CreateModel(
            name='RelocationValidation',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('status', models.SmallIntegerField(default=0)),
                ('attempts', models.SmallIntegerField(default=0)),
                ('relocation', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.relocation')),
            ],
            options={
                'db_table': 'sentry_relocationvalidation',
            },
        ),
        migrations.CreateModel(
            name='RelocationValidationAttempt',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('status', models.SmallIntegerField(default=0)),
                ('build_id', sentry.db.models.fields.uuid.UUIDField(db_index=True, max_length=32, unique=True)),
                ('relocation', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.relocation')),
                ('relocation_validation', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.relocationvalidation')),
            ],
            options={
                'db_table': 'sentry_relocationvalidationattempt',
            },
        ),
        migrations.CreateModel(
            name='RelocationFile',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('kind', models.SmallIntegerField()),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.file')),
                ('relocation', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.relocation')),
            ],
            options={
                'db_table': 'sentry_relocationfile',
                'unique_together': {('relocation', 'file')},
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_sentryapp" ADD COLUMN "metadata" json NOT NULL DEFAULT \'{}\';\n                    ',
                    reverse_sql='\n                        ALTER TABLE "sentry_sentryapp" DROP COLUMN "metadata";\n                    ',
                    hints={'tables': ['sentry_sentryapp']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='sentryapp',
                    name='metadata',
                    field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_relocation" ADD COLUMN "creator_id" bigint NOT NULL;\n                    ALTER TABLE "sentry_relocation" ADD COLUMN "owner_id" bigint NOT NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_relocation" DROP COLUMN "creator_id";\n                    ALTER TABLE "sentry_relocation" DROP COLUMN "owner_id";\n                    ',
                    hints={'tables': ['sentry_relocation']},
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='relocation',
                    name='creator',
                ),
                migrations.RemoveField(
                    model_name='relocation',
                    name='owner',
                ),
                migrations.AddField(
                    model_name='relocation',
                    name='creator_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
                ),
                migrations.AddField(
                    model_name='relocation',
                    name='owner_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_relocation" DROP COLUMN "creator";\n                    ALTER TABLE "sentry_relocation" DROP COLUMN "owner";\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_relocation" ADD COLUMN "creator" int NULL;\n                    ALTER TABLE "sentry_relocation" ADD COLUMN "owner" int NULL;\n                    ',
                    hints={'tables': ['sentry_relocation']},
                ),
            ],
        ),
        migrations.AddField(
            model_name='customdynamicsamplingrule',
            name='notification_sent',
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='eventattachment',
            name='blob_path',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='eventattachment',
            name='content_type',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='eventattachment',
            name='sha1',
            field=models.CharField(max_length=40, null=True),
        ),
        migrations.AddField(
            model_name='eventattachment',
            name='size',
            field=sentry.db.models.fields.bounded.BoundedIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='eventattachment',
            name='file_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='eventattachment',
            unique_together=set(),
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField(['has_releases', 'has_issue_alerts_targeting', 'has_transactions', 'has_alert_filters', 'has_sessions', 'has_profiles', 'has_replays', 'has_feedbacks', 'spike_protection_error_currently_active', 'spike_protection_transaction_currently_active', 'spike_protection_attachment_currently_active', 'has_minified_stack_trace', 'has_cron_monitors', 'has_cron_checkins', 'has_sourcemaps'], default=10, null=True),
        ),
        migrations.CreateModel(
            name='ControlImportChunk',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('import_uuid', sentry.db.models.fields.uuid.UUIDField(db_index=True, max_length=32)),
                ('model', models.CharField(db_index=True, max_length=64)),
                ('min_ordinal', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('max_ordinal', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('min_source_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('max_source_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('min_inserted_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('max_inserted_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('inserted_map', models.JSONField(default=dict)),
                ('existing_map', models.JSONField(default=dict)),
                ('overwrite_map', models.JSONField(default=dict)),
                ('inserted_identifiers', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'sentry_controlimportchunk',
                'unique_together': {('import_uuid', 'model', 'min_ordinal')},
            },
        ),
        migrations.CreateModel(
            name='ControlImportChunkReplica',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('import_uuid', sentry.db.models.fields.uuid.UUIDField(db_index=True, max_length=32)),
                ('model', models.CharField(db_index=True, max_length=64)),
                ('min_ordinal', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('max_ordinal', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('min_source_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('max_source_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('min_inserted_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('max_inserted_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('inserted_map', models.JSONField(default=dict)),
                ('existing_map', models.JSONField(default=dict)),
                ('overwrite_map', models.JSONField(default=dict)),
                ('inserted_identifiers', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'sentry_controlimportchunkreplica',
                'unique_together': {('import_uuid', 'model', 'min_ordinal')},
            },
        ),
        migrations.CreateModel(
            name='RegionImportChunk',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('import_uuid', sentry.db.models.fields.uuid.UUIDField(db_index=True, max_length=32)),
                ('model', models.CharField(db_index=True, max_length=64)),
                ('min_ordinal', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('max_ordinal', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('min_source_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('max_source_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('min_inserted_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('max_inserted_pk', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('inserted_map', models.JSONField(default=dict)),
                ('existing_map', models.JSONField(default=dict)),
                ('overwrite_map', models.JSONField(default=dict)),
                ('inserted_identifiers', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'sentry_regionimportchunk',
                'unique_together': {('import_uuid', 'model', 'min_ordinal')},
            },
        ),
        migrations.AlterField(
            model_name='organizationslugreservation',
            name='user_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_externalactor" DROP COLUMN actor_id;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_externalactor" ADD COLUMN actor_id BIGINT NULL;\n                    ',
                    hints={'tables': ['sentry_externalactor']},
                ),
            ],
        ),
        migrations.AlterField(
            model_name='notificationsetting',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(
                    name='NotificationSetting',
                ),
            ],
        ),
        migrations.RunSQL(
            sql='\n                DROP TABLE IF EXISTS "sentry_notificationsetting";\n                ',
            reverse_sql='CREATE TABLE sentry_notificationsetting (fake_col int)',
            hints={'tables': ['sentry_notificationsetting']},
        ),
        migrations.CreateModel(
            name='RegressionGroup',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('date_regressed', models.DateTimeField()),
                ('date_resolved', models.DateTimeField(null=True)),
                ('version', models.IntegerField()),
                ('active', models.BooleanField(default=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('type', sentry.db.models.fields.bounded.BoundedIntegerField()),
                ('fingerprint', models.CharField(max_length=32)),
                ('baseline', models.FloatField()),
                ('regressed', models.FloatField()),
            ],
            options={
                'unique_together': {('type', 'project_id', 'fingerprint', 'version')},
                'indexes': [models.Index(fields=['type', 'project_id', 'fingerprint', 'active'], name='sentry_regr_type_3a29e7_idx')],
            },
        ),
        migrations.AddField(
            model_name='relocation',
            name='latest_unclaimed_emails_sent_at',
            field=models.DateTimeField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='relocation',
            name='scheduled_cancel_at_step',
            field=models.SmallIntegerField(default=None, null=True),
        ),
        migrations.AddField(
            model_name='relocation',
            name='scheduled_pause_at_step',
            field=models.SmallIntegerField(default=None, null=True),
        ),
        migrations.AddConstraint(
            model_name='relocation',
            constraint=models.CheckConstraint(condition=models.Q(('scheduled_pause_at_step__gt', models.F('step')), ('scheduled_pause_at_step__isnull', True), _connector='OR'), name='scheduled_pause_at_step_greater_than_current_step'),
        ),
        migrations.AddConstraint(
            model_name='relocation',
            constraint=models.CheckConstraint(condition=models.Q(('scheduled_cancel_at_step__gt', models.F('step')), ('scheduled_cancel_at_step__isnull', True), _connector='OR'), name='scheduled_cancel_at_step_greater_than_current_step'),
        ),
        migrations.CreateModel(
            name='DashboardWidgetQueryOnDemand',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('spec_hashes', sentry.db.models.fields.array.ArrayField(null=True)),
                ('extraction_state', models.CharField(max_length=30)),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now)),
                ('dashboard_widget_query', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.dashboardwidgetquery')),
            ],
            options={
                'db_table': 'sentry_dashboardwidgetqueryondemand',
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='userreport',
                    name='event_user_id',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_monitor" ADD COLUMN "is_muted" boolean NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_monitor" DROP COLUMN "is_muted";\n                    ',
                    hints={'tables': ['sentry_monitor']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='monitor',
                    name='is_muted',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                ALTER TABLE "sentry_userreport" DROP COLUMN "event_user_id";\n                ',
                    reverse_sql='\n                ALTER TABLE "sentry_userreport" ADD COLUMN "event_user_id" int NULL;\n                ',
                    hints={'tables': ['sentry_userreport']},
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0619_monitors_migrate_is_muted.migrate_is_muted,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_monitor']},
        # ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField(['has_releases', 'has_issue_alerts_targeting', 'has_transactions', 'has_alert_filters', 'has_sessions', 'has_profiles', 'has_replays', 'has_feedbacks', 'has_new_feedbacks', 'spike_protection_error_currently_active', 'spike_protection_transaction_currently_active', 'spike_protection_attachment_currently_active', 'has_minified_stack_trace', 'has_cron_monitors', 'has_cron_checkins', 'has_sourcemaps'], default=10, null=True),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0621_set_muted_monitors_to_active.set_muted_monitors_active,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_monitor']},
        # ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField(['has_releases', 'has_issue_alerts_targeting', 'has_transactions', 'has_alert_filters', 'has_sessions', 'has_profiles', 'has_replays', 'has_feedbacks', 'has_new_feedbacks', 'spike_protection_error_currently_active', 'spike_protection_transaction_currently_active', 'spike_protection_attachment_currently_active', 'has_minified_stack_trace', 'has_cron_monitors', 'has_cron_checkins', 'has_sourcemaps', 'has_custom_metrics'], default=10, null=True),
        ),
        migrations.AlterField(
            model_name='regressiongroup',
            name='fingerprint',
            field=models.CharField(max_length=64),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_monitorenvironment" ADD COLUMN "is_muted" boolean NOT NULL DEFAULT FALSE;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_monitorenvironment" DROP COLUMN "is_muted";\n                    ',
                    hints={'tables': ['sentry_monitorenvironment']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='monitorenvironment',
                    name='is_muted',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='rule',
            name='label',
            field=models.CharField(max_length=256),
        ),
        migrations.AlterField(
            model_name='organization',
            name='flags',
            field=bitfield.models.BitField(['allow_joinleave', 'enhanced_privacy', 'disable_shared_issues', 'early_adopter', 'require_2fa', 'disable_new_visibility_features', 'require_email_verification', 'codecov_access', 'disable_member_project_creation'], default=1),
        ),
        migrations.AlterField(
            model_name='dashboardtombstone',
            name='slug',
            field=sentry.db.models.fields.slug.SentrySlugField(db_index=False, max_length=255),
        ),
        migrations.AlterField(
            model_name='docintegration',
            name='slug',
            field=sentry.db.models.fields.slug.SentrySlugField(db_index=False, max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='monitor',
            name='slug',
            field=sentry.db.models.fields.slug.SentrySlugField(),
        ),
        migrations.AlterField(
            model_name='organization',
            name='slug',
            field=sentry.db.models.fields.slug.SentryOrgSlugField(unique=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='slug',
            field=sentry.db.models.fields.slug.SentrySlugField(null=True),
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='slug',
            field=sentry.db.models.fields.slug.SentrySlugField(db_index=False, max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='sentryfunction',
            name='slug',
            field=sentry.db.models.fields.slug.SentrySlugField(db_index=False, max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='team',
            name='slug',
            field=sentry.db.models.fields.slug.SentrySlugField(),
        ),
        migrations.AddIndex(
            model_name='monitorcheckin',
            index=models.Index(condition=models.Q(('status', 3)), fields=['monitor_environment', '-date_added'], name='consumer_latest'),
        ),
        migrations.AddIndex(
            model_name='monitorcheckin',
            index=models.Index(condition=models.Q(('status', 3)), fields=['monitor', '-date_added'], name='api_latest'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_groupedmessage" ADD COLUMN "priority" int NULL;\n                    ALTER TABLE "sentry_groupedmessage" ADD COLUMN "priority_locked" bool NOT NULL default false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_groupedmessage" DROP COLUMN "priority";\n                    ALTER TABLE "sentry_groupedmessage" DROP COLUMN "priority_locked";\n                    ',
                    hints={'tables': ['sentry_groupedmessage']},
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name='group',
                    name='priority',
                    field=models.PositiveSmallIntegerField(null=True),
                ),
                migrations.AlterField(
                    model_name='group',
                    name='priority_locked',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0632_apitoken_backfill_last_chars.backfill_last_token_characters,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_apitoken']},
        # ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_groupedmessage" DROP COLUMN "priority_locked";\n                    ALTER TABLE "sentry_groupedmessage" ADD COLUMN "priority_locked_at" timestamp with time zone NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_groupedmessage" ADD COLUMN "priority_locked" bool NOT NULL default false;\n                    ALTER TABLE "sentry_groupedmessage" DROP COLUMN "priority_locked_at";\n                    ',
                    hints={'tables': ['sentry_groupedmessage']},
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='group',
                    name='priority_locked',
                ),
                migrations.AddField(
                    model_name='group',
                    name='priority_locked_at',
                    field=models.DateTimeField(null=True),
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0634_backfill_github_webhook_outbox_shard_ids.backfill_webhook_outbox_shard_ids,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_controloutbox', 'sentry_integration']},
        # ),
        migrations.AddIndex(
            model_name='monitorincident',
            index=models.Index(fields=['monitor_environment', 'resolving_checkin'], name='sentry_moni_monitor_a24312_idx'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='ALTER TABLE IF EXISTS sentry_pullrequest_comment DROP CONSTRAINT IF EXISTS sentry_pullrequest_comment_pull_request_id_key',
                    reverse_sql='',
                    hints={'tables': ['sentry_pullrequest_comment']},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_dashboardwidgetqueryondemand" ADD COLUMN "date_added" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_dashboardwidgetqueryondemand" DROP COLUMN "date_added"\n                    ',
                    hints={'tables': ['sentry_dashboardwidgetqueryondemand']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='dashboardwidgetqueryondemand',
                    name='date_added',
                    field=models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
        ),
        migrations.AddField(
            model_name='dashboardwidgetqueryondemand',
            name='spec_version',
            field=models.IntegerField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_dashboardwidgetquery" ADD COLUMN "date_modified" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_dashboardwidgetquery" DROP COLUMN "date_modified"\n                    ',
                    hints={'tables': ['sentry_dashboardwidgetquery']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='dashboardwidgetquery',
                    name='date_modified',
                    field=models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0645_backfill_add_uuid_to_all_rule_actions.add_uuid_to_all_rule_actions,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_rule']},
        # ),
        migrations.CreateModel(
            name='NotificationMessage',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('error_details', sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ('error_code', models.IntegerField(db_index=True, null=True)),
                ('message_identifier', sentry.db.models.fields.text.CharField(null=True)),
                ('rule_action_uuid', sentry.db.models.fields.text.CharField(db_index=True, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.incident')),
                ('parent_notification_message', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.notificationmessage')),
                ('rule_fire_history', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.rulefirehistory')),
                ('trigger_action', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.alertruletriggeraction')),
            ],
            options={
                'db_table': 'sentry_notificationmessage',
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('incident__isnull', False), ('trigger_action__isnull', False), ('rule_action_uuid__isnull', True), ('rule_fire_history__isnull', True)), models.Q(('incident__isnull', True), ('trigger_action__isnull', True), ('rule_action_uuid__isnull', False), ('rule_fire_history__isnull', False)), _connector='OR'), name='notification_for_issue_xor_metric_alert'), models.UniqueConstraint(condition=models.Q(('error_code__isnull', True), ('incident__isnull', False), ('parent_notification_message__isnull', True), ('trigger_action__isnull', False)), fields=('incident', 'trigger_action'), name='singular_parent_message_per_incident_and_trigger_action'), models.UniqueConstraint(condition=models.Q(('error_code__isnull', True), ('parent_notification_message__isnull', True), ('rule_action_uuid__isnull', False), ('rule_fire_history__isnull', False)), fields=('rule_fire_history', 'rule_action_uuid'), name='singular_parent_message_per_rule_fire_history_and_rule_action')],
            },
        ),
        migrations.AddField(
            model_name='apitoken',
            name='hashed_refresh_token',
            field=models.CharField(max_length=128, null=True),
        ),
        migrations.AddField(
            model_name='apitoken',
            name='hashed_token',
            field=models.CharField(max_length=128, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AlterField(
                    model_name='monitorenvironment',
                    name='environment',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.environment'),
                ),
            ],
            state_operations=[
                migrations.AlterUniqueTogether(
                    name='monitorenvironment',
                    unique_together={('monitor', 'environment_id')},
                ),
                migrations.AddField(
                    model_name='monitorenvironment',
                    name='environment_id',
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                    preserve_default=False,
                ),
                migrations.RemoveField(
                    model_name='monitorenvironment',
                    name='environment',
                ),
            ],
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['project', 'status', 'priority', 'last_seen', 'id'], name='sentry_grou_project_4ac709_idx'),
        ),
        migrations.CreateModel(
            name='SentryShot',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('sentry_url', models.URLField()),
                ('component_identifier', models.CharField()),
                ('organization_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, on_delete='CASCADE')),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_sentryshot',
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_alertrule" ADD COLUMN "monitor_type" integer NOT NULL DEFAULT 0;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_alertrule" DROP COLUMN "monitor_type";\n                    ',
                    hints={'tables': ['sentry_alertrule']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='alertrule',
                    name='monitor_type',
                    field=models.IntegerField(default=sentry.incidents.models.alert_rule.AlertRuleMonitorTypeInt['CONTINUOUS']),
                ),
            ],
        ),
        migrations.AddField(
            model_name='querysubscription',
            name='query_extra',
            field=models.TextField(null=True),
        ),
        migrations.CreateModel(
            name='AlertRuleProjects',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.alertrule')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_alertruleprojects',
                'unique_together': {('alert_rule', 'project')},
            },
        ),
        migrations.AddField(
            model_name='alertrule',
            name='projects',
            field=models.ManyToManyField(related_name='alert_rule_projects', through='sentry.AlertRuleProjects', to='sentry.project'),
        ),
        migrations.CreateModel(
            name='AlertRuleActivationCondition',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('label', models.TextField()),
                ('condition_type', models.SmallIntegerField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activation_conditions', to='sentry.alertrule')),
            ],
            options={
                'db_table': 'sentry_alertruleactivationcondition',
                'unique_together': {('alert_rule', 'label')},
            },
        ),
        migrations.AddField(
            model_name='apitoken',
            name='token_type',
            field=models.CharField(max_length=7, null=True),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0654_rename_priority_sort_to_trends.rename_priority_sort_to_trends,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_savedsearch']},
        # ),
        migrations.AlterField(
            model_name='apitoken',
            name='refresh_token',
            field=models.CharField(default=sentry.models.apitoken.generate_token, max_length=71, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='apitoken',
            name='token',
            field=models.CharField(default=sentry.models.apitoken.generate_token, max_length=71, unique=True),
        ),
        migrations.AddField(
            model_name='dashboardwidget',
            name='discover_widget_split',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_alertruletriggeraction" ADD COLUMN "status" integer NOT NULL DEFAULT 0;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_alertruletriggeraction" DROP COLUMN "status";\n                    ',
                    hints={'tables': ['sentry_alertruletriggeraction']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='alertruletriggeraction',
                    name='status',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_projectkey" ADD COLUMN "use_case" VARCHAR(32) NOT NULL DEFAULT \'user\';\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_projectkey" DROP COLUMN "use_case";\n                    ',
                    hints={'tables': ['sentry_projectkey']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='projectkey',
                    name='use_case',
                    field=models.CharField(default='user', max_length=32),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='artifactbundleindex',
            name='date_last_modified',
            field=models.DateTimeField(default=django.utils.timezone.now, null=True),
        ),
        migrations.AlterField(
            model_name='artifactbundleindex',
            name='dist_name',
            field=models.CharField(default='', max_length=64, null=True),
        ),
        migrations.AlterField(
            model_name='artifactbundleindex',
            name='release_name',
            field=models.CharField(max_length=250, null=True),
        ),
        migrations.AlterField(
            model_name='flatfileindexstate',
            name='artifact_bundle',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.artifactbundle'),
        ),
        migrations.AlterField(
            model_name='flatfileindexstate',
            name='flat_file_index',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.artifactbundleflatfileindex'),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0660_fix_cron_monitor_invalid_orgs.fix_cron_monitor_invalid_orgs,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_monitor']},
        # ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='flatfileindexstate',
                    name='flat_file_index',
                ),
                migrations.AlterUniqueTogether(
                    name='flatfileindexstate',
                    unique_together=None,
                ),
                migrations.RemoveField(
                    model_name='flatfileindexstate',
                    name='artifact_bundle',
                ),
                migrations.RemoveField(
                    model_name='artifactbundleindex',
                    name='date_last_modified',
                ),
                migrations.RemoveField(
                    model_name='artifactbundleindex',
                    name='dist_name',
                ),
                migrations.RemoveField(
                    model_name='artifactbundleindex',
                    name='release_name',
                ),
                migrations.DeleteModel(
                    name='ArtifactBundleFlatFileIndex',
                ),
                migrations.DeleteModel(
                    name='FlatFileIndexState',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='monitorenvironment',
                    name='last_state_change',
                ),
            ],
        ),
        migrations.RunSQL(
            sql='\n            DROP TABLE "sentry_artifactbundleflatfileindex";\n            ',
            reverse_sql='CREATE TABLE sentry_artifactbundleflatfileindex (fake_col int);',
            hints={'tables': ['sentry_artifactbundleflatfileindex']},
        ),
        migrations.RunSQL(
            sql='\n            DROP TABLE "sentry_flatfileindexstate";\n            ',
            reverse_sql='CREATE TABLE sentry_flatfileindexstate (fake_col int);',
            hints={'tables': ['sentry_flatfileindexstate']},
        ),
        migrations.RunSQL(
            sql='\n                ALTER TABLE "sentry_artifactbundleindex" DROP COLUMN "release_name";\n                ALTER TABLE "sentry_artifactbundleindex" DROP COLUMN "dist_name";\n                ALTER TABLE "sentry_artifactbundleindex" DROP COLUMN "date_last_modified";\n                ',
            reverse_sql='\n                ALTER TABLE "sentry_artifactbundleindex" ADD COLUMN "release_name" varchar(250) NULL;\n                ALTER TABLE "sentry_artifactbundleindex" ADD COLUMN "dist_name" varchar(64) NULL;\n                ALTER TABLE "sentry_artifactbundleindex" ADD COLUMN "date_last_modified" timestamptz NULL;\n                ',
            hints={'tables': ['sentry_artifactbundleindex']},
        ),
        migrations.CreateModel(
            name='MonitorEnvBrokenDetection',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('detection_timestamp', models.DateTimeField(auto_now_add=True)),
                ('user_notified_timestamp', models.DateTimeField(db_index=True, null=True)),
                ('monitor_incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.monitorincident')),
            ],
            options={
                'db_table': 'sentry_monitorenvbrokendetection',
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                ALTER TABLE "sentry_monitorenvironment" DROP COLUMN "last_state_change";\n                ',
                    reverse_sql='\n                ALTER TABLE "sentry_monitorenvironment" ADD COLUMN "last_state_change" timestamptz;\n                ',
                    hints={'tables': ['sentry_monitorenvironment']},
                ),
            ],
        ),
        migrations.AlterField(
            model_name='monitorincident',
            name='grouphash',
            field=models.CharField(default=sentry.monitors.models.default_grouphash, max_length=32),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='team',
                    name='org_role',
                ),
            ],
        ),
        migrations.AddIndex(
            model_name='monitorincident',
            index=models.Index(condition=models.Q(('resolving_checkin__isnull', True)), fields=['starting_timestamp'], name='active_incident_idx'),
        ),
        migrations.CreateModel(
            name='AlertRuleActivations',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('finished_at', models.DateTimeField(null=True)),
                ('metric_value', models.FloatField()),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activations', to='sentry.alertrule')),
            ],
            options={
                'db_table': 'sentry_alertruleactivations',
            },
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0670_monitor_incident_cleanup_duplicates.remove_duplicate_incidents,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_monitorincident']},
        # ),
        migrations.AddConstraint(
            model_name='monitorincident',
            constraint=models.UniqueConstraint(condition=models.Q(('resolving_checkin__isnull', True)), fields=('monitor_environment_id',), name='unique_active_incident'),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0672_backfill_ukraine_timezone_name.backfill_ukraine_timezone_name,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_useroption']},
        # ),
        migrations.AddField(
            model_name='monitorenvbrokendetection',
            name='env_muted_timestamp',
            field=models.DateTimeField(db_index=True, null=True),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0674_monitor_clear_missed_timeout_as_error.clear_missed_timeout_as_error,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_monitorenvironment']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0675_dashboard_widget_query_rename_priority_sort_to_trends.rename_dashboard_widget_query_orderby_priority_to_trends,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_dashboardwidgetquery']},
        # ),
        migrations.AlterField(
            model_name='apitoken',
            name='hashed_refresh_token',
            field=models.CharField(max_length=128, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='apitoken',
            name='hashed_token',
            field=models.CharField(max_length=128, null=True, unique=True),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0677_unpickle_project_options_again._backfill,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_projectoptions']},
        # ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_dashboardwidgetquery" ADD COLUMN "is_hidden" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_dashboardwidgetquery" DROP COLUMN "is_hidden";\n                    ',
                    hints={'tables': ['sentry_dashboardwidgetquery']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='dashboardwidgetquery',
                    name='is_hidden',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AddField(
            model_name='alertruleactivations',
            name='query_subscription',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.querysubscription'),
        ),
        migrations.AlterField(
            model_name='alertruleactivations',
            name='metric_value',
            field=models.FloatField(null=True),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0680_unpickle_options_again._backfill_useroption,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_useroption']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0680_unpickle_options_again._backfill_organizationoption,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_organizationoptions']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0680_unpickle_options_again._backfill_controloption,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_controloption']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0680_unpickle_options_again._backfill_option,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_option']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0681_unpickle_authenticator_again._backfill_authenticator,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_authenticator']},
        # ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=['CREATE UNIQUE INDEX CONCURRENTLY "sentry_monitor_project_id_slug_1f4d3dc3_uniq" ON "sentry_monitor" ("project_id", "slug");', 'ALTER TABLE "sentry_monitor" ADD CONSTRAINT "sentry_monitor_project_id_slug_1f4d3dc3_uniq" UNIQUE USING INDEX "sentry_monitor_project_id_slug_1f4d3dc3_uniq";', 'CREATE INDEX CONCURRENTLY "sentry_moni_organiz_a62466_idx" ON "sentry_monitor" ("organization_id", "slug");', 'ALTER TABLE "sentry_monitor" DROP CONSTRAINT "sentry_monitor_organization_id_slug_c4ac3a42_uniq";'],
                    reverse_sql=['CREATE UNIQUE INDEX CONCURRENTLY "sentry_monitor_organization_id_slug_c4ac3a42_uniq" ON "sentry_monitor" ("organization_id", "slug");', 'ALTER TABLE "sentry_monitor" ADD CONSTRAINT "sentry_monitor_organization_id_slug_c4ac3a42_uniq" UNIQUE USING INDEX "sentry_monitor_organization_id_slug_c4ac3a42_uniq";', 'ALTER TABLE "sentry_monitor" DROP CONSTRAINT "sentry_monitor_project_id_slug_1f4d3dc3_uniq";', 'DROP INDEX CONCURRENTLY "sentry_moni_organiz_a62466_idx";'],
                    hints={'tables': ['sentry_monitor']},
                ),
            ],
            state_operations=[
                migrations.AlterUniqueTogether(
                    name='monitor',
                    unique_together={('project_id', 'slug')},
                ),
                migrations.AddIndex(
                    model_name='monitor',
                    index=models.Index(fields=['organization_id', 'slug'], name='sentry_moni_organiz_a62466_idx'),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='processingissue',
            name='datetime',
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='rawevent',
            name='datetime',
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='reprocessingreport',
            name='datetime',
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='monitorcheckin',
            name='config',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict, null=True),
        ),
        migrations.AlterField(
            model_name='alertruleactivationcondition',
            name='alert_rule',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activation_condition', to='sentry.alertrule'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='monitorcheckin',
                    name='config',
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0687_alert_rule_project_backfill_migration._backfill_alert_rule_projects,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_alertruleprojects', 'sentry_querysubscription']},
        # ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField(['has_releases', 'has_issue_alerts_targeting', 'has_transactions', 'has_alert_filters', 'has_sessions', 'has_profiles', 'has_replays', 'has_feedbacks', 'has_new_feedbacks', 'spike_protection_error_currently_active', 'spike_protection_transaction_currently_active', 'spike_protection_attachment_currently_active', 'has_minified_stack_trace', 'has_cron_monitors', 'has_cron_checkins', 'has_sourcemaps', 'has_custom_metrics', 'has_high_priority_alerts'], default=10, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                ALTER TABLE "sentry_monitorcheckin" DROP COLUMN "config";\n                ',
                    reverse_sql='\n                ALTER TABLE "sentry_monitorcheckin" ADD COLUMN "config" TEXT NULL;\n                ',
                    hints={'tables': ['sentry_monitorcheckin']},
                ),
            ],
        ),
        migrations.AlterField(
            model_name='projectavatar',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.project', unique=True),
        ),
        migrations.AlterField(
            model_name='teamavatar',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.team', unique=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='teamavatar',
                    name='team',
                ),
                migrations.DeleteModel(
                    name='ProjectAvatar',
                ),
                migrations.DeleteModel(
                    name='TeamAvatar',
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0692_backfill_group_priority_again.update_group_priority,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupedmessage']},
        # ),
        migrations.AddField(
            model_name='monitor',
            name='owner_actor_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.AddIndex(
            model_name='alertruleactivations',
            index=models.Index(fields=['alert_rule', 'date_added'], name='sentry_aler_alert_r_aa70f7_idx'),
        ),
        migrations.AddField(
            model_name='monitor',
            name='owner_team_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.AddField(
            model_name='monitor',
            name='owner_user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE'),
        ),
        migrations.AddConstraint(
            model_name='monitor',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('owner_team_id__isnull', False), ('owner_user_id__isnull', True)), models.Q(('owner_team_id__isnull', True), ('owner_user_id__isnull', False)), models.Q(('owner_team_id__isnull', True), ('owner_user_id__isnull', True)), _connector='OR'), name='monitor_owner_team_or_user_check'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='monitor',
                    name='owner_actor_id',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                ALTER TABLE "sentry_monitor" DROP COLUMN "owner_actor_id";\n                ',
                    reverse_sql='\n                ALTER TABLE "sentry_monitor" ADD COLUMN "owner_actor_id" bigint NULL;\n                ',
                    hints={'tables': ['sentry_monitor']},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='docintegrationavatar',
                    name='file_id',
                ),
                migrations.RemoveField(
                    model_name='sentryappavatar',
                    name='file_id',
                ),
                migrations.RemoveField(
                    model_name='useravatar',
                    name='file_id',
                ),
            ],
        ),
        migrations.AlterField(
            model_name='monitor',
            name='owner_user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_docintegrationavatar DROP COLUMN file_id',
                    reverse_sql='ALTER TABLE sentry_docintegrationavatar ADD COLUMN file_id BIGINT NULL',
                    hints={'tables': ['sentry_docintegrationavatar']},
                ),
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_sentryappavatar DROP COLUMN file_id',
                    reverse_sql='ALTER TABLE sentry_sentryappavatar ADD COLUMN file_id BIGINT NULL',
                    hints={'tables': ['sentry_sentryappavatar']},
                ),
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_useravatar DROP COLUMN file_id',
                    reverse_sql='ALTER TABLE sentry_useravatar ADD COLUMN file_id BIGINT NULL',
                    hints={'tables': ['sentry_useravatar']},
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0701_backfill_alertrule_user_team.backfill_alertrule_owners,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_alertrule', 'sentry_actor']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0702_alert_rule_project_backfill_migration_2._backfill_alert_rule_projects,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_alertruleprojects', 'sentry_querysubscription']},
        # ),
        migrations.AddField(
            model_name='rule',
            name='owner_team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.team'),
        ),
        migrations.AddField(
            model_name='rule',
            name='owner_user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL'),
        ),
        migrations.AddConstraint(
            model_name='rule',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('owner_team__isnull', False), ('owner_user_id__isnull', True)), models.Q(('owner_team__isnull', True), ('owner_user_id__isnull', False)), models.Q(('owner_team__isnull', True), ('owner_user_id__isnull', True)), _connector='OR'), name='rule_owner_user_or_team_check'),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0704_backfill_rule_user_team.backfill_rule_owners,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_rule', 'sentry_actor']},
        # ),
        migrations.AddField(
            model_name='grouphistory',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.team'),
        ),
        migrations.AddField(
            model_name='grouphistory',
            name='user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL'),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0706_grouphistory_userteam_backfill.backfill_grouphistory_actor,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_grouphistory', 'sentry_actor']},
        # ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_alertruleactivations" ADD COLUMN "activator" VARCHAR(250) NOT NULL DEFAULT \'default_activator\';\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_alertruleactivations" DROP COLUMN "activator";\n                    ',
                    hints={'tables': ['sentry_alertruleactivations']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_alertruleactivations" ADD COLUMN "condition_type" SMALLINT NOT NULL DEFAULT 0;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_alertruleactivations" DROP COLUMN "condition_type";\n                    ',
                    hints={'tables': ['sentry_alertruleactivations']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='alertruleactivations',
                    name='activator',
                    field=models.CharField(default='default_activator', max_length=250),
                ),
                migrations.AddField(
                    model_name='alertruleactivations',
                    name='condition_type',
                    field=models.SmallIntegerField(default=0),
                ),
            ],
        ),
        migrations.AddField(
            model_name='incident',
            name='activation',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.alertruleactivations'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='rule',
                    name='owner',
                ),
            ],
        ),
        migrations.AddIndex(
            model_name='rule',
            index=models.Index(fields=['project', 'status', 'owner_team'], name='sentry_rule_project_cce776_idx'),
        ),
        migrations.AddIndex(
            model_name='rule',
            index=models.Index(fields=['project', 'status', 'owner_user_id'], name='sentry_rule_project_6e9491_idx'),
        ),
        migrations.RemoveIndex(
            model_name='rule',
            name='sentry_rule_project_676d0d_idx',
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_alertrule" DROP CONSTRAINT IF EXISTS "sentry_alertrule_owner_id_477ec831_fk_sentry_actor_id"\n                    ',
                    reverse_sql='',
                    hints={'tables': ['sentry_alertrule']},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_rule" DROP CONSTRAINT IF EXISTS "sentry_rule_owner_id_aa4e908b_fk_sentry_actor_id"\n                    ',
                    reverse_sql='',
                    hints={'tables': ['sentry_rule']},
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='alertrule',
                    name='owner',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_grouphistory" DROP CONSTRAINT IF EXISTS "sentry_grouphistory_actor_id_085453d6_fk_sentry_actor_id"\n                    ',
                    reverse_sql='',
                    hints={'tables': ['sentry_grouphistory']},
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='grouphistory',
                    name='actor',
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0711_backfill_group_attributes_to_self_hosted.backfill_group_attributes_to_snuba,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupedmessage']},
        # ),
        migrations.AddIndex(
            model_name='controltombstone',
            index=models.Index(fields=['table_name', 'object_identifier'], name='sentry_cont_table_n_940c6d_idx'),
        ),
        migrations.AddIndex(
            model_name='regiontombstone',
            index=models.Index(fields=['table_name', 'object_identifier'], name='sentry_regi_table_n_cd667a_idx'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_team" DROP CONSTRAINT IF EXISTS "sentry_team_actor_idx_fk_sentry_actor_id"\n                    ',
                    reverse_sql='',
                    hints={'tables': ['sentry_team']},
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='team',
                    name='actor',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='DROP TABLE IF EXISTS "sentry_projectavatar"',
                    reverse_sql='CREATE TABLE sentry_projectavatar (id BIGSERIAL)',
                    hints={'tables': ['sentry_teamavatar']},
                ),
                migrations.RunSQL(
                    sql='DROP TABLE IF EXISTS "sentry_teamavatar"',
                    reverse_sql='CREATE TABLE sentry_teamavatar (id BIGSERIAL)',
                    hints={'tables': ['sentry_teamavatar']},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    -- drop team_id index & constraint\n                    ALTER TABLE "sentry_actor" DROP CONSTRAINT IF EXISTS "sentry_actor_team_id_6ca8eba5_fk_sentry_team_id";\n                    ALTER TABLE "sentry_actor" DROP CONSTRAINT IF EXISTS "sentry_actor_team_id_6ca8eba5_uniq";\n                    DROP INDEX IF EXISTS "sentry_actor_team_id_6ca8eba5_like";\n                    -- drop user_id index\n                    ALTER TABLE "sentry_actor" DROP CONSTRAINT IF EXISTS "sentry_actor_user_id_c832ff63_uniq";\n                    DROP INDEX IF EXISTS "sentry_actor_user_id_c832ff63_like";\n                    ',
                    reverse_sql='',
                    hints={'tables': ['sentry_actor']},
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name='actor',
                    name='team',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, db_index=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.team'),
                ),
                migrations.AlterField(
                    model_name='actor',
                    name='user_id',
                    field=models.BigIntegerField(null=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(
                    name='Actor',
                ),
            ],
        ),
        migrations.AddField(
            model_name='querysubscription',
            name='timebox_end',
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name='querysubscription',
            name='timebox_start',
            field=models.DateTimeField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='querysubscription',
                    name='timebox_end',
                ),
                migrations.RemoveField(
                    model_name='querysubscription',
                    name='timebox_start',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                ALTER TABLE "sentry_querysubscription" DROP COLUMN "timebox_start";\n                ALTER TABLE "sentry_querysubscription" DROP COLUMN "timebox_end";\n                ',
                    hints={'tables': ['sentry_querysubscription']},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_team DROP COLUMN actor_id',
                    reverse_sql='ALTER TABLE sentry_team ADD COLUMN actor_id BIGINT NULL',
                    hints={'tables': ['sentry_team']},
                ),
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_rule DROP COLUMN owner_id',
                    reverse_sql='ALTER TABLE sentry_rule ADD COLUMN owner_id BIGINT NULL',
                    hints={'tables': ['sentry_rule']},
                ),
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_alertrule DROP COLUMN owner_id',
                    reverse_sql='ALTER TABLE sentry_alertrule ADD COLUMN owner_id BIGINT NULL',
                    hints={'tables': ['sentry_alertrule']},
                ),
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_grouphistory DROP COLUMN actor_id',
                    reverse_sql='ALTER TABLE sentry_grouphistory ADD COLUMN actor_id BIGINT NULL',
                    hints={'tables': ['sentry_grouphistory']},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(
                    name='SentryFunction',
                ),
            ],
        ),
        migrations.RunSQL(
            sql='DROP TABLE IF EXISTS "sentry_sentryfunction";',
            reverse_sql='CREATE TABLE sentry_sentryfunction (fake_col int)',
            hints={'tables': ['sentry_sentryfunction']},
        ),
        migrations.CreateModel(
            name='ProjectTemplate',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('name', models.CharField(max_length=200)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_projecttemplate',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='template',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.projecttemplate'),
        ),
        migrations.CreateModel(
            name='ProjectTemplateOption',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64)),
                ('value', sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                ('project_template', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='sentry.projecttemplate')),
            ],
            options={
                'db_table': 'sentry_projecttemplateoption',
            },
        ),
        migrations.AddConstraint(
            model_name='projecttemplate',
            constraint=models.UniqueConstraint(fields=('name', 'organization'), name='unique_projecttemplate_name_per_org'),
        ),
        migrations.AlterUniqueTogether(
            name='projecttemplateoption',
            unique_together={('project_template', 'key')},
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_discoversavedquery" ADD COLUMN "dataset" integer NOT NULL DEFAULT 0;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_discoversavedquery" DROP COLUMN "dataset";\n                    ',
                    hints={'tables': ['sentry_discoversavedquery']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='discoversavedquery',
                    name='dataset',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
            ],
        ),
        migrations.CreateModel(
            name='GroupSearchView',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('name', models.TextField(max_length=128)),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, on_delete='CASCADE')),
                ('query', models.TextField()),
                ('query_sort', models.CharField(default='date', max_length=16)),
                ('position', models.PositiveSmallIntegerField()),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_groupsearchview',
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                        CREATE UNIQUE INDEX CONCURRENTLY "sentry_issueviews_unique_view_position_per_org_user" ON "sentry_groupsearchview" ("user_id", "organization_id", "position");\n                    ',
                    hints={'tables': ['sentry_groupsearchview']},
                ),
                migrations.RunSQL(
                    sql='\n                        ALTER TABLE "sentry_groupsearchview" ADD CONSTRAINT "sentry_issueviews_unique_view_position_per_org_user" UNIQUE USING INDEX "sentry_issueviews_unique_view_position_per_org_user" DEFERRABLE INITIALLY DEFERRED;\n                    ',
                    hints={'tables': ['sentry_groupsearchview']},
                ),
            ],
            state_operations=[
                migrations.AddConstraint(
                    model_name='groupsearchview',
                    constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('user_id', 'organization_id', 'position'), name='sentry_issueviews_unique_view_position_per_org_user'),
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0726_apitoken_backfill_hashes.backfill_hash_values,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_apitoken']},
        # ),
        migrations.AddField(
            model_name='alertrule',
            name='description',
            field=models.CharField(max_length=1000, null=True),
        ),
        migrations.AddField(
            model_name='incident',
            name='subscription',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='sentry.querysubscription'),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0729_backfill_groupsearchviews_with_pinned_searches.backfill_groupsearchviews_with_pinned_searches,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupsearchview']},
        # ),
        migrations.AlterField(
            model_name='incident',
            name='subscription',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.querysubscription'),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0730_add_subscription_fk_to_incident._backfill_incident_subscription,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_incident', 'sentry_querysubscription']},
        # ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField(['has_releases', 'has_issue_alerts_targeting', 'has_transactions', 'has_alert_filters', 'has_sessions', 'has_profiles', 'has_replays', 'has_feedbacks', 'has_new_feedbacks', 'spike_protection_error_currently_active', 'spike_protection_transaction_currently_active', 'spike_protection_attachment_currently_active', 'has_minified_stack_trace', 'has_cron_monitors', 'has_cron_checkins', 'has_sourcemaps', 'has_custom_metrics', 'has_high_priority_alerts', 'has_insights_http', 'has_insights_db', 'has_insights_assets', 'has_insights_app_start', 'has_insights_screen_load', 'has_insights_vitals', 'has_insights_caches', 'has_insights_queues', 'has_insights_llm_monitoring'], default=10, null=True),
        ),
        migrations.CreateModel(
            name='SpanAttributeExtractionRuleConfig',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('created_by_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
                ('span_attribute', models.CharField(max_length=1000)),
                ('unit', models.CharField(default='none', max_length=100)),
                ('tags', sentry.db.models.fields.array.ArrayField(null=True)),
                ('aggregates', sentry.db.models.fields.array.ArrayField(null=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'verbose_name': 'SpanAttrConfig',
                'db_table': 'sentry_spanattributeextractionruleconfig',
                'unique_together': {('project', 'span_attribute')},
            },
        ),
        migrations.CreateModel(
            name='SpanAttributeExtractionRuleCondition',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('created_by_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='SET_NULL')),
                ('value', models.CharField(blank=True, max_length=1000, null=True)),
                ('config', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='sentry.spanattributeextractionruleconfig')),
            ],
            options={
                'verbose_name': 'SpanAttrCond',
                'db_table': 'sentry_spanattributeextractionrulecondition',
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                        ALTER TABLE "sentry_relocation" ADD COLUMN "provenance" integer NOT NULL DEFAULT 0;\n                        ',
                    reverse_sql='\n                        ALTER TABLE "sentry_relocation" DROP COLUMN "provenance";\n                        ',
                    hints={'tables': ['sentry_relocation']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='relocation',
                    name='provenance',
                    field=models.SmallIntegerField(default=0),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='eventprocessingissue',
            name='processing_issue',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.processingissue'),
        ),
        migrations.AlterField(
            model_name='eventprocessingissue',
            name='raw_event',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.rawevent'),
        ),
        migrations.AlterField(
            model_name='processingissue',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project'),
        ),
        migrations.AlterField(
            model_name='rawevent',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project'),
        ),
        migrations.AlterField(
            model_name='reprocessingreport',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.project'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(
                    name='LatestAppConnectBuildsCheck',
                ),
                migrations.DeleteModel(
                    name='AppConnectBuild',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(
                    name='EventProcessingIssue',
                ),
                migrations.DeleteModel(
                    name='ProcessingIssue',
                ),
                migrations.DeleteModel(
                    name='RawEvent',
                ),
                migrations.DeleteModel(
                    name='ReprocessingReport',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_discoversavedquery" ADD COLUMN "dataset_source" integer NOT NULL DEFAULT 0;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_discoversavedquery" DROP COLUMN "dataset_source";\n                    ',
                    hints={'tables': ['sentry_discoversavedquery']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='discoversavedquery',
                    name='dataset_source',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
            ],
        ),
        migrations.RunSQL(
            sql='DROP TABLE "sentry_eventprocessingissue";',
            reverse_sql='CREATE TABLE sentry_eventprocessingissue (fake_col int)',
            hints={'tables': ['sentry_eventprocessingissue']},
        ),
        migrations.RunSQL(
            sql='DROP TABLE "sentry_processingissue";',
            reverse_sql='CREATE TABLE sentry_processingissue (fake_col int)',
            hints={'tables': ['sentry_processingissue']},
        ),
        migrations.RunSQL(
            sql='DROP TABLE "sentry_rawevent";',
            reverse_sql='CREATE TABLE sentry_rawevent (fake_col int)',
            hints={'tables': ['sentry_rawevent']},
        ),
        migrations.RunSQL(
            sql='DROP TABLE "sentry_reprocessingreport";',
            reverse_sql='CREATE TABLE sentry_reprocessingreport (fake_col int)',
            hints={'tables': ['sentry_reprocessingreport']},
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0739_backfill_group_info_to_group_attributes.backfill_group_attributes_to_snuba,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupedmessage']},
        # ),
        migrations.AlterUniqueTogether(
            name='relocationfile',
            unique_together={('relocation', 'file'), ('relocation', 'kind')},
        ),
        migrations.AddField(
            model_name='alertrule',
            name='seasonality',
            field=models.CharField(null=True),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='sensitivity',
            field=models.CharField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_alertrule" ADD COLUMN "detection_type" VARCHAR(32) NOT NULL DEFAULT \'static\';\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_alertrule" DROP COLUMN "detection_type";\n                    ',
                    hints={'tables': ['sentry_alertrule']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='alertrule',
                    name='detection_type',
                    field=models.CharField(default='static'),
                ),
            ],
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0742_backfill_alertrule_detection_type._backfill_detection_type,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_alertrule']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0743_backfill_broken_monitor_notification_setting_option.backfill_broken_monitor_notification_setting_option,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_notificationsettingoption']},
        # ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_dashboardwidget" ADD COLUMN "dataset_source" integer NOT NULL DEFAULT 0;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_dashboardwidget" DROP COLUMN "dataset_source";\n                    ',
                    hints={'tables': ['sentry_dashboardwidget']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='dashboardwidget',
                    name='dataset_source',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='organization',
            name='flags',
            field=bitfield.models.BitField(['allow_joinleave', 'enhanced_privacy', 'disable_shared_issues', 'early_adopter', 'require_2fa', 'disable_new_visibility_features', 'require_email_verification', 'codecov_access', 'disable_member_project_creation', 'prevent_superuser_access'], default=1),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmapping"\n                    ADD COLUMN "disable_member_project_creation" boolean NOT NULL DEFAULT false,\n                    ADD COLUMN "prevent_superuser_access" boolean NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_organizationmapping"\n                    DROP COLUMN "disable_member_project_creation",\n                    DROP COLUMN "prevent_superuser_access";\n                    ',
                    hints={'tables': ['sentry_organizationmapping']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='organizationmapping',
                    name='disable_member_project_creation',
                    field=models.BooleanField(default=False),
                ),
                migrations.AddField(
                    model_name='organizationmapping',
                    name='prevent_superuser_access',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.CreateModel(
            name='DataSecrecyWaiver',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('access_start', models.DateTimeField(default=django.utils.timezone.now)),
                ('access_end', models.DateTimeField(default=django.utils.timezone.now)),
                ('zendesk_tickets', sentry.db.models.fields.array.ArrayField(default=list, null=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization', unique=True)),
            ],
            options={
                'db_table': 'sentry_datasecrecywaiver',
            },
        ),
        migrations.CreateModel(
            name='GroupHashMetadata',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('grouphash', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='sentry.grouphash', unique=True)),
            ],
            options={
                'db_table': 'sentry_grouphashmetadata',
            },
        ),
        migrations.AlterField(
            model_name='organization',
            name='flags',
            field=bitfield.models.BitField(['allow_joinleave', 'enhanced_privacy', 'disable_shared_issues', 'early_adopter', 'require_2fa', 'disable_new_visibility_features', 'require_email_verification', 'codecov_access', 'disable_member_project_creation', 'prevent_superuser_access', 'disable_member_invite'], default=1),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmapping"\n                    ADD COLUMN "disable_member_invite" boolean NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_organizationmapping"\n                    DROP COLUMN "disable_member_invite";\n                    ',
                    hints={'tables': ['sentry_organizationmapping']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='organizationmapping',
                    name='disable_member_invite',
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='grouphashmetadata',
            name='grouphash',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='_metadata', to='sentry.grouphash'),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0752_fix_substatus_for_unresolved_groups.backfill_substatus_for_unresolved_groups,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupedmessage', 'sentry_grouphistory']},
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0753_fix_substatus_for_ignored_groups.backfill_substatus_for_ignored_groups,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupedmessage']},
        # ),
        migrations.AddField(
            model_name='broadcast',
            name='category',
            field=models.CharField(blank=True, max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='broadcast',
            name='media_url',
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='broadcast',
            name='title',
            field=models.CharField(max_length=64),
        ),
        migrations.AlterField(
            model_name='spanattributeextractionrulecondition',
            name='config',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='sentry.spanattributeextractionruleconfig'),
        ),
        migrations.AddIndex(
            model_name='grouprelease',
            index=models.Index(fields=['group_id', '-last_seen'], name='sentry_grou_group_i_b6e502_idx'),
        ),
        migrations.RemoveIndex(
            model_name='grouprelease',
            name='sentry_grou_group_i_f10abe_idx',
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_apiapplication"\n                    ADD COLUMN "scopes" TEXT[] NULL,\n                    ADD COLUMN "requires_org_level_access" BOOLEAN DEFAULT FALSE;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_apiapplication"\n                    DROP COLUMN "scopes",\n                    DROP COLUMN "requires_org_level_access"\n                    ',
                    hints={'tables': ['sentry_apiapplication']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='apiapplication',
                    name='requires_org_level_access',
                    field=models.BooleanField(default=False),
                ),
                migrations.AddField(
                    model_name='apiapplication',
                    name='scopes',
                    field=sentry.db.models.fields.array.ArrayField(null=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterUniqueTogether(
                    name='spanattributeextractionruleconfig',
                    unique_together=None,
                ),
                migrations.RemoveField(
                    model_name='spanattributeextractionruleconfig',
                    name='project',
                ),
                migrations.DeleteModel(
                    name='SpanAttributeExtractionRuleCondition',
                ),
                migrations.DeleteModel(
                    name='SpanAttributeExtractionRuleConfig',
                ),
            ],
        ),
        migrations.RunSQL(
            sql='\n            DROP TABLE "sentry_spanattributeextractionrulecondition";\n            ',
            reverse_sql='CREATE TABLE sentry_spanattributeextractionrulecondition (fake_col int)',
            hints={'tables': ['sentry_spanattributeextractionrulecondition']},
        ),
        migrations.RunSQL(
            sql='\n            DROP TABLE "sentry_spanattributeextractionruleconfig";\n            ',
            reverse_sql='CREATE TABLE sentry_spanattributeextractionruleconfig (fake_col int)',
            hints={'tables': ['sentry_spanattributeextractionruleconfig']},
        ),
        migrations.RunSQL(
            sql='DROP TABLE IF EXISTS "sentry_latestappconnectbuildscheck"',
            reverse_sql='CREATE TABLE sentry_latestappconnectbuildscheck (id BIGSERIAL)',
            hints={'tables': ['sentry_latestappconnectbuildscheck']},
        ),
        migrations.RunSQL(
            sql='DROP TABLE IF EXISTS "sentry_appconnectbuild"',
            reverse_sql='CREATE TABLE sentry_appconnectbuild (id BIGSERIAL)',
            hints={'tables': ['sentry_appconnectbuild']},
        ),
        migrations.AddField(
            model_name='broadcast',
            name='created_by_id',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0764_migrate_bad_status_substatus_rows.fix_substatus_for_groups,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupedmessage', 'sentry_grouphistory']},
        # ),
        migrations.AddField(
            model_name='apiauthorization',
            name='organization_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, null=True, on_delete='CASCADE'),
        ),
        migrations.AddField(
            model_name='apigrant',
            name='organization_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, null=True, on_delete='CASCADE'),
        ),
        migrations.AddField(
            model_name='apitoken',
            name='scoping_organization_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.Organization', db_index=True, null=True, on_delete='CASCADE'),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0766_fix_substatus_for_pending_merge.fix_substatus_for_pending_merge,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupedmessage', 'sentry_grouphistory']},
        # ),
        migrations.AddField(
            model_name='dashboardwidgetquery',
            name='selected_aggregate',
            field=models.IntegerField(null=True),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0768_fix_old_group_first_seen_dates.update_old_first_seen_dates,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupedmessage']},
        # ),
        migrations.AddField(
            model_name='grouphashmetadata',
            name='seer_date_sent',
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name='grouphashmetadata',
            name='seer_event_sent',
            field=models.CharField(max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='grouphashmetadata',
            name='seer_match_distance',
            field=models.FloatField(null=True),
        ),
        migrations.AddField(
            model_name='grouphashmetadata',
            name='seer_matched_grouphash',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='seer_matchees', to='sentry.grouphash'),
        ),
        migrations.AddField(
            model_name='grouphashmetadata',
            name='seer_model',
            field=models.CharField(null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='slug',
            field=sentry.db.models.fields.slug.SentrySlugField(max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='grouphashmetadata',
            name='latest_grouping_config',
            field=models.CharField(null=True),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0772_backfill_grouphash_metadata_grouping_config.fill_in_missing_grouping_config,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupedhashmetadata']},
        # ),
        migrations.AlterField(
            model_name='group',
            name='score',
            field=sentry.db.models.fields.bounded.BoundedIntegerField(default=0, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='group',
                    name='score',
                ),
            ],
        ),
        migrations.CreateModel(
            name='DashboardPermissions',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('is_creator_only_editable', models.BooleanField(default=False)),
                ('dashboard', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sentry.dashboard')),
            ],
            options={
                'db_table': 'sentry_dashboardpermissions',
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                ALTER TABLE "sentry_groupedmessage" DROP COLUMN "score";\n                ',
                    reverse_sql='\n                ALTER TABLE "sentry_groupedmessage" ADD COLUMN "score" int NULL;\n                ',
                    hints={'tables': ['sentry_groupedmessage']},
                ),
            ],
        ),
        migrations.AlterField(
            model_name='dashboardpermissions',
            name='dashboard',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to='sentry.dashboard'),
        ),
        migrations.AlterField(
            model_name='userreport',
            name='comments',
            field=models.TextField(max_length=4096),
        ),
        # migrations.RunPython(
        #     code=sentry.migrations.0779_remove_groups_from_group_inbox.remove_groups_from_group_inbox,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_groupinbox']},
        # ),
        migrations.CreateModel(
            name='RollbackOrganization',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('data', models.JSONField(default=None, null=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_rollbackorganization',
            },
        ),
        migrations.CreateModel(
            name='RollbackUser',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, on_delete='CASCADE')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('share_uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('data', models.JSONField(default=None, null=True)),
                ('share_data', models.JSONField(default=None, null=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization')),
            ],
            options={
                'db_table': 'sentry_rollbackuser',
                'constraints': [models.UniqueConstraint(fields=('user_id', 'organization_id'), name='unique_user_org')],
            },
        ),
        migrations.AddField(
            model_name='grouphashmetadata',
            name='hash_basis',
            field=models.CharField(null=True),
        ),
        migrations.AlterField(
            model_name='deletedproject',
            name='slug',
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='release',
                    name='project_id',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='broadcast',
                    name='cta',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_dashboardpermissions" ADD COLUMN "is_editable_by_everyone" boolean NOT NULL DEFAULT true;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_dashboardpermissions" DROP COLUMN "is_editable_by_everyone";\n                    ',
                    hints={'tables': ['sentry_dashboardpermissions']},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='dashboardpermissions',
                    name='is_editable_by_everyone',
                    field=models.BooleanField(default=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name='DashboardPermissionsTeam',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('permissions', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.dashboardpermissions')),
                ('team', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.team')),
            ],
            options={
                'db_table': 'sentry_dashboardpermissionsteam',
                'unique_together': {('team', 'permissions')},
            },
        ),
        migrations.AddField(
            model_name='dashboardpermissions',
            name='teams_with_edit_access',
            field=models.ManyToManyField(blank=True, through='sentry.DashboardPermissionsTeam', to='sentry.team'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_broadcast" DROP COLUMN "cta";\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_broadcast" ADD COLUMN "cta" varchar(256) NULL;\n                    ',
                    hints={'tables': ['sentry_broadcast']},
                ),
            ],
        ),
        migrations.AlterField(
            model_name='dashboardpermissions',
            name='is_creator_only_editable',
            field=models.BooleanField(default=False, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='dashboardpermissions',
                    name='is_creator_only_editable',
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name='rollbackorganization',
            constraint=models.UniqueConstraint(fields=('organization_id',), name='unique_org'),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_dashboardpermissions" DROP COLUMN "is_creator_only_editable";\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_dashboardpermissions" ADD COLUMN "is_creator_only_editable" bool NULL;\n                    ',
                    hints={'tables': ['sentry_dashboardpermissions']},
                ),
            ],
        ),
        migrations.AddField(
            model_name='grouphashmetadata',
            name='hashing_metadata',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AddConstraint(
            model_name='apiauthorization',
            constraint=models.UniqueConstraint(condition=models.Q(('organization_id__isnull', True)), fields=('user', 'application'), name='apiauthorization_user_app'),
        ),
        migrations.AddConstraint(
            model_name='apiauthorization',
            constraint=models.UniqueConstraint(condition=models.Q(('organization_id__isnull', False)), fields=('user', 'application', 'organization_id'), name='apiauthorization_user_app_org'),
        ),
        migrations.AlterUniqueTogether(
            name='apiauthorization',
            unique_together=set(),
        ),
        migrations.AlterField(
            model_name='alertruleexcludedprojects',
            name='alert_rule',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.alertrule'),
        ),
        migrations.AlterField(
            model_name='alertruletriggerexclusion',
            name='alert_rule_trigger',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='exclusions', to='sentry.alertruletrigger'),
        ),
        migrations.AlterField(
            model_name='alertruletriggerexclusion',
            name='query_subscription',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.querysubscription'),
        ),
        # sentry.new_migrations.monkey.fields.SafeRemoveField(
        # ),
        # sentry.new_migrations.monkey.fields.SafeRemoveField(
        # ),
        # sentry.new_migrations.monkey.fields.SafeRemoveField(
        # ),
        # sentry.new_migrations.monkey.fields.SafeRemoveField(
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        migrations.CreateModel(
            name='DashboardFavoriteUser',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('user_id', sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, on_delete='CASCADE')),
                ('dashboard', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.dashboard')),
            ],
            options={
                'db_table': 'sentry_dashboardfavoriteuser',
                'unique_together': {('user_id', 'dashboard')},
            },
        ),
        migrations.AddIndex(
            model_name='monitorcheckin',
            index=models.Index(fields=['status', 'date_added'], name='sentry_moni_status_dd2d85_idx'),
        ),
        migrations.AlterField(
            model_name='incidentseen',
            name='incident',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.incident'),
        ),
        migrations.AlterField(
            model_name='incidentseen',
            name='user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=False, null=True, on_delete='CASCADE'),
        ),
        migrations.AlterField(
            model_name='incidentsubscription',
            name='incident',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.incident'),
        ),
        migrations.AlterField(
            model_name='incidentsubscription',
            name='user_id',
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey('sentry.User', db_index=True, null=True, on_delete='CASCADE'),
        ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # migrations.RunPython(
        #     code=sentry.migrations.0802_remove_grouping_auto_update_option.remove_grouping_auto_update_option,
        #     reverse_code=django.db.migrations.operations.special.RunPython.noop,
        #     hints={'tables': ['sentry_projectoptions']},
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        migrations.AlterField(
            model_name='apiauthorization',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin', 'org:integrations', 'alerts:read', 'alerts:write', 'member:invite'], default=None),
        ),
        migrations.AlterField(
            model_name='apikey',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin', 'org:integrations', 'alerts:read', 'alerts:write', 'member:invite'], default=None),
        ),
        migrations.AlterField(
            model_name='apitoken',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin', 'org:integrations', 'alerts:read', 'alerts:write', 'member:invite'], default=None),
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='scopes',
            field=bitfield.models.BitField(['project:read', 'project:write', 'project:admin', 'project:releases', 'team:read', 'team:write', 'team:admin', 'event:read', 'event:write', 'event:admin', 'org:read', 'org:write', 'org:admin', 'member:read', 'member:write', 'member:admin', 'org:integrations', 'alerts:read', 'alerts:write', 'member:invite'], default=None),
        ),
        # sentry.new_migrations.monkey.fields.SafeRemoveField(
        # ),
        # sentry.new_migrations.monkey.fields.SafeRemoveField(
        # ),
        migrations.AlterField(
            model_name='grouphashmetadata',
            name='seer_matched_grouphash',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='seer_matchees', to='sentry.grouphash'),
        ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField(['has_releases', 'has_issue_alerts_targeting', 'has_transactions', 'has_alert_filters', 'has_sessions', 'has_profiles', 'has_replays', 'has_feedbacks', 'has_new_feedbacks', 'spike_protection_error_currently_active', 'spike_protection_transaction_currently_active', 'spike_protection_attachment_currently_active', 'has_minified_stack_trace', 'has_cron_monitors', 'has_cron_checkins', 'has_sourcemaps', 'has_custom_metrics', 'has_high_priority_alerts', 'has_insights_http', 'has_insights_db', 'has_insights_assets', 'has_insights_app_start', 'has_insights_screen_load', 'has_insights_vitals', 'has_insights_caches', 'has_insights_queues', 'has_insights_llm_monitoring', 'has_flags'], default=10, null=True),
        ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # sentry.new_migrations.monkey.fields.SafeRemoveField(
        # ),
        migrations.AlterField(
            model_name='alertruleactivationcondition',
            name='alert_rule',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='activation_condition', to='sentry.alertrule'),
        ),
        migrations.AlterField(
            model_name='alertruleactivations',
            name='alert_rule',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, related_name='activations', to='sentry.alertrule'),
        ),
        migrations.AlterField(
            model_name='alertruleactivations',
            name='query_subscription',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.querysubscription'),
        ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        # sentry.new_migrations.monkey.models.SafeDeleteModel(
        # ),
        migrations.AddField(
            model_name='notificationmessage',
            name='action',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='workflow_engine.action'),
        ),
        migrations.AddField(
            model_name='notificationmessage',
            name='group',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.group'),
        ),
        migrations.AddField(
            model_name='notificationmessage',
            name='open_period_start',
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name='grouptombstone',
            name='date_added',
            field=models.DateTimeField(default=django.utils.timezone.now, null=True),
        ),
        migrations.AddConstraint(
            model_name='notificationmessage',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('incident__isnull', False), ('trigger_action__isnull', False), ('rule_action_uuid__isnull', True), ('rule_fire_history__isnull', True), ('action__isnull', True), ('group__isnull', True), ('open_period_start__isnull', True)), models.Q(('incident__isnull', True), ('trigger_action__isnull', True), ('rule_action_uuid__isnull', False), ('rule_fire_history__isnull', False), ('action__isnull', True), ('group__isnull', True)), models.Q(('incident__isnull', True), ('trigger_action__isnull', True), ('rule_action_uuid__isnull', True), ('rule_fire_history__isnull', True), ('action__isnull', False), ('group__isnull', False)), _connector='OR'), name='notification_type_mutual_exclusivity'),
        ),
        migrations.AddConstraint(
            model_name='notificationmessage',
            constraint=models.UniqueConstraint(models.F('rule_fire_history'), models.F('rule_action_uuid'), django.db.models.functions.comparison.Coalesce('open_period_start', models.Value(datetime.datetime(1, 1, 1, 0, 0, tzinfo=datetime.timezone.utc))), condition=models.Q(('error_code__isnull', True), ('parent_notification_message__isnull', True)), name='singular_parent_message_per_rule_fire_history_rule_action_open_'),
        ),
        migrations.AddConstraint(
            model_name='notificationmessage',
            constraint=models.UniqueConstraint(models.F('action'), models.F('group'), django.db.models.functions.comparison.Coalesce('open_period_start', models.Value(datetime.datetime(1, 1, 1, 0, 0, tzinfo=datetime.timezone.utc))), condition=models.Q(('error_code__isnull', True), ('parent_notification_message__isnull', True)), name='singular_parent_message_per_action_group_open_period'),
        ),
        migrations.RemoveConstraint(
            model_name='notificationmessage',
            name='notification_for_issue_xor_metric_alert',
        ),
        migrations.RemoveConstraint(
            model_name='notificationmessage',
            name='singular_parent_message_per_rule_fire_history_and_rule_action',
        ),
        migrations.AlterField(
            model_name='monitorcheckin',
            name='monitor_environment',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.monitorenvironment'),
        ),
        migrations.AlterField(
            model_name='alertrule',
            name='snuba_query',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.snubaquery', unique=True),
        ),
        migrations.AlterField(
            model_name='querysubscription',
            name='snuba_query',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='sentry.snubaquery'),
        ),
        migrations.AddField(
            model_name='groupsearchview',
            name='environments',
            field=sentry.db.models.fields.array.ArrayField(default=list, null=True),
        ),
        migrations.AddField(
            model_name='groupsearchview',
            name='is_all_projects',
            field=models.BooleanField(db_default=False),
        ),
        migrations.AddField(
            model_name='groupsearchview',
            name='time_filters',
            field=models.JSONField(db_default={'period': '14d'}),
        ),
        migrations.CreateModel(
            name='GroupSearchViewProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('group_search_view', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.groupsearchview')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.project')),
            ],
            options={
                'db_table': 'sentry_groupsearchviewproject',
                'unique_together': {('group_search_view', 'project')},
            },
        ),
        migrations.AddField(
            model_name='groupsearchview',
            name='projects',
            field=models.ManyToManyField(through='sentry.GroupSearchViewProject', to='sentry.project'),
        ),
        migrations.AlterField(
            model_name='alertrule',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.organization'),
        ),
        migrations.AlterField(
            model_name='projectcodeowners',
            name='raw',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='projectcodeowners',
            name='schema',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.RemoveConstraint(
            model_name='notificationmessage',
            name='singular_parent_message_per_action_group_open_period',
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='uuid',
            field=models.CharField(default=sentry.sentry_apps.models.sentry_app.default_uuid, max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='teamkeytransaction',
            name='project_team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.projectteam'),
        ),
        migrations.AddField(
            model_name='grouphashmetadata',
            name='platform',
            field=models.CharField(null=True),
        ),
        migrations.AddField(
            model_name='monitorcheckin',
            name='date_clock',
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name='monitorcheckin',
            name='date_created',
            field=models.DateTimeField(default=django.utils.timezone.now, null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='external_id',
            field=models.CharField(max_length=256, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('organization', 'external_id'), ('organization', 'slug')},
        ),
        migrations.AlterField(
            model_name='grouphashmetadata',
            name='date_added',
            field=models.DateTimeField(default=django.utils.timezone.now, null=True),
        ),
        migrations.CreateModel(
            name='ControlRelocationTransfer',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('relocation_uuid', sentry.db.models.fields.uuid.UUIDField(max_length=32)),
                ('org_slug', models.CharField()),
                ('requesting_region', models.CharField()),
                ('exporting_region', models.CharField()),
                ('state', models.CharField(default='request')),
                ('scheduled_for', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('public_key', models.BinaryField(null=True)),
            ],
            options={
                'db_table': 'sentry_controlrelocationtransfer',
            },
        ),
        migrations.CreateModel(
            name='RegionRelocationTransfer',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('relocation_uuid', sentry.db.models.fields.uuid.UUIDField(max_length=32)),
                ('org_slug', models.CharField()),
                ('requesting_region', models.CharField()),
                ('exporting_region', models.CharField()),
                ('state', models.CharField(default='request')),
                ('scheduled_for', models.DateTimeField(default=django.utils.timezone.now, null=True)),
            ],
            options={
                'db_table': 'sentry_regionrelocationtransfer',
            },
        ),
        migrations.AddIndex(
            model_name='authidentity',
            index=models.Index(fields=['last_synced'], name='auth_identity_last_synced_idx'),
        ),
    ]
